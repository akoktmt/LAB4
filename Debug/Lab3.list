
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038c0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000034c  080039cc  080039cc  000139cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d18  08003d18  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08003d18  08003d18  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d18  08003d18  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d18  08003d18  00013d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d1c  08003d1c  00013d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003d20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  20000068  08003d88  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  08003d88  000202f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000aa2e  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020f4  00000000  00000000  0002ab02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009a0  00000000  00000000  0002cbf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000732  00000000  00000000  0002d598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018e15  00000000  00000000  0002dcca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c8a8  00000000  00000000  00046adf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000873b4  00000000  00000000  00053387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000030ac  00000000  00000000  000da73c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000dd7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	080039b4 	.word	0x080039b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	080039b4 	.word	0x080039b4

0800014c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000150:	4b18      	ldr	r3, [pc, #96]	; (80001b4 <MX_CAN_Init+0x68>)
 8000152:	4a19      	ldr	r2, [pc, #100]	; (80001b8 <MX_CAN_Init+0x6c>)
 8000154:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000156:	4b17      	ldr	r3, [pc, #92]	; (80001b4 <MX_CAN_Init+0x68>)
 8000158:	2204      	movs	r2, #4
 800015a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 800015c:	4b15      	ldr	r3, [pc, #84]	; (80001b4 <MX_CAN_Init+0x68>)
 800015e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000162:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000164:	4b13      	ldr	r3, [pc, #76]	; (80001b4 <MX_CAN_Init+0x68>)
 8000166:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800016a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 800016c:	4b11      	ldr	r3, [pc, #68]	; (80001b4 <MX_CAN_Init+0x68>)
 800016e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000172:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000174:	4b0f      	ldr	r3, [pc, #60]	; (80001b4 <MX_CAN_Init+0x68>)
 8000176:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800017a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800017c:	4b0d      	ldr	r3, [pc, #52]	; (80001b4 <MX_CAN_Init+0x68>)
 800017e:	2200      	movs	r2, #0
 8000180:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000182:	4b0c      	ldr	r3, [pc, #48]	; (80001b4 <MX_CAN_Init+0x68>)
 8000184:	2200      	movs	r2, #0
 8000186:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000188:	4b0a      	ldr	r3, [pc, #40]	; (80001b4 <MX_CAN_Init+0x68>)
 800018a:	2200      	movs	r2, #0
 800018c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800018e:	4b09      	ldr	r3, [pc, #36]	; (80001b4 <MX_CAN_Init+0x68>)
 8000190:	2200      	movs	r2, #0
 8000192:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000194:	4b07      	ldr	r3, [pc, #28]	; (80001b4 <MX_CAN_Init+0x68>)
 8000196:	2200      	movs	r2, #0
 8000198:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800019a:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <MX_CAN_Init+0x68>)
 800019c:	2200      	movs	r2, #0
 800019e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <MX_CAN_Init+0x68>)
 80001a2:	f000 fc05 	bl	80009b0 <HAL_CAN_Init>
 80001a6:	4603      	mov	r3, r0
 80001a8:	2b00      	cmp	r3, #0
 80001aa:	d001      	beq.n	80001b0 <MX_CAN_Init+0x64>
  {
    Error_Handler();
 80001ac:	f000 f9df 	bl	800056e <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80001b0:	bf00      	nop
 80001b2:	bd80      	pop	{r7, pc}
 80001b4:	20000084 	.word	0x20000084
 80001b8:	40006400 	.word	0x40006400

080001bc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b088      	sub	sp, #32
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001c4:	f107 0310 	add.w	r3, r7, #16
 80001c8:	2200      	movs	r2, #0
 80001ca:	601a      	str	r2, [r3, #0]
 80001cc:	605a      	str	r2, [r3, #4]
 80001ce:	609a      	str	r2, [r3, #8]
 80001d0:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	4a1c      	ldr	r2, [pc, #112]	; (8000248 <HAL_CAN_MspInit+0x8c>)
 80001d8:	4293      	cmp	r3, r2
 80001da:	d131      	bne.n	8000240 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80001dc:	4b1b      	ldr	r3, [pc, #108]	; (800024c <HAL_CAN_MspInit+0x90>)
 80001de:	69db      	ldr	r3, [r3, #28]
 80001e0:	4a1a      	ldr	r2, [pc, #104]	; (800024c <HAL_CAN_MspInit+0x90>)
 80001e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80001e6:	61d3      	str	r3, [r2, #28]
 80001e8:	4b18      	ldr	r3, [pc, #96]	; (800024c <HAL_CAN_MspInit+0x90>)
 80001ea:	69db      	ldr	r3, [r3, #28]
 80001ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80001f0:	60fb      	str	r3, [r7, #12]
 80001f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80001f4:	4b15      	ldr	r3, [pc, #84]	; (800024c <HAL_CAN_MspInit+0x90>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	4a14      	ldr	r2, [pc, #80]	; (800024c <HAL_CAN_MspInit+0x90>)
 80001fa:	f043 0304 	orr.w	r3, r3, #4
 80001fe:	6193      	str	r3, [r2, #24]
 8000200:	4b12      	ldr	r3, [pc, #72]	; (800024c <HAL_CAN_MspInit+0x90>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	f003 0304 	and.w	r3, r3, #4
 8000208:	60bb      	str	r3, [r7, #8]
 800020a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800020c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000210:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000212:	2300      	movs	r3, #0
 8000214:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000216:	2300      	movs	r3, #0
 8000218:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800021a:	f107 0310 	add.w	r3, r7, #16
 800021e:	4619      	mov	r1, r3
 8000220:	480b      	ldr	r0, [pc, #44]	; (8000250 <HAL_CAN_MspInit+0x94>)
 8000222:	f000 ffa3 	bl	800116c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000226:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800022a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800022c:	2302      	movs	r3, #2
 800022e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000230:	2303      	movs	r3, #3
 8000232:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000234:	f107 0310 	add.w	r3, r7, #16
 8000238:	4619      	mov	r1, r3
 800023a:	4805      	ldr	r0, [pc, #20]	; (8000250 <HAL_CAN_MspInit+0x94>)
 800023c:	f000 ff96 	bl	800116c <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000240:	bf00      	nop
 8000242:	3720      	adds	r7, #32
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	40006400 	.word	0x40006400
 800024c:	40021000 	.word	0x40021000
 8000250:	40010800 	.word	0x40010800

08000254 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000254:	b480      	push	{r7}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800025a:	4b0e      	ldr	r3, [pc, #56]	; (8000294 <MX_GPIO_Init+0x40>)
 800025c:	699b      	ldr	r3, [r3, #24]
 800025e:	4a0d      	ldr	r2, [pc, #52]	; (8000294 <MX_GPIO_Init+0x40>)
 8000260:	f043 0320 	orr.w	r3, r3, #32
 8000264:	6193      	str	r3, [r2, #24]
 8000266:	4b0b      	ldr	r3, [pc, #44]	; (8000294 <MX_GPIO_Init+0x40>)
 8000268:	699b      	ldr	r3, [r3, #24]
 800026a:	f003 0320 	and.w	r3, r3, #32
 800026e:	607b      	str	r3, [r7, #4]
 8000270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000272:	4b08      	ldr	r3, [pc, #32]	; (8000294 <MX_GPIO_Init+0x40>)
 8000274:	699b      	ldr	r3, [r3, #24]
 8000276:	4a07      	ldr	r2, [pc, #28]	; (8000294 <MX_GPIO_Init+0x40>)
 8000278:	f043 0304 	orr.w	r3, r3, #4
 800027c:	6193      	str	r3, [r2, #24]
 800027e:	4b05      	ldr	r3, [pc, #20]	; (8000294 <MX_GPIO_Init+0x40>)
 8000280:	699b      	ldr	r3, [r3, #24]
 8000282:	f003 0304 	and.w	r3, r3, #4
 8000286:	603b      	str	r3, [r7, #0]
 8000288:	683b      	ldr	r3, [r7, #0]

}
 800028a:	bf00      	nop
 800028c:	370c      	adds	r7, #12
 800028e:	46bd      	mov	sp, r7
 8000290:	bc80      	pop	{r7}
 8000292:	4770      	bx	lr
 8000294:	40021000 	.word	0x40021000

08000298 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b0ba      	sub	sp, #232	; 0xe8
 800029c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800029e:	f000 fb25 	bl	80008ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002a2:	f000 f91f 	bl	80004e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a6:	f7ff ffd5 	bl	8000254 <MX_GPIO_Init>
  MX_CAN_Init();
 80002aa:	f7ff ff4f 	bl	800014c <MX_CAN_Init>
  MX_USART2_UART_Init();
 80002ae:	f000 fa83 	bl	80007b8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  CAN_Config_filtering();
 80002b2:	f002 f87d 	bl	80023b0 <CAN_Config_filtering>
  HAL_CAN_Start(&hcan);
 80002b6:	4884      	ldr	r0, [pc, #528]	; (80004c8 <main+0x230>)
 80002b8:	f000 fd3e 	bl	8000d38 <HAL_CAN_Start>
//  uint8_t Positive_WriteResponse[1];
//  uint8_t Negative_WriteResponse[3];
//
//SEND
  RequestSeedTypedef ReSeed;
  Tester_SendRquestSeedInit(&ReSeed);
 80002bc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80002c0:	4618      	mov	r0, r3
 80002c2:	f001 ff16 	bl	80020f2 <Tester_SendRquestSeedInit>
  uint8_t RequestSeed[2]={0};
 80002c6:	2300      	movs	r3, #0
 80002c8:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
  RequestSeed[0]=ReSeed.Security_SID;
 80002cc:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 80002d0:	f887 30c4 	strb.w	r3, [r7, #196]	; 0xc4
  RequestSeed[1]=ReSeed.Security_Level;
 80002d4:	f897 30c9 	ldrb.w	r3, [r7, #201]	; 0xc9
 80002d8:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
  Seedtypedef SendSeed;
  Keytypedef SendKey;
//REC
  ResponseSEEDtypedef Seed;
  ResponseSeedInit(&Seed);
 80002dc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80002e0:	4618      	mov	r0, r3
 80002e2:	f001 fed9 	bl	8002098 <ResponseSeedInit>
  Seed.Seed_0 =getRandomNumber(0,4294967295);
 80002e6:	f04f 32ff 	mov.w	r2, #4294967295
 80002ea:	f04f 0300 	mov.w	r3, #0
 80002ee:	2000      	movs	r0, #0
 80002f0:	f001 feae 	bl	8002050 <getRandomNumber>
 80002f4:	4603      	mov	r3, r0
 80002f6:	b2db      	uxtb	r3, r3
 80002f8:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
  Seed.Seed_1 =getRandomNumber(0,4294967295);
 80002fc:	f04f 32ff 	mov.w	r2, #4294967295
 8000300:	f04f 0300 	mov.w	r3, #0
 8000304:	2000      	movs	r0, #0
 8000306:	f001 fea3 	bl	8002050 <getRandomNumber>
 800030a:	4603      	mov	r3, r0
 800030c:	b2db      	uxtb	r3, r3
 800030e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  Seed.Seed_2 =getRandomNumber(0,4294967295);
 8000312:	f04f 32ff 	mov.w	r2, #4294967295
 8000316:	f04f 0300 	mov.w	r3, #0
 800031a:	2000      	movs	r0, #0
 800031c:	f001 fe98 	bl	8002050 <getRandomNumber>
 8000320:	4603      	mov	r3, r0
 8000322:	b2db      	uxtb	r3, r3
 8000324:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
  Seed.Seed_3 =getRandomNumber(0,4294967295);
 8000328:	f04f 32ff 	mov.w	r2, #4294967295
 800032c:	f04f 0300 	mov.w	r3, #0
 8000330:	2000      	movs	r0, #0
 8000332:	f001 fe8d 	bl	8002050 <getRandomNumber>
 8000336:	4603      	mov	r3, r0
 8000338:	b2db      	uxtb	r3, r3
 800033a:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
  uint8_t ECU_ResponseSeed[6]={0};
 800033e:	2300      	movs	r3, #0
 8000340:	667b      	str	r3, [r7, #100]	; 0x64
 8000342:	2300      	movs	r3, #0
 8000344:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
  ECU_ResponseSeed[0]=Seed.ResponseID;
 8000348:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800034c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  ECU_ResponseSeed[1]=Seed.SecurityLevel;
 8000350:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8000354:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  ECU_ResponseSeed[2]=Seed.Seed_0;
 8000358:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800035c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  ECU_ResponseSeed[3]=Seed.Seed_1;
 8000360:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000364:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ECU_ResponseSeed[4]=Seed.Seed_2;
 8000368:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800036c:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
  ECU_ResponseSeed[5]=Seed.Seed_3;
 8000370:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8000374:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
//
  uint8_t rcData[8]={0};
 8000378:	2300      	movs	r3, #0
 800037a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800037c:	2300      	movs	r3, #0
 800037e:	663b      	str	r3, [r7, #96]	; 0x60
  uint8_t size=0;
 8000380:	2300      	movs	r3, #0
 8000382:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t ID=0;
 8000386:	2300      	movs	r3, #0
 8000388:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  char msg[50];

  static IsoTpLink g_link;
  static uint8_t g_isotpRecvBuf[50];
  static uint8_t g_isotpSendBuf[50];
  uint8_t SESendKey[18]={0};
 800038c:	2300      	movs	r3, #0
 800038e:	617b      	str	r3, [r7, #20]
 8000390:	f107 0318 	add.w	r3, r7, #24
 8000394:	2200      	movs	r2, #0
 8000396:	601a      	str	r2, [r3, #0]
 8000398:	605a      	str	r2, [r3, #4]
 800039a:	609a      	str	r2, [r3, #8]
 800039c:	819a      	strh	r2, [r3, #12]
  isotp_init_link(&g_link, RESPONSE ,g_isotpSendBuf, sizeof(g_isotpSendBuf), g_isotpRecvBuf, sizeof(g_isotpRecvBuf));
 800039e:	2332      	movs	r3, #50	; 0x32
 80003a0:	9301      	str	r3, [sp, #4]
 80003a2:	4b4a      	ldr	r3, [pc, #296]	; (80004cc <main+0x234>)
 80003a4:	9300      	str	r3, [sp, #0]
 80003a6:	2332      	movs	r3, #50	; 0x32
 80003a8:	4a49      	ldr	r2, [pc, #292]	; (80004d0 <main+0x238>)
 80003aa:	f240 71a2 	movw	r1, #1954	; 0x7a2
 80003ae:	4849      	ldr	r0, [pc, #292]	; (80004d4 <main+0x23c>)
 80003b0:	f002 f8b2 	bl	8002518 <isotp_init_link>
//
  uint8_t FIRequest=0;
 80003b4:	2300      	movs	r3, #0
 80003b6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint16_t sizebuf=18;
 80003ba:	2312      	movs	r3, #18
 80003bc:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
  uint8_t RquestOK=0;
 80003c0:	2300      	movs	r3, #0
 80003c2:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
  uint8_t ReponseOK=0;
 80003c6:	2300      	movs	r3, #0
 80003c8:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
  uint8_t SendKeyOK=0;
 80003cc:	2300      	movs	r3, #0
 80003ce:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
  //
  NegativeResponsetypedef NegReponse;
  NegativeResponseInit(&NegReponse);
 80003d2:	f107 0310 	add.w	r3, r7, #16
 80003d6:	4618      	mov	r0, r3
 80003d8:	f001 fe79 	bl	80020ce <NegativeResponseInit>
  uint8_t NegReponseSE[3]={0};
 80003dc:	4b3e      	ldr	r3, [pc, #248]	; (80004d8 <main+0x240>)
 80003de:	881b      	ldrh	r3, [r3, #0]
 80003e0:	81bb      	strh	r3, [r7, #12]
 80003e2:	2300      	movs	r3, #0
 80003e4:	73bb      	strb	r3, [r7, #14]
  NegReponseSE[0]=NegReponse.NegativeResponse;
 80003e6:	7c3b      	ldrb	r3, [r7, #16]
 80003e8:	733b      	strb	r3, [r7, #12]
  NegReponseSE[1]=NegReponse.NegativeResponse;
 80003ea:	7c3b      	ldrb	r3, [r7, #16]
 80003ec:	737b      	strb	r3, [r7, #13]

    /* USER CODE BEGIN 3 */
	  /* If receive any interested can message, call isotp_on_can_message to handle message */

////
	  	  	    KeyandSeedCompute(&SendKey, &SendSeed);
 80003ee:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 80003f2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80003f6:	4611      	mov	r1, r2
 80003f8:	4618      	mov	r0, r3
 80003fa:	f001 fe89 	bl	8002110 <KeyandSeedCompute>
	  			SESendKey[0]=SEREQUESTID;
 80003fe:	2327      	movs	r3, #39	; 0x27
 8000400:	753b      	strb	r3, [r7, #20]
	  			SESendKey[1] = SESEEDLEVEL;
 8000402:	2301      	movs	r3, #1
 8000404:	757b      	strb	r3, [r7, #21]
	  			SESendKey[2] = SendKey.Key_0;
 8000406:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000408:	b2db      	uxtb	r3, r3
 800040a:	75bb      	strb	r3, [r7, #22]
	  			SESendKey[3] = SendKey.Key_1;
 800040c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800040e:	b2db      	uxtb	r3, r3
 8000410:	75fb      	strb	r3, [r7, #23]
	  			SESendKey[4] = SendKey.Key_2;
 8000412:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000414:	b2db      	uxtb	r3, r3
 8000416:	763b      	strb	r3, [r7, #24]
	  			SESendKey[5] = SendKey.Key_3;
 8000418:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800041c:	b2db      	uxtb	r3, r3
 800041e:	767b      	strb	r3, [r7, #25]
	  			SESendKey[6] = SendKey.Key_4;
 8000420:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000424:	b2db      	uxtb	r3, r3
 8000426:	76bb      	strb	r3, [r7, #26]
	  			SESendKey[7] = SendKey.Key_5;
 8000428:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800042c:	b2db      	uxtb	r3, r3
 800042e:	76fb      	strb	r3, [r7, #27]
	  			SESendKey[8] = SendKey.Key_6;
 8000430:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000434:	b2db      	uxtb	r3, r3
 8000436:	773b      	strb	r3, [r7, #28]
	  			SESendKey[9] = SendKey.Key_7;
 8000438:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800043c:	b2db      	uxtb	r3, r3
 800043e:	777b      	strb	r3, [r7, #29]
	  			SESendKey[10] = SendKey.Key_8;
 8000440:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000444:	b2db      	uxtb	r3, r3
 8000446:	77bb      	strb	r3, [r7, #30]
	  			SESendKey[11] = SendKey.Key_9;
 8000448:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800044c:	b2db      	uxtb	r3, r3
 800044e:	77fb      	strb	r3, [r7, #31]
	  			SESendKey[12] = SendKey.Key_10;
 8000450:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000454:	b2db      	uxtb	r3, r3
 8000456:	f887 3020 	strb.w	r3, [r7, #32]
	  			SESendKey[13] = SendKey.Key_11;
 800045a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800045e:	b2db      	uxtb	r3, r3
 8000460:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	  			SESendKey[14] = SendKey.Key_12;
 8000464:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000468:	b2db      	uxtb	r3, r3
 800046a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	  			SESendKey[15] = SendKey.Key_13;
 800046e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000472:	b2db      	uxtb	r3, r3
 8000474:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	  			SESendKey[16] = SendKey.Key_14;
 8000478:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800047c:	b2db      	uxtb	r3, r3
 800047e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	  			SESendKey[17] = SendKey.Key_15;
 8000482:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000486:	b2db      	uxtb	r3, r3
 8000488:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	  			uint32_t len = sprintf(msg," ECU REC Key OK \r\n");
 800048c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000490:	4912      	ldr	r1, [pc, #72]	; (80004dc <main+0x244>)
 8000492:	4618      	mov	r0, r3
 8000494:	f002 f9c6 	bl	8002824 <siprintf>
 8000498:	4603      	mov	r3, r0
 800049a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	  			HAL_UART_Transmit(&huart2,(uint8_t*) msg, len, HAL_MAX_DELAY);
 800049e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80004a2:	b29a      	uxth	r2, r3
 80004a4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80004a8:	f04f 33ff 	mov.w	r3, #4294967295
 80004ac:	480c      	ldr	r0, [pc, #48]	; (80004e0 <main+0x248>)
 80004ae:	f001 fc41 	bl	8001d34 <HAL_UART_Transmit>
	  			ret=isotp_send(&g_link, SESendKey, sizeof(SESendKey));
 80004b2:	f107 0314 	add.w	r3, r7, #20
 80004b6:	2212      	movs	r2, #18
 80004b8:	4619      	mov	r1, r3
 80004ba:	4806      	ldr	r0, [pc, #24]	; (80004d4 <main+0x23c>)
 80004bc:	f001 ff9e 	bl	80023fc <isotp_send>
 80004c0:	4603      	mov	r3, r0
 80004c2:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
  {
 80004c6:	e792      	b.n	80003ee <main+0x156>
 80004c8:	20000084 	.word	0x20000084
 80004cc:	20000120 	.word	0x20000120
 80004d0:	200000ec 	.word	0x200000ec
 80004d4:	200000ac 	.word	0x200000ac
 80004d8:	080039e0 	.word	0x080039e0
 80004dc:	080039cc 	.word	0x080039cc
 80004e0:	20000158 	.word	0x20000158

080004e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b090      	sub	sp, #64	; 0x40
 80004e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ea:	f107 0318 	add.w	r3, r7, #24
 80004ee:	2228      	movs	r2, #40	; 0x28
 80004f0:	2100      	movs	r1, #0
 80004f2:	4618      	mov	r0, r3
 80004f4:	f002 f9f9 	bl	80028ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f8:	1d3b      	adds	r3, r7, #4
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
 80004fe:	605a      	str	r2, [r3, #4]
 8000500:	609a      	str	r2, [r3, #8]
 8000502:	60da      	str	r2, [r3, #12]
 8000504:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000506:	2301      	movs	r3, #1
 8000508:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800050a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800050e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000510:	2300      	movs	r3, #0
 8000512:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000514:	2301      	movs	r3, #1
 8000516:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000518:	2302      	movs	r3, #2
 800051a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800051c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000520:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000522:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000526:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000528:	f107 0318 	add.w	r3, r7, #24
 800052c:	4618      	mov	r0, r3
 800052e:	f000 ffa1 	bl	8001474 <HAL_RCC_OscConfig>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000538:	f000 f819 	bl	800056e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800053c:	230f      	movs	r3, #15
 800053e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000540:	2302      	movs	r3, #2
 8000542:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000544:	2300      	movs	r3, #0
 8000546:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000548:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800054c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800054e:	2300      	movs	r3, #0
 8000550:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000552:	1d3b      	adds	r3, r7, #4
 8000554:	2102      	movs	r1, #2
 8000556:	4618      	mov	r0, r3
 8000558:	f001 fa0e 	bl	8001978 <HAL_RCC_ClockConfig>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000562:	f000 f804 	bl	800056e <Error_Handler>
  }
}
 8000566:	bf00      	nop
 8000568:	3740      	adds	r7, #64	; 0x40
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}

0800056e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800056e:	b480      	push	{r7}
 8000570:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000572:	b672      	cpsid	i
}
 8000574:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000576:	e7fe      	b.n	8000576 <Error_Handler+0x8>

08000578 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800057e:	4b15      	ldr	r3, [pc, #84]	; (80005d4 <HAL_MspInit+0x5c>)
 8000580:	699b      	ldr	r3, [r3, #24]
 8000582:	4a14      	ldr	r2, [pc, #80]	; (80005d4 <HAL_MspInit+0x5c>)
 8000584:	f043 0301 	orr.w	r3, r3, #1
 8000588:	6193      	str	r3, [r2, #24]
 800058a:	4b12      	ldr	r3, [pc, #72]	; (80005d4 <HAL_MspInit+0x5c>)
 800058c:	699b      	ldr	r3, [r3, #24]
 800058e:	f003 0301 	and.w	r3, r3, #1
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000596:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <HAL_MspInit+0x5c>)
 8000598:	69db      	ldr	r3, [r3, #28]
 800059a:	4a0e      	ldr	r2, [pc, #56]	; (80005d4 <HAL_MspInit+0x5c>)
 800059c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a0:	61d3      	str	r3, [r2, #28]
 80005a2:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <HAL_MspInit+0x5c>)
 80005a4:	69db      	ldr	r3, [r3, #28]
 80005a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005ae:	4b0a      	ldr	r3, [pc, #40]	; (80005d8 <HAL_MspInit+0x60>)
 80005b0:	685b      	ldr	r3, [r3, #4]
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005ba:	60fb      	str	r3, [r7, #12]
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <HAL_MspInit+0x60>)
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ca:	bf00      	nop
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bc80      	pop	{r7}
 80005d2:	4770      	bx	lr
 80005d4:	40021000 	.word	0x40021000
 80005d8:	40010000 	.word	0x40010000

080005dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005e0:	e7fe      	b.n	80005e0 <NMI_Handler+0x4>

080005e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005e2:	b480      	push	{r7}
 80005e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005e6:	e7fe      	b.n	80005e6 <HardFault_Handler+0x4>

080005e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005ec:	e7fe      	b.n	80005ec <MemManage_Handler+0x4>

080005ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005ee:	b480      	push	{r7}
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005f2:	e7fe      	b.n	80005f2 <BusFault_Handler+0x4>

080005f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005f8:	e7fe      	b.n	80005f8 <UsageFault_Handler+0x4>

080005fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005fa:	b480      	push	{r7}
 80005fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005fe:	bf00      	nop
 8000600:	46bd      	mov	sp, r7
 8000602:	bc80      	pop	{r7}
 8000604:	4770      	bx	lr

08000606 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000606:	b480      	push	{r7}
 8000608:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800060a:	bf00      	nop
 800060c:	46bd      	mov	sp, r7
 800060e:	bc80      	pop	{r7}
 8000610:	4770      	bx	lr

08000612 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000612:	b480      	push	{r7}
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000616:	bf00      	nop
 8000618:	46bd      	mov	sp, r7
 800061a:	bc80      	pop	{r7}
 800061c:	4770      	bx	lr

0800061e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800061e:	b580      	push	{r7, lr}
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000622:	f000 f9a9 	bl	8000978 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}

0800062a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800062a:	b480      	push	{r7}
 800062c:	af00      	add	r7, sp, #0
  return 1;
 800062e:	2301      	movs	r3, #1
}
 8000630:	4618      	mov	r0, r3
 8000632:	46bd      	mov	sp, r7
 8000634:	bc80      	pop	{r7}
 8000636:	4770      	bx	lr

08000638 <_kill>:

int _kill(int pid, int sig)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000642:	f002 f9cd 	bl	80029e0 <__errno>
 8000646:	4603      	mov	r3, r0
 8000648:	2216      	movs	r2, #22
 800064a:	601a      	str	r2, [r3, #0]
  return -1;
 800064c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000650:	4618      	mov	r0, r3
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <_exit>:

void _exit (int status)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000660:	f04f 31ff 	mov.w	r1, #4294967295
 8000664:	6878      	ldr	r0, [r7, #4]
 8000666:	f7ff ffe7 	bl	8000638 <_kill>
  while (1) {}    /* Make sure we hang here */
 800066a:	e7fe      	b.n	800066a <_exit+0x12>

0800066c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af00      	add	r7, sp, #0
 8000672:	60f8      	str	r0, [r7, #12]
 8000674:	60b9      	str	r1, [r7, #8]
 8000676:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000678:	2300      	movs	r3, #0
 800067a:	617b      	str	r3, [r7, #20]
 800067c:	e00a      	b.n	8000694 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800067e:	f3af 8000 	nop.w
 8000682:	4601      	mov	r1, r0
 8000684:	68bb      	ldr	r3, [r7, #8]
 8000686:	1c5a      	adds	r2, r3, #1
 8000688:	60ba      	str	r2, [r7, #8]
 800068a:	b2ca      	uxtb	r2, r1
 800068c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800068e:	697b      	ldr	r3, [r7, #20]
 8000690:	3301      	adds	r3, #1
 8000692:	617b      	str	r3, [r7, #20]
 8000694:	697a      	ldr	r2, [r7, #20]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	429a      	cmp	r2, r3
 800069a:	dbf0      	blt.n	800067e <_read+0x12>
  }

  return len;
 800069c:	687b      	ldr	r3, [r7, #4]
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3718      	adds	r7, #24
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b086      	sub	sp, #24
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	60f8      	str	r0, [r7, #12]
 80006ae:	60b9      	str	r1, [r7, #8]
 80006b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006b2:	2300      	movs	r3, #0
 80006b4:	617b      	str	r3, [r7, #20]
 80006b6:	e009      	b.n	80006cc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	1c5a      	adds	r2, r3, #1
 80006bc:	60ba      	str	r2, [r7, #8]
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	4618      	mov	r0, r3
 80006c2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006c6:	697b      	ldr	r3, [r7, #20]
 80006c8:	3301      	adds	r3, #1
 80006ca:	617b      	str	r3, [r7, #20]
 80006cc:	697a      	ldr	r2, [r7, #20]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	429a      	cmp	r2, r3
 80006d2:	dbf1      	blt.n	80006b8 <_write+0x12>
  }
  return len;
 80006d4:	687b      	ldr	r3, [r7, #4]
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	3718      	adds	r7, #24
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}

080006de <_close>:

int _close(int file)
{
 80006de:	b480      	push	{r7}
 80006e0:	b083      	sub	sp, #12
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80006e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bc80      	pop	{r7}
 80006f2:	4770      	bx	lr

080006f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
 80006fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000704:	605a      	str	r2, [r3, #4]
  return 0;
 8000706:	2300      	movs	r3, #0
}
 8000708:	4618      	mov	r0, r3
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	bc80      	pop	{r7}
 8000710:	4770      	bx	lr

08000712 <_isatty>:

int _isatty(int file)
{
 8000712:	b480      	push	{r7}
 8000714:	b083      	sub	sp, #12
 8000716:	af00      	add	r7, sp, #0
 8000718:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800071a:	2301      	movs	r3, #1
}
 800071c:	4618      	mov	r0, r3
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	bc80      	pop	{r7}
 8000724:	4770      	bx	lr

08000726 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000726:	b480      	push	{r7}
 8000728:	b085      	sub	sp, #20
 800072a:	af00      	add	r7, sp, #0
 800072c:	60f8      	str	r0, [r7, #12]
 800072e:	60b9      	str	r1, [r7, #8]
 8000730:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000732:	2300      	movs	r3, #0
}
 8000734:	4618      	mov	r0, r3
 8000736:	3714      	adds	r7, #20
 8000738:	46bd      	mov	sp, r7
 800073a:	bc80      	pop	{r7}
 800073c:	4770      	bx	lr
	...

08000740 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b086      	sub	sp, #24
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000748:	4a14      	ldr	r2, [pc, #80]	; (800079c <_sbrk+0x5c>)
 800074a:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <_sbrk+0x60>)
 800074c:	1ad3      	subs	r3, r2, r3
 800074e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000754:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <_sbrk+0x64>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d102      	bne.n	8000762 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800075c:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <_sbrk+0x64>)
 800075e:	4a12      	ldr	r2, [pc, #72]	; (80007a8 <_sbrk+0x68>)
 8000760:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000762:	4b10      	ldr	r3, [pc, #64]	; (80007a4 <_sbrk+0x64>)
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	4413      	add	r3, r2
 800076a:	693a      	ldr	r2, [r7, #16]
 800076c:	429a      	cmp	r2, r3
 800076e:	d207      	bcs.n	8000780 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000770:	f002 f936 	bl	80029e0 <__errno>
 8000774:	4603      	mov	r3, r0
 8000776:	220c      	movs	r2, #12
 8000778:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800077a:	f04f 33ff 	mov.w	r3, #4294967295
 800077e:	e009      	b.n	8000794 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000780:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <_sbrk+0x64>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000786:	4b07      	ldr	r3, [pc, #28]	; (80007a4 <_sbrk+0x64>)
 8000788:	681a      	ldr	r2, [r3, #0]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4413      	add	r3, r2
 800078e:	4a05      	ldr	r2, [pc, #20]	; (80007a4 <_sbrk+0x64>)
 8000790:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000792:	68fb      	ldr	r3, [r7, #12]
}
 8000794:	4618      	mov	r0, r3
 8000796:	3718      	adds	r7, #24
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20005000 	.word	0x20005000
 80007a0:	00000400 	.word	0x00000400
 80007a4:	20000154 	.word	0x20000154
 80007a8:	200002f8 	.word	0x200002f8

080007ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bc80      	pop	{r7}
 80007b6:	4770      	bx	lr

080007b8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007bc:	4b11      	ldr	r3, [pc, #68]	; (8000804 <MX_USART2_UART_Init+0x4c>)
 80007be:	4a12      	ldr	r2, [pc, #72]	; (8000808 <MX_USART2_UART_Init+0x50>)
 80007c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007c2:	4b10      	ldr	r3, [pc, #64]	; (8000804 <MX_USART2_UART_Init+0x4c>)
 80007c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <MX_USART2_UART_Init+0x4c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <MX_USART2_UART_Init+0x4c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <MX_USART2_UART_Init+0x4c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007dc:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_USART2_UART_Init+0x4c>)
 80007de:	220c      	movs	r2, #12
 80007e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e2:	4b08      	ldr	r3, [pc, #32]	; (8000804 <MX_USART2_UART_Init+0x4c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_USART2_UART_Init+0x4c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ee:	4805      	ldr	r0, [pc, #20]	; (8000804 <MX_USART2_UART_Init+0x4c>)
 80007f0:	f001 fa50 	bl	8001c94 <HAL_UART_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007fa:	f7ff feb8 	bl	800056e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000158 	.word	0x20000158
 8000808:	40004400 	.word	0x40004400

0800080c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b088      	sub	sp, #32
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000814:	f107 0310 	add.w	r3, r7, #16
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4a1b      	ldr	r2, [pc, #108]	; (8000894 <HAL_UART_MspInit+0x88>)
 8000828:	4293      	cmp	r3, r2
 800082a:	d12f      	bne.n	800088c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800082c:	4b1a      	ldr	r3, [pc, #104]	; (8000898 <HAL_UART_MspInit+0x8c>)
 800082e:	69db      	ldr	r3, [r3, #28]
 8000830:	4a19      	ldr	r2, [pc, #100]	; (8000898 <HAL_UART_MspInit+0x8c>)
 8000832:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000836:	61d3      	str	r3, [r2, #28]
 8000838:	4b17      	ldr	r3, [pc, #92]	; (8000898 <HAL_UART_MspInit+0x8c>)
 800083a:	69db      	ldr	r3, [r3, #28]
 800083c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000844:	4b14      	ldr	r3, [pc, #80]	; (8000898 <HAL_UART_MspInit+0x8c>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	4a13      	ldr	r2, [pc, #76]	; (8000898 <HAL_UART_MspInit+0x8c>)
 800084a:	f043 0304 	orr.w	r3, r3, #4
 800084e:	6193      	str	r3, [r2, #24]
 8000850:	4b11      	ldr	r3, [pc, #68]	; (8000898 <HAL_UART_MspInit+0x8c>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	f003 0304 	and.w	r3, r3, #4
 8000858:	60bb      	str	r3, [r7, #8]
 800085a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800085c:	2304      	movs	r3, #4
 800085e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000860:	2302      	movs	r3, #2
 8000862:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000864:	2303      	movs	r3, #3
 8000866:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000868:	f107 0310 	add.w	r3, r7, #16
 800086c:	4619      	mov	r1, r3
 800086e:	480b      	ldr	r0, [pc, #44]	; (800089c <HAL_UART_MspInit+0x90>)
 8000870:	f000 fc7c 	bl	800116c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000874:	2308      	movs	r3, #8
 8000876:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000880:	f107 0310 	add.w	r3, r7, #16
 8000884:	4619      	mov	r1, r3
 8000886:	4805      	ldr	r0, [pc, #20]	; (800089c <HAL_UART_MspInit+0x90>)
 8000888:	f000 fc70 	bl	800116c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800088c:	bf00      	nop
 800088e:	3720      	adds	r7, #32
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40004400 	.word	0x40004400
 8000898:	40021000 	.word	0x40021000
 800089c:	40010800 	.word	0x40010800

080008a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008a0:	f7ff ff84 	bl	80007ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008a4:	480b      	ldr	r0, [pc, #44]	; (80008d4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008a6:	490c      	ldr	r1, [pc, #48]	; (80008d8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008a8:	4a0c      	ldr	r2, [pc, #48]	; (80008dc <LoopFillZerobss+0x16>)
  movs r3, #0
 80008aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008ac:	e002      	b.n	80008b4 <LoopCopyDataInit>

080008ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008b2:	3304      	adds	r3, #4

080008b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b8:	d3f9      	bcc.n	80008ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ba:	4a09      	ldr	r2, [pc, #36]	; (80008e0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80008bc:	4c09      	ldr	r4, [pc, #36]	; (80008e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c0:	e001      	b.n	80008c6 <LoopFillZerobss>

080008c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c4:	3204      	adds	r2, #4

080008c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c8:	d3fb      	bcc.n	80008c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008ca:	f002 f88f 	bl	80029ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008ce:	f7ff fce3 	bl	8000298 <main>
  bx lr
 80008d2:	4770      	bx	lr
  ldr r0, =_sdata
 80008d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008d8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80008dc:	08003d20 	.word	0x08003d20
  ldr r2, =_sbss
 80008e0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80008e4:	200002f4 	.word	0x200002f4

080008e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008e8:	e7fe      	b.n	80008e8 <ADC1_2_IRQHandler>
	...

080008ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008f0:	4b08      	ldr	r3, [pc, #32]	; (8000914 <HAL_Init+0x28>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a07      	ldr	r2, [pc, #28]	; (8000914 <HAL_Init+0x28>)
 80008f6:	f043 0310 	orr.w	r3, r3, #16
 80008fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008fc:	2003      	movs	r0, #3
 80008fe:	f000 fc01 	bl	8001104 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000902:	200f      	movs	r0, #15
 8000904:	f000 f808 	bl	8000918 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000908:	f7ff fe36 	bl	8000578 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800090c:	2300      	movs	r3, #0
}
 800090e:	4618      	mov	r0, r3
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40022000 	.word	0x40022000

08000918 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000920:	4b12      	ldr	r3, [pc, #72]	; (800096c <HAL_InitTick+0x54>)
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	4b12      	ldr	r3, [pc, #72]	; (8000970 <HAL_InitTick+0x58>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	4619      	mov	r1, r3
 800092a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800092e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000932:	fbb2 f3f3 	udiv	r3, r2, r3
 8000936:	4618      	mov	r0, r3
 8000938:	f000 fc0b 	bl	8001152 <HAL_SYSTICK_Config>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000942:	2301      	movs	r3, #1
 8000944:	e00e      	b.n	8000964 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2b0f      	cmp	r3, #15
 800094a:	d80a      	bhi.n	8000962 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800094c:	2200      	movs	r2, #0
 800094e:	6879      	ldr	r1, [r7, #4]
 8000950:	f04f 30ff 	mov.w	r0, #4294967295
 8000954:	f000 fbe1 	bl	800111a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000958:	4a06      	ldr	r2, [pc, #24]	; (8000974 <HAL_InitTick+0x5c>)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800095e:	2300      	movs	r3, #0
 8000960:	e000      	b.n	8000964 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000962:	2301      	movs	r3, #1
}
 8000964:	4618      	mov	r0, r3
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000000 	.word	0x20000000
 8000970:	20000008 	.word	0x20000008
 8000974:	20000004 	.word	0x20000004

08000978 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800097c:	4b05      	ldr	r3, [pc, #20]	; (8000994 <HAL_IncTick+0x1c>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	461a      	mov	r2, r3
 8000982:	4b05      	ldr	r3, [pc, #20]	; (8000998 <HAL_IncTick+0x20>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4413      	add	r3, r2
 8000988:	4a03      	ldr	r2, [pc, #12]	; (8000998 <HAL_IncTick+0x20>)
 800098a:	6013      	str	r3, [r2, #0]
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr
 8000994:	20000008 	.word	0x20000008
 8000998:	200001a0 	.word	0x200001a0

0800099c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  return uwTick;
 80009a0:	4b02      	ldr	r3, [pc, #8]	; (80009ac <HAL_GetTick+0x10>)
 80009a2:	681b      	ldr	r3, [r3, #0]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc80      	pop	{r7}
 80009aa:	4770      	bx	lr
 80009ac:	200001a0 	.word	0x200001a0

080009b0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d101      	bne.n	80009c2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80009be:	2301      	movs	r3, #1
 80009c0:	e0ed      	b.n	8000b9e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d102      	bne.n	80009d4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80009ce:	6878      	ldr	r0, [r7, #4]
 80009d0:	f7ff fbf4 	bl	80001bc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f042 0201 	orr.w	r2, r2, #1
 80009e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80009e4:	f7ff ffda 	bl	800099c <HAL_GetTick>
 80009e8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80009ea:	e012      	b.n	8000a12 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80009ec:	f7ff ffd6 	bl	800099c <HAL_GetTick>
 80009f0:	4602      	mov	r2, r0
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	1ad3      	subs	r3, r2, r3
 80009f6:	2b0a      	cmp	r3, #10
 80009f8:	d90b      	bls.n	8000a12 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2205      	movs	r2, #5
 8000a0a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e0c5      	b.n	8000b9e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	f003 0301 	and.w	r3, r3, #1
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d0e5      	beq.n	80009ec <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f022 0202 	bic.w	r2, r2, #2
 8000a2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a30:	f7ff ffb4 	bl	800099c <HAL_GetTick>
 8000a34:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a36:	e012      	b.n	8000a5e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a38:	f7ff ffb0 	bl	800099c <HAL_GetTick>
 8000a3c:	4602      	mov	r2, r0
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	1ad3      	subs	r3, r2, r3
 8000a42:	2b0a      	cmp	r3, #10
 8000a44:	d90b      	bls.n	8000a5e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a4a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2205      	movs	r2, #5
 8000a56:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e09f      	b.n	8000b9e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	f003 0302 	and.w	r3, r3, #2
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d1e5      	bne.n	8000a38 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	7e1b      	ldrb	r3, [r3, #24]
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d108      	bne.n	8000a86 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	e007      	b.n	8000a96 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000a94:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	7e5b      	ldrb	r3, [r3, #25]
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d108      	bne.n	8000ab0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	e007      	b.n	8000ac0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000abe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	7e9b      	ldrb	r3, [r3, #26]
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d108      	bne.n	8000ada <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f042 0220 	orr.w	r2, r2, #32
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	e007      	b.n	8000aea <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f022 0220 	bic.w	r2, r2, #32
 8000ae8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	7edb      	ldrb	r3, [r3, #27]
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d108      	bne.n	8000b04 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f022 0210 	bic.w	r2, r2, #16
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	e007      	b.n	8000b14 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f042 0210 	orr.w	r2, r2, #16
 8000b12:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	7f1b      	ldrb	r3, [r3, #28]
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d108      	bne.n	8000b2e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f042 0208 	orr.w	r2, r2, #8
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	e007      	b.n	8000b3e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f022 0208 	bic.w	r2, r2, #8
 8000b3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	7f5b      	ldrb	r3, [r3, #29]
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d108      	bne.n	8000b58 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f042 0204 	orr.w	r2, r2, #4
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	e007      	b.n	8000b68 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f022 0204 	bic.w	r2, r2, #4
 8000b66:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	689a      	ldr	r2, [r3, #8]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	431a      	orrs	r2, r3
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	691b      	ldr	r3, [r3, #16]
 8000b76:	431a      	orrs	r2, r3
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	695b      	ldr	r3, [r3, #20]
 8000b7c:	ea42 0103 	orr.w	r1, r2, r3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	1e5a      	subs	r2, r3, #1
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	430a      	orrs	r2, r1
 8000b8c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2200      	movs	r2, #0
 8000b92:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2201      	movs	r2, #1
 8000b98:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000b9c:	2300      	movs	r3, #0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3710      	adds	r7, #16
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	b087      	sub	sp, #28
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
 8000bae:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bbc:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000bbe:	7cfb      	ldrb	r3, [r7, #19]
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d003      	beq.n	8000bcc <HAL_CAN_ConfigFilter+0x26>
 8000bc4:	7cfb      	ldrb	r3, [r7, #19]
 8000bc6:	2b02      	cmp	r3, #2
 8000bc8:	f040 80aa 	bne.w	8000d20 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000bd2:	f043 0201 	orr.w	r2, r3, #1
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	695b      	ldr	r3, [r3, #20]
 8000be0:	f003 031f 	and.w	r3, r3, #31
 8000be4:	2201      	movs	r2, #1
 8000be6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bea:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	43db      	mvns	r3, r3
 8000bf6:	401a      	ands	r2, r3
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	69db      	ldr	r3, [r3, #28]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d123      	bne.n	8000c4e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	43db      	mvns	r3, r3
 8000c10:	401a      	ands	r2, r3
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c24:	683a      	ldr	r2, [r7, #0]
 8000c26:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000c28:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	3248      	adds	r2, #72	; 0x48
 8000c2e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c42:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c44:	6979      	ldr	r1, [r7, #20]
 8000c46:	3348      	adds	r3, #72	; 0x48
 8000c48:	00db      	lsls	r3, r3, #3
 8000c4a:	440b      	add	r3, r1
 8000c4c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	69db      	ldr	r3, [r3, #28]
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d122      	bne.n	8000c9c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	431a      	orrs	r2, r3
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c72:	683a      	ldr	r2, [r7, #0]
 8000c74:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000c76:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	3248      	adds	r2, #72	; 0x48
 8000c7c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	689b      	ldr	r3, [r3, #8]
 8000c84:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	68db      	ldr	r3, [r3, #12]
 8000c8a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c90:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c92:	6979      	ldr	r1, [r7, #20]
 8000c94:	3348      	adds	r3, #72	; 0x48
 8000c96:	00db      	lsls	r3, r3, #3
 8000c98:	440b      	add	r3, r1
 8000c9a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d109      	bne.n	8000cb8 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	43db      	mvns	r3, r3
 8000cae:	401a      	ands	r2, r3
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000cb6:	e007      	b.n	8000cc8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	431a      	orrs	r2, r3
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	691b      	ldr	r3, [r3, #16]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d109      	bne.n	8000ce4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	401a      	ands	r2, r3
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000ce2:	e007      	b.n	8000cf4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	431a      	orrs	r2, r3
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	6a1b      	ldr	r3, [r3, #32]
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d107      	bne.n	8000d0c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	431a      	orrs	r2, r3
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000d12:	f023 0201 	bic.w	r2, r3, #1
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	e006      	b.n	8000d2e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d24:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d2c:	2301      	movs	r3, #1
  }
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	371c      	adds	r7, #28
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr

08000d38 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d12e      	bne.n	8000daa <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2202      	movs	r2, #2
 8000d50:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f022 0201 	bic.w	r2, r2, #1
 8000d62:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000d64:	f7ff fe1a 	bl	800099c <HAL_GetTick>
 8000d68:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000d6a:	e012      	b.n	8000d92 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d6c:	f7ff fe16 	bl	800099c <HAL_GetTick>
 8000d70:	4602      	mov	r2, r0
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b0a      	cmp	r3, #10
 8000d78:	d90b      	bls.n	8000d92 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d7e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2205      	movs	r2, #5
 8000d8a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e012      	b.n	8000db8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f003 0301 	and.w	r3, r3, #1
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d1e5      	bne.n	8000d6c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2200      	movs	r2, #0
 8000da4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000da6:	2300      	movs	r3, #0
 8000da8:	e006      	b.n	8000db8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dae:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
  }
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3710      	adds	r7, #16
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b089      	sub	sp, #36	; 0x24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
 8000dcc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dd4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000dde:	7ffb      	ldrb	r3, [r7, #31]
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d003      	beq.n	8000dec <HAL_CAN_AddTxMessage+0x2c>
 8000de4:	7ffb      	ldrb	r3, [r7, #31]
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	f040 80ad 	bne.w	8000f46 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d10a      	bne.n	8000e0c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000df6:	69bb      	ldr	r3, [r7, #24]
 8000df8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d105      	bne.n	8000e0c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	f000 8095 	beq.w	8000f36 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	0e1b      	lsrs	r3, r3, #24
 8000e10:	f003 0303 	and.w	r3, r3, #3
 8000e14:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000e16:	2201      	movs	r2, #1
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	409a      	lsls	r2, r3
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d10d      	bne.n	8000e44 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000e32:	68f9      	ldr	r1, [r7, #12]
 8000e34:	6809      	ldr	r1, [r1, #0]
 8000e36:	431a      	orrs	r2, r3
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	3318      	adds	r3, #24
 8000e3c:	011b      	lsls	r3, r3, #4
 8000e3e:	440b      	add	r3, r1
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	e00f      	b.n	8000e64 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e4e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e54:	68f9      	ldr	r1, [r7, #12]
 8000e56:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000e58:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	3318      	adds	r3, #24
 8000e5e:	011b      	lsls	r3, r3, #4
 8000e60:	440b      	add	r3, r1
 8000e62:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	6819      	ldr	r1, [r3, #0]
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	691a      	ldr	r2, [r3, #16]
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	3318      	adds	r3, #24
 8000e70:	011b      	lsls	r3, r3, #4
 8000e72:	440b      	add	r3, r1
 8000e74:	3304      	adds	r3, #4
 8000e76:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	7d1b      	ldrb	r3, [r3, #20]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d111      	bne.n	8000ea4 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	3318      	adds	r3, #24
 8000e88:	011b      	lsls	r3, r3, #4
 8000e8a:	4413      	add	r3, r2
 8000e8c:	3304      	adds	r3, #4
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	68fa      	ldr	r2, [r7, #12]
 8000e92:	6811      	ldr	r1, [r2, #0]
 8000e94:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	3318      	adds	r3, #24
 8000e9c:	011b      	lsls	r3, r3, #4
 8000e9e:	440b      	add	r3, r1
 8000ea0:	3304      	adds	r3, #4
 8000ea2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3307      	adds	r3, #7
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	061a      	lsls	r2, r3, #24
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3306      	adds	r3, #6
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	041b      	lsls	r3, r3, #16
 8000eb4:	431a      	orrs	r2, r3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	3305      	adds	r3, #5
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	021b      	lsls	r3, r3, #8
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	3204      	adds	r2, #4
 8000ec4:	7812      	ldrb	r2, [r2, #0]
 8000ec6:	4610      	mov	r0, r2
 8000ec8:	68fa      	ldr	r2, [r7, #12]
 8000eca:	6811      	ldr	r1, [r2, #0]
 8000ecc:	ea43 0200 	orr.w	r2, r3, r0
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	011b      	lsls	r3, r3, #4
 8000ed4:	440b      	add	r3, r1
 8000ed6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000eda:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3303      	adds	r3, #3
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	061a      	lsls	r2, r3, #24
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3302      	adds	r3, #2
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	041b      	lsls	r3, r3, #16
 8000eec:	431a      	orrs	r2, r3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	021b      	lsls	r3, r3, #8
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	7812      	ldrb	r2, [r2, #0]
 8000efc:	4610      	mov	r0, r2
 8000efe:	68fa      	ldr	r2, [r7, #12]
 8000f00:	6811      	ldr	r1, [r2, #0]
 8000f02:	ea43 0200 	orr.w	r2, r3, r0
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	011b      	lsls	r3, r3, #4
 8000f0a:	440b      	add	r3, r1
 8000f0c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000f10:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	3318      	adds	r3, #24
 8000f1a:	011b      	lsls	r3, r3, #4
 8000f1c:	4413      	add	r3, r2
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	68fa      	ldr	r2, [r7, #12]
 8000f22:	6811      	ldr	r1, [r2, #0]
 8000f24:	f043 0201 	orr.w	r2, r3, #1
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	3318      	adds	r3, #24
 8000f2c:	011b      	lsls	r3, r3, #4
 8000f2e:	440b      	add	r3, r1
 8000f30:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000f32:	2300      	movs	r3, #0
 8000f34:	e00e      	b.n	8000f54 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f3a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e006      	b.n	8000f54 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f4a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
  }
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3724      	adds	r7, #36	; 0x24
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bc80      	pop	{r7}
 8000f5c:	4770      	bx	lr

08000f5e <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	b085      	sub	sp, #20
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
 8000f66:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f72:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f74:	7afb      	ldrb	r3, [r7, #11]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d002      	beq.n	8000f80 <HAL_CAN_IsTxMessagePending+0x22>
 8000f7a:	7afb      	ldrb	r3, [r7, #11]
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	d10b      	bne.n	8000f98 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	689a      	ldr	r2, [r3, #8]
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	069b      	lsls	r3, r3, #26
 8000f8a:	401a      	ands	r2, r3
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	069b      	lsls	r3, r3, #26
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d001      	beq.n	8000f98 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8000f94:	2301      	movs	r3, #1
 8000f96:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8000f98:	68fb      	ldr	r3, [r7, #12]
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3714      	adds	r7, #20
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr

08000fa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fd6:	4a04      	ldr	r2, [pc, #16]	; (8000fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	60d3      	str	r3, [r2, #12]
}
 8000fdc:	bf00      	nop
 8000fde:	3714      	adds	r7, #20
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bc80      	pop	{r7}
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff0:	4b04      	ldr	r3, [pc, #16]	; (8001004 <__NVIC_GetPriorityGrouping+0x18>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	0a1b      	lsrs	r3, r3, #8
 8000ff6:	f003 0307 	and.w	r3, r3, #7
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bc80      	pop	{r7}
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	6039      	str	r1, [r7, #0]
 8001012:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001018:	2b00      	cmp	r3, #0
 800101a:	db0a      	blt.n	8001032 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	b2da      	uxtb	r2, r3
 8001020:	490c      	ldr	r1, [pc, #48]	; (8001054 <__NVIC_SetPriority+0x4c>)
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	0112      	lsls	r2, r2, #4
 8001028:	b2d2      	uxtb	r2, r2
 800102a:	440b      	add	r3, r1
 800102c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001030:	e00a      	b.n	8001048 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	b2da      	uxtb	r2, r3
 8001036:	4908      	ldr	r1, [pc, #32]	; (8001058 <__NVIC_SetPriority+0x50>)
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	f003 030f 	and.w	r3, r3, #15
 800103e:	3b04      	subs	r3, #4
 8001040:	0112      	lsls	r2, r2, #4
 8001042:	b2d2      	uxtb	r2, r2
 8001044:	440b      	add	r3, r1
 8001046:	761a      	strb	r2, [r3, #24]
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	e000e100 	.word	0xe000e100
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800105c:	b480      	push	{r7}
 800105e:	b089      	sub	sp, #36	; 0x24
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	f1c3 0307 	rsb	r3, r3, #7
 8001076:	2b04      	cmp	r3, #4
 8001078:	bf28      	it	cs
 800107a:	2304      	movcs	r3, #4
 800107c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3304      	adds	r3, #4
 8001082:	2b06      	cmp	r3, #6
 8001084:	d902      	bls.n	800108c <NVIC_EncodePriority+0x30>
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	3b03      	subs	r3, #3
 800108a:	e000      	b.n	800108e <NVIC_EncodePriority+0x32>
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001090:	f04f 32ff 	mov.w	r2, #4294967295
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43da      	mvns	r2, r3
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	401a      	ands	r2, r3
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a4:	f04f 31ff 	mov.w	r1, #4294967295
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	fa01 f303 	lsl.w	r3, r1, r3
 80010ae:	43d9      	mvns	r1, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b4:	4313      	orrs	r3, r2
         );
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3724      	adds	r7, #36	; 0x24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr

080010c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3b01      	subs	r3, #1
 80010cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010d0:	d301      	bcc.n	80010d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010d2:	2301      	movs	r3, #1
 80010d4:	e00f      	b.n	80010f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010d6:	4a0a      	ldr	r2, [pc, #40]	; (8001100 <SysTick_Config+0x40>)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3b01      	subs	r3, #1
 80010dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010de:	210f      	movs	r1, #15
 80010e0:	f04f 30ff 	mov.w	r0, #4294967295
 80010e4:	f7ff ff90 	bl	8001008 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e8:	4b05      	ldr	r3, [pc, #20]	; (8001100 <SysTick_Config+0x40>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ee:	4b04      	ldr	r3, [pc, #16]	; (8001100 <SysTick_Config+0x40>)
 80010f0:	2207      	movs	r2, #7
 80010f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	e000e010 	.word	0xe000e010

08001104 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff ff49 	bl	8000fa4 <__NVIC_SetPriorityGrouping>
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800111a:	b580      	push	{r7, lr}
 800111c:	b086      	sub	sp, #24
 800111e:	af00      	add	r7, sp, #0
 8001120:	4603      	mov	r3, r0
 8001122:	60b9      	str	r1, [r7, #8]
 8001124:	607a      	str	r2, [r7, #4]
 8001126:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800112c:	f7ff ff5e 	bl	8000fec <__NVIC_GetPriorityGrouping>
 8001130:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	68b9      	ldr	r1, [r7, #8]
 8001136:	6978      	ldr	r0, [r7, #20]
 8001138:	f7ff ff90 	bl	800105c <NVIC_EncodePriority>
 800113c:	4602      	mov	r2, r0
 800113e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001142:	4611      	mov	r1, r2
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff ff5f 	bl	8001008 <__NVIC_SetPriority>
}
 800114a:	bf00      	nop
 800114c:	3718      	adds	r7, #24
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff ffb0 	bl	80010c0 <SysTick_Config>
 8001160:	4603      	mov	r3, r0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800116c:	b480      	push	{r7}
 800116e:	b08b      	sub	sp, #44	; 0x2c
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001176:	2300      	movs	r3, #0
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800117a:	2300      	movs	r3, #0
 800117c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800117e:	e169      	b.n	8001454 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001180:	2201      	movs	r2, #1
 8001182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	69fa      	ldr	r2, [r7, #28]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	429a      	cmp	r2, r3
 800119a:	f040 8158 	bne.w	800144e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	4a9a      	ldr	r2, [pc, #616]	; (800140c <HAL_GPIO_Init+0x2a0>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d05e      	beq.n	8001266 <HAL_GPIO_Init+0xfa>
 80011a8:	4a98      	ldr	r2, [pc, #608]	; (800140c <HAL_GPIO_Init+0x2a0>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d875      	bhi.n	800129a <HAL_GPIO_Init+0x12e>
 80011ae:	4a98      	ldr	r2, [pc, #608]	; (8001410 <HAL_GPIO_Init+0x2a4>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d058      	beq.n	8001266 <HAL_GPIO_Init+0xfa>
 80011b4:	4a96      	ldr	r2, [pc, #600]	; (8001410 <HAL_GPIO_Init+0x2a4>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d86f      	bhi.n	800129a <HAL_GPIO_Init+0x12e>
 80011ba:	4a96      	ldr	r2, [pc, #600]	; (8001414 <HAL_GPIO_Init+0x2a8>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d052      	beq.n	8001266 <HAL_GPIO_Init+0xfa>
 80011c0:	4a94      	ldr	r2, [pc, #592]	; (8001414 <HAL_GPIO_Init+0x2a8>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d869      	bhi.n	800129a <HAL_GPIO_Init+0x12e>
 80011c6:	4a94      	ldr	r2, [pc, #592]	; (8001418 <HAL_GPIO_Init+0x2ac>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d04c      	beq.n	8001266 <HAL_GPIO_Init+0xfa>
 80011cc:	4a92      	ldr	r2, [pc, #584]	; (8001418 <HAL_GPIO_Init+0x2ac>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d863      	bhi.n	800129a <HAL_GPIO_Init+0x12e>
 80011d2:	4a92      	ldr	r2, [pc, #584]	; (800141c <HAL_GPIO_Init+0x2b0>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d046      	beq.n	8001266 <HAL_GPIO_Init+0xfa>
 80011d8:	4a90      	ldr	r2, [pc, #576]	; (800141c <HAL_GPIO_Init+0x2b0>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d85d      	bhi.n	800129a <HAL_GPIO_Init+0x12e>
 80011de:	2b12      	cmp	r3, #18
 80011e0:	d82a      	bhi.n	8001238 <HAL_GPIO_Init+0xcc>
 80011e2:	2b12      	cmp	r3, #18
 80011e4:	d859      	bhi.n	800129a <HAL_GPIO_Init+0x12e>
 80011e6:	a201      	add	r2, pc, #4	; (adr r2, 80011ec <HAL_GPIO_Init+0x80>)
 80011e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ec:	08001267 	.word	0x08001267
 80011f0:	08001241 	.word	0x08001241
 80011f4:	08001253 	.word	0x08001253
 80011f8:	08001295 	.word	0x08001295
 80011fc:	0800129b 	.word	0x0800129b
 8001200:	0800129b 	.word	0x0800129b
 8001204:	0800129b 	.word	0x0800129b
 8001208:	0800129b 	.word	0x0800129b
 800120c:	0800129b 	.word	0x0800129b
 8001210:	0800129b 	.word	0x0800129b
 8001214:	0800129b 	.word	0x0800129b
 8001218:	0800129b 	.word	0x0800129b
 800121c:	0800129b 	.word	0x0800129b
 8001220:	0800129b 	.word	0x0800129b
 8001224:	0800129b 	.word	0x0800129b
 8001228:	0800129b 	.word	0x0800129b
 800122c:	0800129b 	.word	0x0800129b
 8001230:	08001249 	.word	0x08001249
 8001234:	0800125d 	.word	0x0800125d
 8001238:	4a79      	ldr	r2, [pc, #484]	; (8001420 <HAL_GPIO_Init+0x2b4>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d013      	beq.n	8001266 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800123e:	e02c      	b.n	800129a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	623b      	str	r3, [r7, #32]
          break;
 8001246:	e029      	b.n	800129c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	3304      	adds	r3, #4
 800124e:	623b      	str	r3, [r7, #32]
          break;
 8001250:	e024      	b.n	800129c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	3308      	adds	r3, #8
 8001258:	623b      	str	r3, [r7, #32]
          break;
 800125a:	e01f      	b.n	800129c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	330c      	adds	r3, #12
 8001262:	623b      	str	r3, [r7, #32]
          break;
 8001264:	e01a      	b.n	800129c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d102      	bne.n	8001274 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800126e:	2304      	movs	r3, #4
 8001270:	623b      	str	r3, [r7, #32]
          break;
 8001272:	e013      	b.n	800129c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d105      	bne.n	8001288 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800127c:	2308      	movs	r3, #8
 800127e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	69fa      	ldr	r2, [r7, #28]
 8001284:	611a      	str	r2, [r3, #16]
          break;
 8001286:	e009      	b.n	800129c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001288:	2308      	movs	r3, #8
 800128a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	69fa      	ldr	r2, [r7, #28]
 8001290:	615a      	str	r2, [r3, #20]
          break;
 8001292:	e003      	b.n	800129c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001294:	2300      	movs	r3, #0
 8001296:	623b      	str	r3, [r7, #32]
          break;
 8001298:	e000      	b.n	800129c <HAL_GPIO_Init+0x130>
          break;
 800129a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	2bff      	cmp	r3, #255	; 0xff
 80012a0:	d801      	bhi.n	80012a6 <HAL_GPIO_Init+0x13a>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	e001      	b.n	80012aa <HAL_GPIO_Init+0x13e>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	3304      	adds	r3, #4
 80012aa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	2bff      	cmp	r3, #255	; 0xff
 80012b0:	d802      	bhi.n	80012b8 <HAL_GPIO_Init+0x14c>
 80012b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	e002      	b.n	80012be <HAL_GPIO_Init+0x152>
 80012b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ba:	3b08      	subs	r3, #8
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	210f      	movs	r1, #15
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	fa01 f303 	lsl.w	r3, r1, r3
 80012cc:	43db      	mvns	r3, r3
 80012ce:	401a      	ands	r2, r3
 80012d0:	6a39      	ldr	r1, [r7, #32]
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	fa01 f303 	lsl.w	r3, r1, r3
 80012d8:	431a      	orrs	r2, r3
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f000 80b1 	beq.w	800144e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012ec:	4b4d      	ldr	r3, [pc, #308]	; (8001424 <HAL_GPIO_Init+0x2b8>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	4a4c      	ldr	r2, [pc, #304]	; (8001424 <HAL_GPIO_Init+0x2b8>)
 80012f2:	f043 0301 	orr.w	r3, r3, #1
 80012f6:	6193      	str	r3, [r2, #24]
 80012f8:	4b4a      	ldr	r3, [pc, #296]	; (8001424 <HAL_GPIO_Init+0x2b8>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	f003 0301 	and.w	r3, r3, #1
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001304:	4a48      	ldr	r2, [pc, #288]	; (8001428 <HAL_GPIO_Init+0x2bc>)
 8001306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001308:	089b      	lsrs	r3, r3, #2
 800130a:	3302      	adds	r3, #2
 800130c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001310:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001314:	f003 0303 	and.w	r3, r3, #3
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	220f      	movs	r2, #15
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	43db      	mvns	r3, r3
 8001322:	68fa      	ldr	r2, [r7, #12]
 8001324:	4013      	ands	r3, r2
 8001326:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4a40      	ldr	r2, [pc, #256]	; (800142c <HAL_GPIO_Init+0x2c0>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d013      	beq.n	8001358 <HAL_GPIO_Init+0x1ec>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4a3f      	ldr	r2, [pc, #252]	; (8001430 <HAL_GPIO_Init+0x2c4>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d00d      	beq.n	8001354 <HAL_GPIO_Init+0x1e8>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4a3e      	ldr	r2, [pc, #248]	; (8001434 <HAL_GPIO_Init+0x2c8>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d007      	beq.n	8001350 <HAL_GPIO_Init+0x1e4>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4a3d      	ldr	r2, [pc, #244]	; (8001438 <HAL_GPIO_Init+0x2cc>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d101      	bne.n	800134c <HAL_GPIO_Init+0x1e0>
 8001348:	2303      	movs	r3, #3
 800134a:	e006      	b.n	800135a <HAL_GPIO_Init+0x1ee>
 800134c:	2304      	movs	r3, #4
 800134e:	e004      	b.n	800135a <HAL_GPIO_Init+0x1ee>
 8001350:	2302      	movs	r3, #2
 8001352:	e002      	b.n	800135a <HAL_GPIO_Init+0x1ee>
 8001354:	2301      	movs	r3, #1
 8001356:	e000      	b.n	800135a <HAL_GPIO_Init+0x1ee>
 8001358:	2300      	movs	r3, #0
 800135a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800135c:	f002 0203 	and.w	r2, r2, #3
 8001360:	0092      	lsls	r2, r2, #2
 8001362:	4093      	lsls	r3, r2
 8001364:	68fa      	ldr	r2, [r7, #12]
 8001366:	4313      	orrs	r3, r2
 8001368:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800136a:	492f      	ldr	r1, [pc, #188]	; (8001428 <HAL_GPIO_Init+0x2bc>)
 800136c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136e:	089b      	lsrs	r3, r3, #2
 8001370:	3302      	adds	r3, #2
 8001372:	68fa      	ldr	r2, [r7, #12]
 8001374:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d006      	beq.n	8001392 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001384:	4b2d      	ldr	r3, [pc, #180]	; (800143c <HAL_GPIO_Init+0x2d0>)
 8001386:	689a      	ldr	r2, [r3, #8]
 8001388:	492c      	ldr	r1, [pc, #176]	; (800143c <HAL_GPIO_Init+0x2d0>)
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	4313      	orrs	r3, r2
 800138e:	608b      	str	r3, [r1, #8]
 8001390:	e006      	b.n	80013a0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001392:	4b2a      	ldr	r3, [pc, #168]	; (800143c <HAL_GPIO_Init+0x2d0>)
 8001394:	689a      	ldr	r2, [r3, #8]
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	43db      	mvns	r3, r3
 800139a:	4928      	ldr	r1, [pc, #160]	; (800143c <HAL_GPIO_Init+0x2d0>)
 800139c:	4013      	ands	r3, r2
 800139e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d006      	beq.n	80013ba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013ac:	4b23      	ldr	r3, [pc, #140]	; (800143c <HAL_GPIO_Init+0x2d0>)
 80013ae:	68da      	ldr	r2, [r3, #12]
 80013b0:	4922      	ldr	r1, [pc, #136]	; (800143c <HAL_GPIO_Init+0x2d0>)
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	60cb      	str	r3, [r1, #12]
 80013b8:	e006      	b.n	80013c8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013ba:	4b20      	ldr	r3, [pc, #128]	; (800143c <HAL_GPIO_Init+0x2d0>)
 80013bc:	68da      	ldr	r2, [r3, #12]
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	43db      	mvns	r3, r3
 80013c2:	491e      	ldr	r1, [pc, #120]	; (800143c <HAL_GPIO_Init+0x2d0>)
 80013c4:	4013      	ands	r3, r2
 80013c6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d006      	beq.n	80013e2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013d4:	4b19      	ldr	r3, [pc, #100]	; (800143c <HAL_GPIO_Init+0x2d0>)
 80013d6:	685a      	ldr	r2, [r3, #4]
 80013d8:	4918      	ldr	r1, [pc, #96]	; (800143c <HAL_GPIO_Init+0x2d0>)
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	4313      	orrs	r3, r2
 80013de:	604b      	str	r3, [r1, #4]
 80013e0:	e006      	b.n	80013f0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013e2:	4b16      	ldr	r3, [pc, #88]	; (800143c <HAL_GPIO_Init+0x2d0>)
 80013e4:	685a      	ldr	r2, [r3, #4]
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	43db      	mvns	r3, r3
 80013ea:	4914      	ldr	r1, [pc, #80]	; (800143c <HAL_GPIO_Init+0x2d0>)
 80013ec:	4013      	ands	r3, r2
 80013ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d021      	beq.n	8001440 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013fc:	4b0f      	ldr	r3, [pc, #60]	; (800143c <HAL_GPIO_Init+0x2d0>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	490e      	ldr	r1, [pc, #56]	; (800143c <HAL_GPIO_Init+0x2d0>)
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	4313      	orrs	r3, r2
 8001406:	600b      	str	r3, [r1, #0]
 8001408:	e021      	b.n	800144e <HAL_GPIO_Init+0x2e2>
 800140a:	bf00      	nop
 800140c:	10320000 	.word	0x10320000
 8001410:	10310000 	.word	0x10310000
 8001414:	10220000 	.word	0x10220000
 8001418:	10210000 	.word	0x10210000
 800141c:	10120000 	.word	0x10120000
 8001420:	10110000 	.word	0x10110000
 8001424:	40021000 	.word	0x40021000
 8001428:	40010000 	.word	0x40010000
 800142c:	40010800 	.word	0x40010800
 8001430:	40010c00 	.word	0x40010c00
 8001434:	40011000 	.word	0x40011000
 8001438:	40011400 	.word	0x40011400
 800143c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001440:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <HAL_GPIO_Init+0x304>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	43db      	mvns	r3, r3
 8001448:	4909      	ldr	r1, [pc, #36]	; (8001470 <HAL_GPIO_Init+0x304>)
 800144a:	4013      	ands	r3, r2
 800144c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800144e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001450:	3301      	adds	r3, #1
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145a:	fa22 f303 	lsr.w	r3, r2, r3
 800145e:	2b00      	cmp	r3, #0
 8001460:	f47f ae8e 	bne.w	8001180 <HAL_GPIO_Init+0x14>
  }
}
 8001464:	bf00      	nop
 8001466:	bf00      	nop
 8001468:	372c      	adds	r7, #44	; 0x2c
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr
 8001470:	40010400 	.word	0x40010400

08001474 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d101      	bne.n	8001486 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e272      	b.n	800196c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	2b00      	cmp	r3, #0
 8001490:	f000 8087 	beq.w	80015a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001494:	4b92      	ldr	r3, [pc, #584]	; (80016e0 <HAL_RCC_OscConfig+0x26c>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f003 030c 	and.w	r3, r3, #12
 800149c:	2b04      	cmp	r3, #4
 800149e:	d00c      	beq.n	80014ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014a0:	4b8f      	ldr	r3, [pc, #572]	; (80016e0 <HAL_RCC_OscConfig+0x26c>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f003 030c 	and.w	r3, r3, #12
 80014a8:	2b08      	cmp	r3, #8
 80014aa:	d112      	bne.n	80014d2 <HAL_RCC_OscConfig+0x5e>
 80014ac:	4b8c      	ldr	r3, [pc, #560]	; (80016e0 <HAL_RCC_OscConfig+0x26c>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014b8:	d10b      	bne.n	80014d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ba:	4b89      	ldr	r3, [pc, #548]	; (80016e0 <HAL_RCC_OscConfig+0x26c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d06c      	beq.n	80015a0 <HAL_RCC_OscConfig+0x12c>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d168      	bne.n	80015a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e24c      	b.n	800196c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014da:	d106      	bne.n	80014ea <HAL_RCC_OscConfig+0x76>
 80014dc:	4b80      	ldr	r3, [pc, #512]	; (80016e0 <HAL_RCC_OscConfig+0x26c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a7f      	ldr	r2, [pc, #508]	; (80016e0 <HAL_RCC_OscConfig+0x26c>)
 80014e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014e6:	6013      	str	r3, [r2, #0]
 80014e8:	e02e      	b.n	8001548 <HAL_RCC_OscConfig+0xd4>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d10c      	bne.n	800150c <HAL_RCC_OscConfig+0x98>
 80014f2:	4b7b      	ldr	r3, [pc, #492]	; (80016e0 <HAL_RCC_OscConfig+0x26c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a7a      	ldr	r2, [pc, #488]	; (80016e0 <HAL_RCC_OscConfig+0x26c>)
 80014f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014fc:	6013      	str	r3, [r2, #0]
 80014fe:	4b78      	ldr	r3, [pc, #480]	; (80016e0 <HAL_RCC_OscConfig+0x26c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a77      	ldr	r2, [pc, #476]	; (80016e0 <HAL_RCC_OscConfig+0x26c>)
 8001504:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001508:	6013      	str	r3, [r2, #0]
 800150a:	e01d      	b.n	8001548 <HAL_RCC_OscConfig+0xd4>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001514:	d10c      	bne.n	8001530 <HAL_RCC_OscConfig+0xbc>
 8001516:	4b72      	ldr	r3, [pc, #456]	; (80016e0 <HAL_RCC_OscConfig+0x26c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a71      	ldr	r2, [pc, #452]	; (80016e0 <HAL_RCC_OscConfig+0x26c>)
 800151c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001520:	6013      	str	r3, [r2, #0]
 8001522:	4b6f      	ldr	r3, [pc, #444]	; (80016e0 <HAL_RCC_OscConfig+0x26c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a6e      	ldr	r2, [pc, #440]	; (80016e0 <HAL_RCC_OscConfig+0x26c>)
 8001528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800152c:	6013      	str	r3, [r2, #0]
 800152e:	e00b      	b.n	8001548 <HAL_RCC_OscConfig+0xd4>
 8001530:	4b6b      	ldr	r3, [pc, #428]	; (80016e0 <HAL_RCC_OscConfig+0x26c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a6a      	ldr	r2, [pc, #424]	; (80016e0 <HAL_RCC_OscConfig+0x26c>)
 8001536:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800153a:	6013      	str	r3, [r2, #0]
 800153c:	4b68      	ldr	r3, [pc, #416]	; (80016e0 <HAL_RCC_OscConfig+0x26c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a67      	ldr	r2, [pc, #412]	; (80016e0 <HAL_RCC_OscConfig+0x26c>)
 8001542:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001546:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d013      	beq.n	8001578 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001550:	f7ff fa24 	bl	800099c <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001558:	f7ff fa20 	bl	800099c <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b64      	cmp	r3, #100	; 0x64
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e200      	b.n	800196c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800156a:	4b5d      	ldr	r3, [pc, #372]	; (80016e0 <HAL_RCC_OscConfig+0x26c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d0f0      	beq.n	8001558 <HAL_RCC_OscConfig+0xe4>
 8001576:	e014      	b.n	80015a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001578:	f7ff fa10 	bl	800099c <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001580:	f7ff fa0c 	bl	800099c <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b64      	cmp	r3, #100	; 0x64
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e1ec      	b.n	800196c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001592:	4b53      	ldr	r3, [pc, #332]	; (80016e0 <HAL_RCC_OscConfig+0x26c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d1f0      	bne.n	8001580 <HAL_RCC_OscConfig+0x10c>
 800159e:	e000      	b.n	80015a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d063      	beq.n	8001676 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015ae:	4b4c      	ldr	r3, [pc, #304]	; (80016e0 <HAL_RCC_OscConfig+0x26c>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f003 030c 	and.w	r3, r3, #12
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d00b      	beq.n	80015d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015ba:	4b49      	ldr	r3, [pc, #292]	; (80016e0 <HAL_RCC_OscConfig+0x26c>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f003 030c 	and.w	r3, r3, #12
 80015c2:	2b08      	cmp	r3, #8
 80015c4:	d11c      	bne.n	8001600 <HAL_RCC_OscConfig+0x18c>
 80015c6:	4b46      	ldr	r3, [pc, #280]	; (80016e0 <HAL_RCC_OscConfig+0x26c>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d116      	bne.n	8001600 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015d2:	4b43      	ldr	r3, [pc, #268]	; (80016e0 <HAL_RCC_OscConfig+0x26c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d005      	beq.n	80015ea <HAL_RCC_OscConfig+0x176>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	691b      	ldr	r3, [r3, #16]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d001      	beq.n	80015ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e1c0      	b.n	800196c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ea:	4b3d      	ldr	r3, [pc, #244]	; (80016e0 <HAL_RCC_OscConfig+0x26c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	695b      	ldr	r3, [r3, #20]
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	4939      	ldr	r1, [pc, #228]	; (80016e0 <HAL_RCC_OscConfig+0x26c>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015fe:	e03a      	b.n	8001676 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	691b      	ldr	r3, [r3, #16]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d020      	beq.n	800164a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001608:	4b36      	ldr	r3, [pc, #216]	; (80016e4 <HAL_RCC_OscConfig+0x270>)
 800160a:	2201      	movs	r2, #1
 800160c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160e:	f7ff f9c5 	bl	800099c <HAL_GetTick>
 8001612:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001614:	e008      	b.n	8001628 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001616:	f7ff f9c1 	bl	800099c <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e1a1      	b.n	800196c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001628:	4b2d      	ldr	r3, [pc, #180]	; (80016e0 <HAL_RCC_OscConfig+0x26c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d0f0      	beq.n	8001616 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001634:	4b2a      	ldr	r3, [pc, #168]	; (80016e0 <HAL_RCC_OscConfig+0x26c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	695b      	ldr	r3, [r3, #20]
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	4927      	ldr	r1, [pc, #156]	; (80016e0 <HAL_RCC_OscConfig+0x26c>)
 8001644:	4313      	orrs	r3, r2
 8001646:	600b      	str	r3, [r1, #0]
 8001648:	e015      	b.n	8001676 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800164a:	4b26      	ldr	r3, [pc, #152]	; (80016e4 <HAL_RCC_OscConfig+0x270>)
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001650:	f7ff f9a4 	bl	800099c <HAL_GetTick>
 8001654:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001656:	e008      	b.n	800166a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001658:	f7ff f9a0 	bl	800099c <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b02      	cmp	r3, #2
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e180      	b.n	800196c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800166a:	4b1d      	ldr	r3, [pc, #116]	; (80016e0 <HAL_RCC_OscConfig+0x26c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1f0      	bne.n	8001658 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0308 	and.w	r3, r3, #8
 800167e:	2b00      	cmp	r3, #0
 8001680:	d03a      	beq.n	80016f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d019      	beq.n	80016be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800168a:	4b17      	ldr	r3, [pc, #92]	; (80016e8 <HAL_RCC_OscConfig+0x274>)
 800168c:	2201      	movs	r2, #1
 800168e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001690:	f7ff f984 	bl	800099c <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001698:	f7ff f980 	bl	800099c <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e160      	b.n	800196c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016aa:	4b0d      	ldr	r3, [pc, #52]	; (80016e0 <HAL_RCC_OscConfig+0x26c>)
 80016ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d0f0      	beq.n	8001698 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80016b6:	2001      	movs	r0, #1
 80016b8:	f000 face 	bl	8001c58 <RCC_Delay>
 80016bc:	e01c      	b.n	80016f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016be:	4b0a      	ldr	r3, [pc, #40]	; (80016e8 <HAL_RCC_OscConfig+0x274>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c4:	f7ff f96a 	bl	800099c <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016ca:	e00f      	b.n	80016ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016cc:	f7ff f966 	bl	800099c <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d908      	bls.n	80016ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e146      	b.n	800196c <HAL_RCC_OscConfig+0x4f8>
 80016de:	bf00      	nop
 80016e0:	40021000 	.word	0x40021000
 80016e4:	42420000 	.word	0x42420000
 80016e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016ec:	4b92      	ldr	r3, [pc, #584]	; (8001938 <HAL_RCC_OscConfig+0x4c4>)
 80016ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d1e9      	bne.n	80016cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	2b00      	cmp	r3, #0
 8001702:	f000 80a6 	beq.w	8001852 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001706:	2300      	movs	r3, #0
 8001708:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800170a:	4b8b      	ldr	r3, [pc, #556]	; (8001938 <HAL_RCC_OscConfig+0x4c4>)
 800170c:	69db      	ldr	r3, [r3, #28]
 800170e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d10d      	bne.n	8001732 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001716:	4b88      	ldr	r3, [pc, #544]	; (8001938 <HAL_RCC_OscConfig+0x4c4>)
 8001718:	69db      	ldr	r3, [r3, #28]
 800171a:	4a87      	ldr	r2, [pc, #540]	; (8001938 <HAL_RCC_OscConfig+0x4c4>)
 800171c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001720:	61d3      	str	r3, [r2, #28]
 8001722:	4b85      	ldr	r3, [pc, #532]	; (8001938 <HAL_RCC_OscConfig+0x4c4>)
 8001724:	69db      	ldr	r3, [r3, #28]
 8001726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172a:	60bb      	str	r3, [r7, #8]
 800172c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800172e:	2301      	movs	r3, #1
 8001730:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001732:	4b82      	ldr	r3, [pc, #520]	; (800193c <HAL_RCC_OscConfig+0x4c8>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800173a:	2b00      	cmp	r3, #0
 800173c:	d118      	bne.n	8001770 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800173e:	4b7f      	ldr	r3, [pc, #508]	; (800193c <HAL_RCC_OscConfig+0x4c8>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a7e      	ldr	r2, [pc, #504]	; (800193c <HAL_RCC_OscConfig+0x4c8>)
 8001744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001748:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800174a:	f7ff f927 	bl	800099c <HAL_GetTick>
 800174e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001750:	e008      	b.n	8001764 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001752:	f7ff f923 	bl	800099c <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b64      	cmp	r3, #100	; 0x64
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e103      	b.n	800196c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001764:	4b75      	ldr	r3, [pc, #468]	; (800193c <HAL_RCC_OscConfig+0x4c8>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800176c:	2b00      	cmp	r3, #0
 800176e:	d0f0      	beq.n	8001752 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d106      	bne.n	8001786 <HAL_RCC_OscConfig+0x312>
 8001778:	4b6f      	ldr	r3, [pc, #444]	; (8001938 <HAL_RCC_OscConfig+0x4c4>)
 800177a:	6a1b      	ldr	r3, [r3, #32]
 800177c:	4a6e      	ldr	r2, [pc, #440]	; (8001938 <HAL_RCC_OscConfig+0x4c4>)
 800177e:	f043 0301 	orr.w	r3, r3, #1
 8001782:	6213      	str	r3, [r2, #32]
 8001784:	e02d      	b.n	80017e2 <HAL_RCC_OscConfig+0x36e>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d10c      	bne.n	80017a8 <HAL_RCC_OscConfig+0x334>
 800178e:	4b6a      	ldr	r3, [pc, #424]	; (8001938 <HAL_RCC_OscConfig+0x4c4>)
 8001790:	6a1b      	ldr	r3, [r3, #32]
 8001792:	4a69      	ldr	r2, [pc, #420]	; (8001938 <HAL_RCC_OscConfig+0x4c4>)
 8001794:	f023 0301 	bic.w	r3, r3, #1
 8001798:	6213      	str	r3, [r2, #32]
 800179a:	4b67      	ldr	r3, [pc, #412]	; (8001938 <HAL_RCC_OscConfig+0x4c4>)
 800179c:	6a1b      	ldr	r3, [r3, #32]
 800179e:	4a66      	ldr	r2, [pc, #408]	; (8001938 <HAL_RCC_OscConfig+0x4c4>)
 80017a0:	f023 0304 	bic.w	r3, r3, #4
 80017a4:	6213      	str	r3, [r2, #32]
 80017a6:	e01c      	b.n	80017e2 <HAL_RCC_OscConfig+0x36e>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	2b05      	cmp	r3, #5
 80017ae:	d10c      	bne.n	80017ca <HAL_RCC_OscConfig+0x356>
 80017b0:	4b61      	ldr	r3, [pc, #388]	; (8001938 <HAL_RCC_OscConfig+0x4c4>)
 80017b2:	6a1b      	ldr	r3, [r3, #32]
 80017b4:	4a60      	ldr	r2, [pc, #384]	; (8001938 <HAL_RCC_OscConfig+0x4c4>)
 80017b6:	f043 0304 	orr.w	r3, r3, #4
 80017ba:	6213      	str	r3, [r2, #32]
 80017bc:	4b5e      	ldr	r3, [pc, #376]	; (8001938 <HAL_RCC_OscConfig+0x4c4>)
 80017be:	6a1b      	ldr	r3, [r3, #32]
 80017c0:	4a5d      	ldr	r2, [pc, #372]	; (8001938 <HAL_RCC_OscConfig+0x4c4>)
 80017c2:	f043 0301 	orr.w	r3, r3, #1
 80017c6:	6213      	str	r3, [r2, #32]
 80017c8:	e00b      	b.n	80017e2 <HAL_RCC_OscConfig+0x36e>
 80017ca:	4b5b      	ldr	r3, [pc, #364]	; (8001938 <HAL_RCC_OscConfig+0x4c4>)
 80017cc:	6a1b      	ldr	r3, [r3, #32]
 80017ce:	4a5a      	ldr	r2, [pc, #360]	; (8001938 <HAL_RCC_OscConfig+0x4c4>)
 80017d0:	f023 0301 	bic.w	r3, r3, #1
 80017d4:	6213      	str	r3, [r2, #32]
 80017d6:	4b58      	ldr	r3, [pc, #352]	; (8001938 <HAL_RCC_OscConfig+0x4c4>)
 80017d8:	6a1b      	ldr	r3, [r3, #32]
 80017da:	4a57      	ldr	r2, [pc, #348]	; (8001938 <HAL_RCC_OscConfig+0x4c4>)
 80017dc:	f023 0304 	bic.w	r3, r3, #4
 80017e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d015      	beq.n	8001816 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ea:	f7ff f8d7 	bl	800099c <HAL_GetTick>
 80017ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017f0:	e00a      	b.n	8001808 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017f2:	f7ff f8d3 	bl	800099c <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001800:	4293      	cmp	r3, r2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e0b1      	b.n	800196c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001808:	4b4b      	ldr	r3, [pc, #300]	; (8001938 <HAL_RCC_OscConfig+0x4c4>)
 800180a:	6a1b      	ldr	r3, [r3, #32]
 800180c:	f003 0302 	and.w	r3, r3, #2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d0ee      	beq.n	80017f2 <HAL_RCC_OscConfig+0x37e>
 8001814:	e014      	b.n	8001840 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001816:	f7ff f8c1 	bl	800099c <HAL_GetTick>
 800181a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800181c:	e00a      	b.n	8001834 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800181e:	f7ff f8bd 	bl	800099c <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	f241 3288 	movw	r2, #5000	; 0x1388
 800182c:	4293      	cmp	r3, r2
 800182e:	d901      	bls.n	8001834 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e09b      	b.n	800196c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001834:	4b40      	ldr	r3, [pc, #256]	; (8001938 <HAL_RCC_OscConfig+0x4c4>)
 8001836:	6a1b      	ldr	r3, [r3, #32]
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d1ee      	bne.n	800181e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001840:	7dfb      	ldrb	r3, [r7, #23]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d105      	bne.n	8001852 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001846:	4b3c      	ldr	r3, [pc, #240]	; (8001938 <HAL_RCC_OscConfig+0x4c4>)
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	4a3b      	ldr	r2, [pc, #236]	; (8001938 <HAL_RCC_OscConfig+0x4c4>)
 800184c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001850:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	2b00      	cmp	r3, #0
 8001858:	f000 8087 	beq.w	800196a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800185c:	4b36      	ldr	r3, [pc, #216]	; (8001938 <HAL_RCC_OscConfig+0x4c4>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f003 030c 	and.w	r3, r3, #12
 8001864:	2b08      	cmp	r3, #8
 8001866:	d061      	beq.n	800192c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	69db      	ldr	r3, [r3, #28]
 800186c:	2b02      	cmp	r3, #2
 800186e:	d146      	bne.n	80018fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001870:	4b33      	ldr	r3, [pc, #204]	; (8001940 <HAL_RCC_OscConfig+0x4cc>)
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001876:	f7ff f891 	bl	800099c <HAL_GetTick>
 800187a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800187c:	e008      	b.n	8001890 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800187e:	f7ff f88d 	bl	800099c <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	2b02      	cmp	r3, #2
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e06d      	b.n	800196c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001890:	4b29      	ldr	r3, [pc, #164]	; (8001938 <HAL_RCC_OscConfig+0x4c4>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1f0      	bne.n	800187e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018a4:	d108      	bne.n	80018b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018a6:	4b24      	ldr	r3, [pc, #144]	; (8001938 <HAL_RCC_OscConfig+0x4c4>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	4921      	ldr	r1, [pc, #132]	; (8001938 <HAL_RCC_OscConfig+0x4c4>)
 80018b4:	4313      	orrs	r3, r2
 80018b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018b8:	4b1f      	ldr	r3, [pc, #124]	; (8001938 <HAL_RCC_OscConfig+0x4c4>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a19      	ldr	r1, [r3, #32]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c8:	430b      	orrs	r3, r1
 80018ca:	491b      	ldr	r1, [pc, #108]	; (8001938 <HAL_RCC_OscConfig+0x4c4>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018d0:	4b1b      	ldr	r3, [pc, #108]	; (8001940 <HAL_RCC_OscConfig+0x4cc>)
 80018d2:	2201      	movs	r2, #1
 80018d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d6:	f7ff f861 	bl	800099c <HAL_GetTick>
 80018da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018dc:	e008      	b.n	80018f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018de:	f7ff f85d 	bl	800099c <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d901      	bls.n	80018f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e03d      	b.n	800196c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018f0:	4b11      	ldr	r3, [pc, #68]	; (8001938 <HAL_RCC_OscConfig+0x4c4>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d0f0      	beq.n	80018de <HAL_RCC_OscConfig+0x46a>
 80018fc:	e035      	b.n	800196a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018fe:	4b10      	ldr	r3, [pc, #64]	; (8001940 <HAL_RCC_OscConfig+0x4cc>)
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001904:	f7ff f84a 	bl	800099c <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800190c:	f7ff f846 	bl	800099c <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e026      	b.n	800196c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800191e:	4b06      	ldr	r3, [pc, #24]	; (8001938 <HAL_RCC_OscConfig+0x4c4>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1f0      	bne.n	800190c <HAL_RCC_OscConfig+0x498>
 800192a:	e01e      	b.n	800196a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	69db      	ldr	r3, [r3, #28]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d107      	bne.n	8001944 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e019      	b.n	800196c <HAL_RCC_OscConfig+0x4f8>
 8001938:	40021000 	.word	0x40021000
 800193c:	40007000 	.word	0x40007000
 8001940:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001944:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <HAL_RCC_OscConfig+0x500>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a1b      	ldr	r3, [r3, #32]
 8001954:	429a      	cmp	r2, r3
 8001956:	d106      	bne.n	8001966 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001962:	429a      	cmp	r2, r3
 8001964:	d001      	beq.n	800196a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e000      	b.n	800196c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800196a:	2300      	movs	r3, #0
}
 800196c:	4618      	mov	r0, r3
 800196e:	3718      	adds	r7, #24
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40021000 	.word	0x40021000

08001978 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d101      	bne.n	800198c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e0d0      	b.n	8001b2e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800198c:	4b6a      	ldr	r3, [pc, #424]	; (8001b38 <HAL_RCC_ClockConfig+0x1c0>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0307 	and.w	r3, r3, #7
 8001994:	683a      	ldr	r2, [r7, #0]
 8001996:	429a      	cmp	r2, r3
 8001998:	d910      	bls.n	80019bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800199a:	4b67      	ldr	r3, [pc, #412]	; (8001b38 <HAL_RCC_ClockConfig+0x1c0>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f023 0207 	bic.w	r2, r3, #7
 80019a2:	4965      	ldr	r1, [pc, #404]	; (8001b38 <HAL_RCC_ClockConfig+0x1c0>)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019aa:	4b63      	ldr	r3, [pc, #396]	; (8001b38 <HAL_RCC_ClockConfig+0x1c0>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d001      	beq.n	80019bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e0b8      	b.n	8001b2e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d020      	beq.n	8001a0a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0304 	and.w	r3, r3, #4
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d005      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019d4:	4b59      	ldr	r3, [pc, #356]	; (8001b3c <HAL_RCC_ClockConfig+0x1c4>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	4a58      	ldr	r2, [pc, #352]	; (8001b3c <HAL_RCC_ClockConfig+0x1c4>)
 80019da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80019de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0308 	and.w	r3, r3, #8
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d005      	beq.n	80019f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019ec:	4b53      	ldr	r3, [pc, #332]	; (8001b3c <HAL_RCC_ClockConfig+0x1c4>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	4a52      	ldr	r2, [pc, #328]	; (8001b3c <HAL_RCC_ClockConfig+0x1c4>)
 80019f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80019f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019f8:	4b50      	ldr	r3, [pc, #320]	; (8001b3c <HAL_RCC_ClockConfig+0x1c4>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	494d      	ldr	r1, [pc, #308]	; (8001b3c <HAL_RCC_ClockConfig+0x1c4>)
 8001a06:	4313      	orrs	r3, r2
 8001a08:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d040      	beq.n	8001a98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d107      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a1e:	4b47      	ldr	r3, [pc, #284]	; (8001b3c <HAL_RCC_ClockConfig+0x1c4>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d115      	bne.n	8001a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e07f      	b.n	8001b2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d107      	bne.n	8001a46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a36:	4b41      	ldr	r3, [pc, #260]	; (8001b3c <HAL_RCC_ClockConfig+0x1c4>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d109      	bne.n	8001a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e073      	b.n	8001b2e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a46:	4b3d      	ldr	r3, [pc, #244]	; (8001b3c <HAL_RCC_ClockConfig+0x1c4>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e06b      	b.n	8001b2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a56:	4b39      	ldr	r3, [pc, #228]	; (8001b3c <HAL_RCC_ClockConfig+0x1c4>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f023 0203 	bic.w	r2, r3, #3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	4936      	ldr	r1, [pc, #216]	; (8001b3c <HAL_RCC_ClockConfig+0x1c4>)
 8001a64:	4313      	orrs	r3, r2
 8001a66:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a68:	f7fe ff98 	bl	800099c <HAL_GetTick>
 8001a6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a6e:	e00a      	b.n	8001a86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a70:	f7fe ff94 	bl	800099c <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e053      	b.n	8001b2e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a86:	4b2d      	ldr	r3, [pc, #180]	; (8001b3c <HAL_RCC_ClockConfig+0x1c4>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f003 020c 	and.w	r2, r3, #12
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d1eb      	bne.n	8001a70 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a98:	4b27      	ldr	r3, [pc, #156]	; (8001b38 <HAL_RCC_ClockConfig+0x1c0>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0307 	and.w	r3, r3, #7
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d210      	bcs.n	8001ac8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aa6:	4b24      	ldr	r3, [pc, #144]	; (8001b38 <HAL_RCC_ClockConfig+0x1c0>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f023 0207 	bic.w	r2, r3, #7
 8001aae:	4922      	ldr	r1, [pc, #136]	; (8001b38 <HAL_RCC_ClockConfig+0x1c0>)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ab6:	4b20      	ldr	r3, [pc, #128]	; (8001b38 <HAL_RCC_ClockConfig+0x1c0>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d001      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e032      	b.n	8001b2e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d008      	beq.n	8001ae6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ad4:	4b19      	ldr	r3, [pc, #100]	; (8001b3c <HAL_RCC_ClockConfig+0x1c4>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	4916      	ldr	r1, [pc, #88]	; (8001b3c <HAL_RCC_ClockConfig+0x1c4>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0308 	and.w	r3, r3, #8
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d009      	beq.n	8001b06 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001af2:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <HAL_RCC_ClockConfig+0x1c4>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	691b      	ldr	r3, [r3, #16]
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	490e      	ldr	r1, [pc, #56]	; (8001b3c <HAL_RCC_ClockConfig+0x1c4>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b06:	f000 f821 	bl	8001b4c <HAL_RCC_GetSysClockFreq>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <HAL_RCC_ClockConfig+0x1c4>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	091b      	lsrs	r3, r3, #4
 8001b12:	f003 030f 	and.w	r3, r3, #15
 8001b16:	490a      	ldr	r1, [pc, #40]	; (8001b40 <HAL_RCC_ClockConfig+0x1c8>)
 8001b18:	5ccb      	ldrb	r3, [r1, r3]
 8001b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b1e:	4a09      	ldr	r2, [pc, #36]	; (8001b44 <HAL_RCC_ClockConfig+0x1cc>)
 8001b20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b22:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <HAL_RCC_ClockConfig+0x1d0>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7fe fef6 	bl	8000918 <HAL_InitTick>

  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40022000 	.word	0x40022000
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	08003bdc 	.word	0x08003bdc
 8001b44:	20000000 	.word	0x20000000
 8001b48:	20000004 	.word	0x20000004

08001b4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b087      	sub	sp, #28
 8001b50:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b52:	2300      	movs	r3, #0
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	2300      	movs	r3, #0
 8001b58:	60bb      	str	r3, [r7, #8]
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	617b      	str	r3, [r7, #20]
 8001b5e:	2300      	movs	r3, #0
 8001b60:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b62:	2300      	movs	r3, #0
 8001b64:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b66:	4b1e      	ldr	r3, [pc, #120]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f003 030c 	and.w	r3, r3, #12
 8001b72:	2b04      	cmp	r3, #4
 8001b74:	d002      	beq.n	8001b7c <HAL_RCC_GetSysClockFreq+0x30>
 8001b76:	2b08      	cmp	r3, #8
 8001b78:	d003      	beq.n	8001b82 <HAL_RCC_GetSysClockFreq+0x36>
 8001b7a:	e027      	b.n	8001bcc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b7c:	4b19      	ldr	r3, [pc, #100]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b7e:	613b      	str	r3, [r7, #16]
      break;
 8001b80:	e027      	b.n	8001bd2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	0c9b      	lsrs	r3, r3, #18
 8001b86:	f003 030f 	and.w	r3, r3, #15
 8001b8a:	4a17      	ldr	r2, [pc, #92]	; (8001be8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b8c:	5cd3      	ldrb	r3, [r2, r3]
 8001b8e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d010      	beq.n	8001bbc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b9a:	4b11      	ldr	r3, [pc, #68]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	0c5b      	lsrs	r3, r3, #17
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	4a11      	ldr	r2, [pc, #68]	; (8001bec <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ba6:	5cd3      	ldrb	r3, [r2, r3]
 8001ba8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a0d      	ldr	r2, [pc, #52]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bae:	fb03 f202 	mul.w	r2, r3, r2
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb8:	617b      	str	r3, [r7, #20]
 8001bba:	e004      	b.n	8001bc6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4a0c      	ldr	r2, [pc, #48]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001bc0:	fb02 f303 	mul.w	r3, r2, r3
 8001bc4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	613b      	str	r3, [r7, #16]
      break;
 8001bca:	e002      	b.n	8001bd2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001bcc:	4b05      	ldr	r3, [pc, #20]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bce:	613b      	str	r3, [r7, #16]
      break;
 8001bd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bd2:	693b      	ldr	r3, [r7, #16]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	371c      	adds	r7, #28
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bc80      	pop	{r7}
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	40021000 	.word	0x40021000
 8001be4:	007a1200 	.word	0x007a1200
 8001be8:	08003bf4 	.word	0x08003bf4
 8001bec:	08003c04 	.word	0x08003c04
 8001bf0:	003d0900 	.word	0x003d0900

08001bf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bf8:	4b02      	ldr	r3, [pc, #8]	; (8001c04 <HAL_RCC_GetHCLKFreq+0x10>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr
 8001c04:	20000000 	.word	0x20000000

08001c08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c0c:	f7ff fff2 	bl	8001bf4 <HAL_RCC_GetHCLKFreq>
 8001c10:	4602      	mov	r2, r0
 8001c12:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	0a1b      	lsrs	r3, r3, #8
 8001c18:	f003 0307 	and.w	r3, r3, #7
 8001c1c:	4903      	ldr	r1, [pc, #12]	; (8001c2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c1e:	5ccb      	ldrb	r3, [r1, r3]
 8001c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	08003bec 	.word	0x08003bec

08001c30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c34:	f7ff ffde 	bl	8001bf4 <HAL_RCC_GetHCLKFreq>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	0adb      	lsrs	r3, r3, #11
 8001c40:	f003 0307 	and.w	r3, r3, #7
 8001c44:	4903      	ldr	r1, [pc, #12]	; (8001c54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c46:	5ccb      	ldrb	r3, [r1, r3]
 8001c48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40021000 	.word	0x40021000
 8001c54:	08003bec 	.word	0x08003bec

08001c58 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c60:	4b0a      	ldr	r3, [pc, #40]	; (8001c8c <RCC_Delay+0x34>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a0a      	ldr	r2, [pc, #40]	; (8001c90 <RCC_Delay+0x38>)
 8001c66:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6a:	0a5b      	lsrs	r3, r3, #9
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	fb02 f303 	mul.w	r3, r2, r3
 8001c72:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c74:	bf00      	nop
  }
  while (Delay --);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	1e5a      	subs	r2, r3, #1
 8001c7a:	60fa      	str	r2, [r7, #12]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1f9      	bne.n	8001c74 <RCC_Delay+0x1c>
}
 8001c80:	bf00      	nop
 8001c82:	bf00      	nop
 8001c84:	3714      	adds	r7, #20
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr
 8001c8c:	20000000 	.word	0x20000000
 8001c90:	10624dd3 	.word	0x10624dd3

08001c94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e042      	b.n	8001d2c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d106      	bne.n	8001cc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7fe fda6 	bl	800080c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2224      	movs	r2, #36	; 0x24
 8001cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	68da      	ldr	r2, [r3, #12]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001cd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f000 f91d 	bl	8001f18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	691a      	ldr	r2, [r3, #16]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001cec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	695a      	ldr	r2, [r3, #20]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001cfc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68da      	ldr	r2, [r3, #12]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2220      	movs	r2, #32
 8001d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2220      	movs	r2, #32
 8001d20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08a      	sub	sp, #40	; 0x28
 8001d38:	af02      	add	r7, sp, #8
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	603b      	str	r3, [r7, #0]
 8001d40:	4613      	mov	r3, r2
 8001d42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001d44:	2300      	movs	r3, #0
 8001d46:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b20      	cmp	r3, #32
 8001d52:	d16d      	bne.n	8001e30 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d002      	beq.n	8001d60 <HAL_UART_Transmit+0x2c>
 8001d5a:	88fb      	ldrh	r3, [r7, #6]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e066      	b.n	8001e32 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2200      	movs	r2, #0
 8001d68:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2221      	movs	r2, #33	; 0x21
 8001d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d72:	f7fe fe13 	bl	800099c <HAL_GetTick>
 8001d76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	88fa      	ldrh	r2, [r7, #6]
 8001d7c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	88fa      	ldrh	r2, [r7, #6]
 8001d82:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d8c:	d108      	bne.n	8001da0 <HAL_UART_Transmit+0x6c>
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d104      	bne.n	8001da0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	61bb      	str	r3, [r7, #24]
 8001d9e:	e003      	b.n	8001da8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001da4:	2300      	movs	r3, #0
 8001da6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001da8:	e02a      	b.n	8001e00 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	2200      	movs	r2, #0
 8001db2:	2180      	movs	r1, #128	; 0x80
 8001db4:	68f8      	ldr	r0, [r7, #12]
 8001db6:	f000 f840 	bl	8001e3a <UART_WaitOnFlagUntilTimeout>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e036      	b.n	8001e32 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d10b      	bne.n	8001de2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	881b      	ldrh	r3, [r3, #0]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001dd8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	3302      	adds	r3, #2
 8001dde:	61bb      	str	r3, [r7, #24]
 8001de0:	e007      	b.n	8001df2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	781a      	ldrb	r2, [r3, #0]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	3301      	adds	r3, #1
 8001df0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1cf      	bne.n	8001daa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	9300      	str	r3, [sp, #0]
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	2200      	movs	r2, #0
 8001e12:	2140      	movs	r1, #64	; 0x40
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	f000 f810 	bl	8001e3a <UART_WaitOnFlagUntilTimeout>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e006      	b.n	8001e32 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2220      	movs	r2, #32
 8001e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	e000      	b.n	8001e32 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001e30:	2302      	movs	r3, #2
  }
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3720      	adds	r7, #32
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b090      	sub	sp, #64	; 0x40
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	60f8      	str	r0, [r7, #12]
 8001e42:	60b9      	str	r1, [r7, #8]
 8001e44:	603b      	str	r3, [r7, #0]
 8001e46:	4613      	mov	r3, r2
 8001e48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e4a:	e050      	b.n	8001eee <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e52:	d04c      	beq.n	8001eee <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001e54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d007      	beq.n	8001e6a <UART_WaitOnFlagUntilTimeout+0x30>
 8001e5a:	f7fe fd9f 	bl	800099c <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d241      	bcs.n	8001eee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	330c      	adds	r3, #12
 8001e70:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e74:	e853 3f00 	ldrex	r3, [r3]
 8001e78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001e80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	330c      	adds	r3, #12
 8001e88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e8a:	637a      	str	r2, [r7, #52]	; 0x34
 8001e8c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e92:	e841 2300 	strex	r3, r2, [r1]
 8001e96:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1e5      	bne.n	8001e6a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	3314      	adds	r3, #20
 8001ea4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	e853 3f00 	ldrex	r3, [r3]
 8001eac:	613b      	str	r3, [r7, #16]
   return(result);
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	f023 0301 	bic.w	r3, r3, #1
 8001eb4:	63bb      	str	r3, [r7, #56]	; 0x38
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	3314      	adds	r3, #20
 8001ebc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ebe:	623a      	str	r2, [r7, #32]
 8001ec0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ec2:	69f9      	ldr	r1, [r7, #28]
 8001ec4:	6a3a      	ldr	r2, [r7, #32]
 8001ec6:	e841 2300 	strex	r3, r2, [r1]
 8001eca:	61bb      	str	r3, [r7, #24]
   return(result);
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1e5      	bne.n	8001e9e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2220      	movs	r2, #32
 8001ed6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2220      	movs	r2, #32
 8001ede:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e00f      	b.n	8001f0e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	68ba      	ldr	r2, [r7, #8]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	bf0c      	ite	eq
 8001efe:	2301      	moveq	r3, #1
 8001f00:	2300      	movne	r3, #0
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	461a      	mov	r2, r3
 8001f06:	79fb      	ldrb	r3, [r7, #7]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d09f      	beq.n	8001e4c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3740      	adds	r7, #64	; 0x40
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
	...

08001f18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	68da      	ldr	r2, [r3, #12]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	689a      	ldr	r2, [r3, #8]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	695b      	ldr	r3, [r3, #20]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001f52:	f023 030c 	bic.w	r3, r3, #12
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	6812      	ldr	r2, [r2, #0]
 8001f5a:	68b9      	ldr	r1, [r7, #8]
 8001f5c:	430b      	orrs	r3, r1
 8001f5e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	699a      	ldr	r2, [r3, #24]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	430a      	orrs	r2, r1
 8001f74:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a2c      	ldr	r2, [pc, #176]	; (800202c <UART_SetConfig+0x114>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d103      	bne.n	8001f88 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001f80:	f7ff fe56 	bl	8001c30 <HAL_RCC_GetPCLK2Freq>
 8001f84:	60f8      	str	r0, [r7, #12]
 8001f86:	e002      	b.n	8001f8e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001f88:	f7ff fe3e 	bl	8001c08 <HAL_RCC_GetPCLK1Freq>
 8001f8c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	4613      	mov	r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	4413      	add	r3, r2
 8001f96:	009a      	lsls	r2, r3, #2
 8001f98:	441a      	add	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa4:	4a22      	ldr	r2, [pc, #136]	; (8002030 <UART_SetConfig+0x118>)
 8001fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8001faa:	095b      	lsrs	r3, r3, #5
 8001fac:	0119      	lsls	r1, r3, #4
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	4413      	add	r3, r2
 8001fb6:	009a      	lsls	r2, r3, #2
 8001fb8:	441a      	add	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fc4:	4b1a      	ldr	r3, [pc, #104]	; (8002030 <UART_SetConfig+0x118>)
 8001fc6:	fba3 0302 	umull	r0, r3, r3, r2
 8001fca:	095b      	lsrs	r3, r3, #5
 8001fcc:	2064      	movs	r0, #100	; 0x64
 8001fce:	fb00 f303 	mul.w	r3, r0, r3
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	011b      	lsls	r3, r3, #4
 8001fd6:	3332      	adds	r3, #50	; 0x32
 8001fd8:	4a15      	ldr	r2, [pc, #84]	; (8002030 <UART_SetConfig+0x118>)
 8001fda:	fba2 2303 	umull	r2, r3, r2, r3
 8001fde:	095b      	lsrs	r3, r3, #5
 8001fe0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fe4:	4419      	add	r1, r3
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	009a      	lsls	r2, r3, #2
 8001ff0:	441a      	add	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ffc:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <UART_SetConfig+0x118>)
 8001ffe:	fba3 0302 	umull	r0, r3, r3, r2
 8002002:	095b      	lsrs	r3, r3, #5
 8002004:	2064      	movs	r0, #100	; 0x64
 8002006:	fb00 f303 	mul.w	r3, r0, r3
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	011b      	lsls	r3, r3, #4
 800200e:	3332      	adds	r3, #50	; 0x32
 8002010:	4a07      	ldr	r2, [pc, #28]	; (8002030 <UART_SetConfig+0x118>)
 8002012:	fba2 2303 	umull	r2, r3, r2, r3
 8002016:	095b      	lsrs	r3, r3, #5
 8002018:	f003 020f 	and.w	r2, r3, #15
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	440a      	add	r2, r1
 8002022:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002024:	bf00      	nop
 8002026:	3710      	adds	r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40013800 	.word	0x40013800
 8002030:	51eb851f 	.word	0x51eb851f

08002034 <initializeRandomSeed>:
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include "ECU.h"

void initializeRandomSeed() {
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
    srand((unsigned int)time(NULL));
 8002038:	2000      	movs	r0, #0
 800203a:	f000 fc5f 	bl	80028fc <time>
 800203e:	4602      	mov	r2, r0
 8002040:	460b      	mov	r3, r1
 8002042:	4613      	mov	r3, r2
 8002044:	4618      	mov	r0, r3
 8002046:	f000 faad 	bl	80025a4 <srand>
}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}
	...

08002050 <getRandomNumber>:
unsigned int getRandomNumber(unsigned int min, unsigned int max) {
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
    static int seedInitialized = 0;
    if (!seedInitialized) {
 800205a:	4b0e      	ldr	r3, [pc, #56]	; (8002094 <getRandomNumber+0x44>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d104      	bne.n	800206c <getRandomNumber+0x1c>
        initializeRandomSeed();
 8002062:	f7ff ffe7 	bl	8002034 <initializeRandomSeed>
        seedInitialized = 1;
 8002066:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <getRandomNumber+0x44>)
 8002068:	2201      	movs	r2, #1
 800206a:	601a      	str	r2, [r3, #0]
    }

    return min + rand() % (max - min + 1);
 800206c:	f000 fac8 	bl	8002600 <rand>
 8002070:	4603      	mov	r3, r0
 8002072:	461a      	mov	r2, r3
 8002074:	6839      	ldr	r1, [r7, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	1acb      	subs	r3, r1, r3
 800207a:	3301      	adds	r3, #1
 800207c:	fbb2 f1f3 	udiv	r1, r2, r3
 8002080:	fb01 f303 	mul.w	r3, r1, r3
 8002084:	1ad2      	subs	r2, r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4413      	add	r3, r2
}
 800208a:	4618      	mov	r0, r3
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	200001a4 	.word	0x200001a4

08002098 <ResponseSeedInit>:
	ECU->NegativeInvalidLength=INVALIDREQUESTLEGNTH;
	ECU->Write_NegResponseSID=WRITEDATARESPONSESID;
	ECU->Write_NegResponse=WRITEDATANEG;
}

void ResponseSeedInit(ResponseSEEDtypedef *ECU){
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
	ECU->ResponseID = SERESPONSEID;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2267      	movs	r2, #103	; 0x67
 80020a4:	701a      	strb	r2, [r3, #0]
	ECU->SecurityLevel =SESEEDLEVEL;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2201      	movs	r2, #1
 80020aa:	705a      	strb	r2, [r3, #1]
	ECU->Seed_0=0;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	709a      	strb	r2, [r3, #2]
	ECU->Seed_1=0;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	70da      	strb	r2, [r3, #3]
	ECU->Seed_2=0;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	711a      	strb	r2, [r3, #4]
	ECU->Seed_3=0;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	715a      	strb	r2, [r3, #5]
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bc80      	pop	{r7}
 80020cc:	4770      	bx	lr

080020ce <NegativeResponseInit>:
void NegativeResponseInit(NegativeResponsetypedef *ECU){
 80020ce:	b480      	push	{r7}
 80020d0:	b083      	sub	sp, #12
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
	ECU->NegativeResponse=WRITEDATANEG;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	227f      	movs	r2, #127	; 0x7f
 80020da:	701a      	strb	r2, [r3, #0]
	ECU->ResponseSID=SEREQUESTID;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2227      	movs	r2, #39	; 0x27
 80020e0:	705a      	strb	r2, [r3, #1]
	ECU->NegativeResponseCode=0;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	709a      	strb	r2, [r3, #2]
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bc80      	pop	{r7}
 80020f0:	4770      	bx	lr

080020f2 <Tester_SendRquestSeedInit>:
	Tester->Record_Highbyte=RECORDDATAIDHIHG;
	Tester->Record_Lowbyte=RECORDDATALOW;
	Tester->WriteData_RequestSID=WRITEDATAID;
}
//
void Tester_SendRquestSeedInit(RequestSeedTypedef *Tester){
 80020f2:	b480      	push	{r7}
 80020f4:	b083      	sub	sp, #12
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
	Tester->Security_Level=SESEEDLEVEL;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2201      	movs	r2, #1
 80020fe:	705a      	strb	r2, [r3, #1]
	Tester->Security_SID=SEREQUESTID;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2227      	movs	r2, #39	; 0x27
 8002104:	701a      	strb	r2, [r3, #0]
}
 8002106:	bf00      	nop
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	bc80      	pop	{r7}
 800210e:	4770      	bx	lr

08002110 <KeyandSeedCompute>:

void KeyandSeedCompute(Keytypedef* Key , Seedtypedef * Seed){
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
	Key->Key_0 = Seed->Seed_0 ^ Seed->Seed_1;
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	405a      	eors	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	601a      	str	r2, [r3, #0]
	Key->Key_1 = Seed->Seed_1 + Seed->Seed_2;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	441a      	add	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	605a      	str	r2, [r3, #4]
	Key->Key_2 = Seed->Seed_2 ^ Seed->Seed_3;
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	689a      	ldr	r2, [r3, #8]
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	405a      	eors	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	609a      	str	r2, [r3, #8]
	Key->Key_3 = Seed->Seed_3 + Seed->Seed_0;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	68da      	ldr	r2, [r3, #12]
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	441a      	add	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	60da      	str	r2, [r3, #12]
	Key->Key_4 = Seed->Seed_0 | Seed->Seed_1;
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	431a      	orrs	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	611a      	str	r2, [r3, #16]
	Key->Key_5 = Seed->Seed_1 + Seed->Seed_2;
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685a      	ldr	r2, [r3, #4]
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	441a      	add	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	615a      	str	r2, [r3, #20]
	Key->Key_6 = Seed->Seed_2 | Seed->Seed_3;
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	689a      	ldr	r2, [r3, #8]
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	431a      	orrs	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	619a      	str	r2, [r3, #24]
	Key->Key_7 = Seed->Seed_3 + Seed->Seed_0;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	68da      	ldr	r2, [r3, #12]
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	441a      	add	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	61da      	str	r2, [r3, #28]
	Key->Key_8 = Seed->Seed_0 & Seed->Seed_1;
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	401a      	ands	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	621a      	str	r2, [r3, #32]
	Key->Key_9 = Seed->Seed_1 + Seed->Seed_2;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	441a      	add	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	625a      	str	r2, [r3, #36]	; 0x24
	Key->Key_10 = Seed->Seed_2 & Seed->Seed_3;
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	689a      	ldr	r2, [r3, #8]
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	401a      	ands	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	629a      	str	r2, [r3, #40]	; 0x28
	Key->Key_11 = Seed->Seed_3 + Seed->Seed_0;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	68da      	ldr	r2, [r3, #12]
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	441a      	add	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	62da      	str	r2, [r3, #44]	; 0x2c
	Key->Key_12 = Seed->Seed_0 - Seed->Seed_1;
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	1ad2      	subs	r2, r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	631a      	str	r2, [r3, #48]	; 0x30
	Key->Key_13 = Seed->Seed_1 + Seed->Seed_2;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	441a      	add	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	635a      	str	r2, [r3, #52]	; 0x34
	Key->Key_14 = Seed->Seed_2 - Seed->Seed_3;
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	689a      	ldr	r2, [r3, #8]
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	1ad2      	subs	r2, r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	639a      	str	r2, [r3, #56]	; 0x38
	Key->Key_15 = Seed->Seed_3 + Seed->Seed_0;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	68da      	ldr	r2, [r3, #12]
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	441a      	add	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr

08002204 <isotp_send_single_frame>:
#endif

    return ret;
}

static int isotp_send_single_frame(IsoTpLink* link, uint32_t id) {
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]

    IsoTpCanMessage message;
    int ret;

    /* multi frame message length must greater than 7  */
    assert(link->send_size <= 7);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	895b      	ldrh	r3, [r3, #10]
 8002212:	2b07      	cmp	r3, #7
 8002214:	d905      	bls.n	8002222 <isotp_send_single_frame+0x1e>
 8002216:	4b1d      	ldr	r3, [pc, #116]	; (800228c <isotp_send_single_frame+0x88>)
 8002218:	4a1d      	ldr	r2, [pc, #116]	; (8002290 <isotp_send_single_frame+0x8c>)
 800221a:	2143      	movs	r1, #67	; 0x43
 800221c:	481d      	ldr	r0, [pc, #116]	; (8002294 <isotp_send_single_frame+0x90>)
 800221e:	f000 f9a3 	bl	8002568 <__assert_func>

    /* setup message  */
    message.as.single_frame.type = ISOTP_PCI_TYPE_SINGLE;
 8002222:	7b3b      	ldrb	r3, [r7, #12]
 8002224:	f36f 1307 	bfc	r3, #4, #4
 8002228:	733b      	strb	r3, [r7, #12]
    message.as.single_frame.SF_DL = (uint8_t) link->send_size;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	895b      	ldrh	r3, [r3, #10]
 800222e:	f003 030f 	and.w	r3, r3, #15
 8002232:	b2da      	uxtb	r2, r3
 8002234:	7b3b      	ldrb	r3, [r7, #12]
 8002236:	f362 0303 	bfi	r3, r2, #0, #4
 800223a:	733b      	strb	r3, [r7, #12]
    (void) memcpy(message.as.single_frame.data, link->send_buffer, link->send_size);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6859      	ldr	r1, [r3, #4]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	895b      	ldrh	r3, [r3, #10]
 8002244:	461a      	mov	r2, r3
 8002246:	f107 030c 	add.w	r3, r7, #12
 800224a:	3301      	adds	r3, #1
 800224c:	4618      	mov	r0, r3
 800224e:	f000 fbf4 	bl	8002a3a <memcpy>

    /* send message */
#ifdef ISO_TP_FRAME_PADDING
    (void) memset(message.as.single_frame.data + link->send_size, 0, sizeof(message.as.single_frame.data) - link->send_size);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	895b      	ldrh	r3, [r3, #10]
 8002256:	461a      	mov	r2, r3
 8002258:	f107 030c 	add.w	r3, r7, #12
 800225c:	3301      	adds	r3, #1
 800225e:	1898      	adds	r0, r3, r2
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	895b      	ldrh	r3, [r3, #10]
 8002264:	f1c3 0307 	rsb	r3, r3, #7
 8002268:	461a      	mov	r2, r3
 800226a:	2100      	movs	r1, #0
 800226c:	f000 fb3d 	bl	80028ea <memset>
    ret = isotp_user_send_can(id, message.as.data_array.ptr, sizeof(message));
 8002270:	f107 030c 	add.w	r3, r7, #12
 8002274:	2208      	movs	r2, #8
 8002276:	4619      	mov	r1, r3
 8002278:	6838      	ldr	r0, [r7, #0]
 800227a:	f000 f871 	bl	8002360 <isotp_user_send_can>
 800227e:	6178      	str	r0, [r7, #20]
    ret = isotp_user_send_can(id,
            message.as.data_array.ptr,
            link->send_size + 1);
#endif

    return ret;
 8002280:	697b      	ldr	r3, [r7, #20]
}
 8002282:	4618      	mov	r0, r3
 8002284:	3718      	adds	r7, #24
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	080039e4 	.word	0x080039e4
 8002290:	08003c08 	.word	0x08003c08
 8002294:	080039fc 	.word	0x080039fc

08002298 <isotp_send_first_frame>:

static int isotp_send_first_frame(IsoTpLink* link, uint32_t id) {
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
    
    IsoTpCanMessage message;
    int ret;

    /* multi frame message length must greater than 7  */
    assert(link->send_size > 7);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	895b      	ldrh	r3, [r3, #10]
 80022a6:	2b07      	cmp	r3, #7
 80022a8:	d805      	bhi.n	80022b6 <isotp_send_first_frame+0x1e>
 80022aa:	4b1d      	ldr	r3, [pc, #116]	; (8002320 <isotp_send_first_frame+0x88>)
 80022ac:	4a1d      	ldr	r2, [pc, #116]	; (8002324 <isotp_send_first_frame+0x8c>)
 80022ae:	215d      	movs	r1, #93	; 0x5d
 80022b0:	481d      	ldr	r0, [pc, #116]	; (8002328 <isotp_send_first_frame+0x90>)
 80022b2:	f000 f959 	bl	8002568 <__assert_func>

    /* setup message  */
    message.as.first_frame.type = ISOTP_PCI_TYPE_FIRST_FRAME;
 80022b6:	7b3b      	ldrb	r3, [r7, #12]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f362 1307 	bfi	r3, r2, #4, #4
 80022be:	733b      	strb	r3, [r7, #12]
    message.as.first_frame.FF_DL_low = (uint8_t) link->send_size;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	895b      	ldrh	r3, [r3, #10]
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	737b      	strb	r3, [r7, #13]
    message.as.first_frame.FF_DL_high = (uint8_t) (0x0F & (link->send_size >> 8));
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	895b      	ldrh	r3, [r3, #10]
 80022cc:	0a1b      	lsrs	r3, r3, #8
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	f003 030f 	and.w	r3, r3, #15
 80022d4:	b2da      	uxtb	r2, r3
 80022d6:	7b3b      	ldrb	r3, [r7, #12]
 80022d8:	f362 0303 	bfi	r3, r2, #0, #4
 80022dc:	733b      	strb	r3, [r7, #12]
    (void) memcpy(message.as.first_frame.data, link->send_buffer, sizeof(message.as.first_frame.data));
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685a      	ldr	r2, [r3, #4]
 80022e2:	f107 030e 	add.w	r3, r7, #14
 80022e6:	6811      	ldr	r1, [r2, #0]
 80022e8:	6019      	str	r1, [r3, #0]
 80022ea:	8892      	ldrh	r2, [r2, #4]
 80022ec:	809a      	strh	r2, [r3, #4]

    /* send message */
    ret = isotp_user_send_can(id, message.as.data_array.ptr, sizeof(message));
 80022ee:	f107 030c 	add.w	r3, r7, #12
 80022f2:	2208      	movs	r2, #8
 80022f4:	4619      	mov	r1, r3
 80022f6:	6838      	ldr	r0, [r7, #0]
 80022f8:	f000 f832 	bl	8002360 <isotp_user_send_can>
 80022fc:	6178      	str	r0, [r7, #20]
    if (ISOTP_RET_OK == ret) {
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d108      	bne.n	8002316 <isotp_send_first_frame+0x7e>
        link->send_offset += sizeof(message.as.first_frame.data);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	899b      	ldrh	r3, [r3, #12]
 8002308:	3306      	adds	r3, #6
 800230a:	b29a      	uxth	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	819a      	strh	r2, [r3, #12]
        link->send_sn = 1;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	739a      	strb	r2, [r3, #14]
    }

    return ret;
 8002316:	697b      	ldr	r3, [r7, #20]
}
 8002318:	4618      	mov	r0, r3
 800231a:	3718      	adds	r7, #24
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	08003a10 	.word	0x08003a10
 8002324:	08003c20 	.word	0x08003c20
 8002328:	080039fc 	.word	0x080039fc

0800232c <isotp_user_get_ms>:

///////////////////////////////////////////////////////
///                 PUBLIC FUNCTIONS                ///
///////////////////////////////////////////////////////

uint32_t isotp_user_get_ms(void) {
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
	    return HAL_GetTick();
 8002330:	f7fe fb34 	bl	800099c <HAL_GetTick>
 8002334:	4603      	mov	r3, r0
}
 8002336:	4618      	mov	r0, r3
 8002338:	bd80      	pop	{r7, pc}
	...

0800233c <isotp_user_debug>:

void isotp_user_debug(const char* message,...) {
 800233c:	b40f      	push	{r0, r1, r2, r3}
 800233e:	b580      	push	{r7, lr}
 8002340:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2,(uint8_t*) message, sizeof(message), HAL_MAX_DELAY);
 8002342:	f04f 33ff 	mov.w	r3, #4294967295
 8002346:	2204      	movs	r2, #4
 8002348:	68b9      	ldr	r1, [r7, #8]
 800234a:	4804      	ldr	r0, [pc, #16]	; (800235c <isotp_user_debug+0x20>)
 800234c:	f7ff fcf2 	bl	8001d34 <HAL_UART_Transmit>
 }
 8002350:	bf00      	nop
 8002352:	46bd      	mov	sp, r7
 8002354:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002358:	b004      	add	sp, #16
 800235a:	4770      	bx	lr
 800235c:	20000158 	.word	0x20000158

08002360 <isotp_user_send_can>:
int isotp_user_send_can(const uint32_t arbitration_id,
                           const uint8_t* data, const uint8_t size) {
 8002360:	b580      	push	{r7, lr}
 8002362:	b08c      	sub	sp, #48	; 0x30
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	4613      	mov	r3, r2
 800236c:	71fb      	strb	r3, [r7, #7]
	CAN_TxHeaderTypeDef Txheader;
	uint32_t TxMailbox;
	Txheader.DLC=size;
 800236e:	79fb      	ldrb	r3, [r7, #7]
 8002370:	62bb      	str	r3, [r7, #40]	; 0x28
	Txheader.IDE= CAN_ID_STD;
 8002372:	2300      	movs	r3, #0
 8002374:	623b      	str	r3, [r7, #32]
	Txheader.RTR= CAN_RTR_DATA;
 8002376:	2300      	movs	r3, #0
 8002378:	627b      	str	r3, [r7, #36]	; 0x24
	Txheader.StdId= arbitration_id;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	61bb      	str	r3, [r7, #24]
	if(HAL_CAN_AddTxMessage(&hcan, &Txheader, data, &TxMailbox)!=HAL_OK){
 800237e:	f107 0314 	add.w	r3, r7, #20
 8002382:	f107 0118 	add.w	r1, r7, #24
 8002386:	68ba      	ldr	r2, [r7, #8]
 8002388:	4808      	ldr	r0, [pc, #32]	; (80023ac <isotp_user_send_can+0x4c>)
 800238a:	f7fe fd19 	bl	8000dc0 <HAL_CAN_AddTxMessage>
		//errorhandle
	}
	while(HAL_CAN_IsTxMessagePending(&hcan, TxMailbox));
 800238e:	bf00      	nop
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	4619      	mov	r1, r3
 8002394:	4805      	ldr	r0, [pc, #20]	; (80023ac <isotp_user_send_can+0x4c>)
 8002396:	f7fe fde2 	bl	8000f5e <HAL_CAN_IsTxMessagePending>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d1f7      	bne.n	8002390 <isotp_user_send_can+0x30>
	return HAL_OK;
 80023a0:	2300      	movs	r3, #0
  }
 80023a2:	4618      	mov	r0, r3
 80023a4:	3730      	adds	r7, #48	; 0x30
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	20000084 	.word	0x20000084

080023b0 <CAN_Config_filtering>:
	*arbitration_id = Rx_Header.StdId;
	memcpy(Data,rcData,8);
	return HAL_OK;
}
uint32_t CAN_Config_filtering(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b08a      	sub	sp, #40	; 0x28
 80023b4:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef Can_filter_init;
	Can_filter_init.FilterActivation=ENABLE;
 80023b6:	2301      	movs	r3, #1
 80023b8:	623b      	str	r3, [r7, #32]
	Can_filter_init.FilterBank=0;
 80023ba:	2300      	movs	r3, #0
 80023bc:	617b      	str	r3, [r7, #20]
	Can_filter_init.FilterFIFOAssignment=CAN_RX_FIFO0;
 80023be:	2300      	movs	r3, #0
 80023c0:	613b      	str	r3, [r7, #16]
	Can_filter_init.FilterIdHigh=0x0000;
 80023c2:	2300      	movs	r3, #0
 80023c4:	603b      	str	r3, [r7, #0]
	Can_filter_init.FilterIdLow= 0x0000;
 80023c6:	2300      	movs	r3, #0
 80023c8:	607b      	str	r3, [r7, #4]
	Can_filter_init.FilterMaskIdHigh= 0x0000;
 80023ca:	2300      	movs	r3, #0
 80023cc:	60bb      	str	r3, [r7, #8]
	Can_filter_init.FilterMaskIdLow= 0x0000;
 80023ce:	2300      	movs	r3, #0
 80023d0:	60fb      	str	r3, [r7, #12]
	Can_filter_init.FilterMode=CAN_FILTERMODE_IDMASK;
 80023d2:	2300      	movs	r3, #0
 80023d4:	61bb      	str	r3, [r7, #24]
	Can_filter_init.FilterScale=CAN_FILTERSCALE_32BIT;
 80023d6:	2301      	movs	r3, #1
 80023d8:	61fb      	str	r3, [r7, #28]
	if(HAL_CAN_ConfigFilter(&hcan,&Can_filter_init)!=HAL_OK)
 80023da:	463b      	mov	r3, r7
 80023dc:	4619      	mov	r1, r3
 80023de:	4806      	ldr	r0, [pc, #24]	; (80023f8 <CAN_Config_filtering+0x48>)
 80023e0:	f7fe fbe1 	bl	8000ba6 <HAL_CAN_ConfigFilter>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <CAN_Config_filtering+0x3e>
	{
		Error_Handler();
 80023ea:	f7fe f8c0 	bl	800056e <Error_Handler>
	}
	return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3728      	adds	r7, #40	; 0x28
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	20000084 	.word	0x20000084

080023fc <isotp_send>:
int isotp_send(IsoTpLink *link, const uint8_t payload[], uint16_t size) {
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	4613      	mov	r3, r2
 8002408:	80fb      	strh	r3, [r7, #6]
    return isotp_send_with_id(link, link->send_arbitration_id, payload, size);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6819      	ldr	r1, [r3, #0]
 800240e:	88fb      	ldrh	r3, [r7, #6]
 8002410:	68ba      	ldr	r2, [r7, #8]
 8002412:	68f8      	ldr	r0, [r7, #12]
 8002414:	f000 f806 	bl	8002424 <isotp_send_with_id>
 8002418:	4603      	mov	r3, r0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
	...

08002424 <isotp_send_with_id>:

int isotp_send_with_id(IsoTpLink *link, uint32_t id, const uint8_t payload[], uint16_t size) {
 8002424:	b580      	push	{r7, lr}
 8002426:	b0a6      	sub	sp, #152	; 0x98
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
 8002430:	807b      	strh	r3, [r7, #2]
    int ret;

    if (link == 0x0) {
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d105      	bne.n	8002444 <isotp_send_with_id+0x20>
        isotp_user_debug("Link is null!");
 8002438:	4833      	ldr	r0, [pc, #204]	; (8002508 <isotp_send_with_id+0xe4>)
 800243a:	f7ff ff7f 	bl	800233c <isotp_user_debug>
        return ISOTP_RET_ERROR;
 800243e:	f04f 33ff 	mov.w	r3, #4294967295
 8002442:	e05d      	b.n	8002500 <isotp_send_with_id+0xdc>
    }

    if (size > link->send_buf_size) {
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	891b      	ldrh	r3, [r3, #8]
 8002448:	887a      	ldrh	r2, [r7, #2]
 800244a:	429a      	cmp	r2, r3
 800244c:	d90d      	bls.n	800246a <isotp_send_with_id+0x46>
        isotp_user_debug("Message size too large. Increase ISO_TP_MAX_MESSAGE_SIZE to set a larger buffer\n");
 800244e:	482f      	ldr	r0, [pc, #188]	; (800250c <isotp_send_with_id+0xe8>)
 8002450:	f7ff ff74 	bl	800233c <isotp_user_debug>
        char message[128];
        sprintf(&message[0], "Attempted to send %d bytes; max size is %d!\n", size, link->send_buf_size);
 8002454:	887a      	ldrh	r2, [r7, #2]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	891b      	ldrh	r3, [r3, #8]
 800245a:	f107 0014 	add.w	r0, r7, #20
 800245e:	492c      	ldr	r1, [pc, #176]	; (8002510 <isotp_send_with_id+0xec>)
 8002460:	f000 f9e0 	bl	8002824 <siprintf>
        return ISOTP_RET_OVERFLOW;
 8002464:	f06f 0302 	mvn.w	r3, #2
 8002468:	e04a      	b.n	8002500 <isotp_send_with_id+0xdc>
    }

    if (ISOTP_SEND_STATUS_INPROGRESS == link->send_status) {
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d105      	bne.n	8002480 <isotp_send_with_id+0x5c>
        isotp_user_debug("Abort previous message, transmission in progress.\n");
 8002474:	4827      	ldr	r0, [pc, #156]	; (8002514 <isotp_send_with_id+0xf0>)
 8002476:	f7ff ff61 	bl	800233c <isotp_user_debug>
        return ISOTP_RET_INPROGRESS;
 800247a:	f06f 0301 	mvn.w	r3, #1
 800247e:	e03f      	b.n	8002500 <isotp_send_with_id+0xdc>
    }

    /* copy into local buffer */
    link->send_size = size;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	887a      	ldrh	r2, [r7, #2]
 8002484:	815a      	strh	r2, [r3, #10]
    link->send_offset = 0;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	819a      	strh	r2, [r3, #12]
    (void) memcpy(link->send_buffer, payload, size);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	887a      	ldrh	r2, [r7, #2]
 8002492:	6879      	ldr	r1, [r7, #4]
 8002494:	4618      	mov	r0, r3
 8002496:	f000 fad0 	bl	8002a3a <memcpy>

    if (link->send_size < 8) {
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	895b      	ldrh	r3, [r3, #10]
 800249e:	2b07      	cmp	r3, #7
 80024a0:	d806      	bhi.n	80024b0 <isotp_send_with_id+0x8c>
        /* send single frame */
        ret = isotp_send_single_frame(link, id);
 80024a2:	68b9      	ldr	r1, [r7, #8]
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	f7ff fead 	bl	8002204 <isotp_send_single_frame>
 80024aa:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 80024ae:	e025      	b.n	80024fc <isotp_send_with_id+0xd8>
    } else {
        /* send multi-frame */
        ret = isotp_send_first_frame(link, id);
 80024b0:	68b9      	ldr	r1, [r7, #8]
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f7ff fef0 	bl	8002298 <isotp_send_first_frame>
 80024b8:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

        /* init multi-frame control flags */
        if (ISOTP_RET_OK == ret) {
 80024bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d11b      	bne.n	80024fc <isotp_send_with_id+0xd8>
            link->send_bs_remain = 0;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2200      	movs	r2, #0
 80024c8:	821a      	strh	r2, [r3, #16]
            link->send_st_min = 0;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	749a      	strb	r2, [r3, #18]
            link->send_wtf_count = 0;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	74da      	strb	r2, [r3, #19]
            link->send_timer_st = isotp_user_get_ms();
 80024d6:	f7ff ff29 	bl	800232c <isotp_user_get_ms>
 80024da:	4602      	mov	r2, r0
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	615a      	str	r2, [r3, #20]
            link->send_timer_bs = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 80024e0:	f7ff ff24 	bl	800232c <isotp_user_get_ms>
 80024e4:	4603      	mov	r3, r0
 80024e6:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	619a      	str	r2, [r3, #24]
            link->send_protocol_result = ISOTP_PROTOCOL_RESULT_OK;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2200      	movs	r2, #0
 80024f2:	61da      	str	r2, [r3, #28]
            link->send_status = ISOTP_SEND_STATUS_INPROGRESS;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2020 	strb.w	r2, [r3, #32]
        }
    }

    return ret;
 80024fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
}
 8002500:	4618      	mov	r0, r3
 8002502:	3798      	adds	r7, #152	; 0x98
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	08003b14 	.word	0x08003b14
 800250c:	08003b24 	.word	0x08003b24
 8002510:	08003b78 	.word	0x08003b78
 8002514:	08003ba8 	.word	0x08003ba8

08002518 <isotp_init_link>:
    link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;

    return ISOTP_RET_OK;
}

void isotp_init_link(IsoTpLink *link, uint32_t sendid, uint8_t *sendbuf, uint16_t sendbufsize, uint8_t *recvbuf, uint16_t recvbufsize) {
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
 8002524:	807b      	strh	r3, [r7, #2]
    memset(link, 0, sizeof(*link));
 8002526:	2240      	movs	r2, #64	; 0x40
 8002528:	2100      	movs	r1, #0
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f000 f9dd 	bl	80028ea <memset>
    link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    link->send_status = ISOTP_SEND_STATUS_IDLE;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 2020 	strb.w	r2, [r3, #32]
    link->send_arbitration_id = sendid;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	601a      	str	r2, [r3, #0]
    link->send_buffer = sendbuf;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	605a      	str	r2, [r3, #4]
    link->send_buf_size = sendbufsize;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	887a      	ldrh	r2, [r7, #2]
 8002550:	811a      	strh	r2, [r3, #8]
    link->receive_buffer = recvbuf;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	629a      	str	r2, [r3, #40]	; 0x28
    link->receive_buf_size = recvbufsize;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8bba      	ldrh	r2, [r7, #28]
 800255c:	859a      	strh	r2, [r3, #44]	; 0x2c
    
    return;
 800255e:	bf00      	nop
}
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
	...

08002568 <__assert_func>:
 8002568:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800256a:	4614      	mov	r4, r2
 800256c:	461a      	mov	r2, r3
 800256e:	4b09      	ldr	r3, [pc, #36]	; (8002594 <__assert_func+0x2c>)
 8002570:	4605      	mov	r5, r0
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68d8      	ldr	r0, [r3, #12]
 8002576:	b14c      	cbz	r4, 800258c <__assert_func+0x24>
 8002578:	4b07      	ldr	r3, [pc, #28]	; (8002598 <__assert_func+0x30>)
 800257a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800257e:	9100      	str	r1, [sp, #0]
 8002580:	462b      	mov	r3, r5
 8002582:	4906      	ldr	r1, [pc, #24]	; (800259c <__assert_func+0x34>)
 8002584:	f000 f91e 	bl	80027c4 <fiprintf>
 8002588:	f000 fa65 	bl	8002a56 <abort>
 800258c:	4b04      	ldr	r3, [pc, #16]	; (80025a0 <__assert_func+0x38>)
 800258e:	461c      	mov	r4, r3
 8002590:	e7f3      	b.n	800257a <__assert_func+0x12>
 8002592:	bf00      	nop
 8002594:	20000064 	.word	0x20000064
 8002598:	08003c37 	.word	0x08003c37
 800259c:	08003c44 	.word	0x08003c44
 80025a0:	08003c72 	.word	0x08003c72

080025a4 <srand>:
 80025a4:	b538      	push	{r3, r4, r5, lr}
 80025a6:	4b10      	ldr	r3, [pc, #64]	; (80025e8 <srand+0x44>)
 80025a8:	4604      	mov	r4, r0
 80025aa:	681d      	ldr	r5, [r3, #0]
 80025ac:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80025ae:	b9b3      	cbnz	r3, 80025de <srand+0x3a>
 80025b0:	2018      	movs	r0, #24
 80025b2:	f000 fa9f 	bl	8002af4 <malloc>
 80025b6:	4602      	mov	r2, r0
 80025b8:	6328      	str	r0, [r5, #48]	; 0x30
 80025ba:	b920      	cbnz	r0, 80025c6 <srand+0x22>
 80025bc:	2146      	movs	r1, #70	; 0x46
 80025be:	4b0b      	ldr	r3, [pc, #44]	; (80025ec <srand+0x48>)
 80025c0:	480b      	ldr	r0, [pc, #44]	; (80025f0 <srand+0x4c>)
 80025c2:	f7ff ffd1 	bl	8002568 <__assert_func>
 80025c6:	490b      	ldr	r1, [pc, #44]	; (80025f4 <srand+0x50>)
 80025c8:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <srand+0x54>)
 80025ca:	e9c0 1300 	strd	r1, r3, [r0]
 80025ce:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <srand+0x58>)
 80025d0:	2100      	movs	r1, #0
 80025d2:	6083      	str	r3, [r0, #8]
 80025d4:	230b      	movs	r3, #11
 80025d6:	8183      	strh	r3, [r0, #12]
 80025d8:	2001      	movs	r0, #1
 80025da:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80025de:	2200      	movs	r2, #0
 80025e0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80025e2:	611c      	str	r4, [r3, #16]
 80025e4:	615a      	str	r2, [r3, #20]
 80025e6:	bd38      	pop	{r3, r4, r5, pc}
 80025e8:	20000064 	.word	0x20000064
 80025ec:	08003c73 	.word	0x08003c73
 80025f0:	08003c8a 	.word	0x08003c8a
 80025f4:	abcd330e 	.word	0xabcd330e
 80025f8:	e66d1234 	.word	0xe66d1234
 80025fc:	0005deec 	.word	0x0005deec

08002600 <rand>:
 8002600:	4b16      	ldr	r3, [pc, #88]	; (800265c <rand+0x5c>)
 8002602:	b510      	push	{r4, lr}
 8002604:	681c      	ldr	r4, [r3, #0]
 8002606:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002608:	b9b3      	cbnz	r3, 8002638 <rand+0x38>
 800260a:	2018      	movs	r0, #24
 800260c:	f000 fa72 	bl	8002af4 <malloc>
 8002610:	4602      	mov	r2, r0
 8002612:	6320      	str	r0, [r4, #48]	; 0x30
 8002614:	b920      	cbnz	r0, 8002620 <rand+0x20>
 8002616:	2152      	movs	r1, #82	; 0x52
 8002618:	4b11      	ldr	r3, [pc, #68]	; (8002660 <rand+0x60>)
 800261a:	4812      	ldr	r0, [pc, #72]	; (8002664 <rand+0x64>)
 800261c:	f7ff ffa4 	bl	8002568 <__assert_func>
 8002620:	4911      	ldr	r1, [pc, #68]	; (8002668 <rand+0x68>)
 8002622:	4b12      	ldr	r3, [pc, #72]	; (800266c <rand+0x6c>)
 8002624:	e9c0 1300 	strd	r1, r3, [r0]
 8002628:	4b11      	ldr	r3, [pc, #68]	; (8002670 <rand+0x70>)
 800262a:	2100      	movs	r1, #0
 800262c:	6083      	str	r3, [r0, #8]
 800262e:	230b      	movs	r3, #11
 8002630:	8183      	strh	r3, [r0, #12]
 8002632:	2001      	movs	r0, #1
 8002634:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8002638:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800263a:	480e      	ldr	r0, [pc, #56]	; (8002674 <rand+0x74>)
 800263c:	690b      	ldr	r3, [r1, #16]
 800263e:	694c      	ldr	r4, [r1, #20]
 8002640:	4358      	muls	r0, r3
 8002642:	4a0d      	ldr	r2, [pc, #52]	; (8002678 <rand+0x78>)
 8002644:	fb02 0004 	mla	r0, r2, r4, r0
 8002648:	fba3 3202 	umull	r3, r2, r3, r2
 800264c:	3301      	adds	r3, #1
 800264e:	eb40 0002 	adc.w	r0, r0, r2
 8002652:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8002656:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800265a:	bd10      	pop	{r4, pc}
 800265c:	20000064 	.word	0x20000064
 8002660:	08003c73 	.word	0x08003c73
 8002664:	08003c8a 	.word	0x08003c8a
 8002668:	abcd330e 	.word	0xabcd330e
 800266c:	e66d1234 	.word	0xe66d1234
 8002670:	0005deec 	.word	0x0005deec
 8002674:	5851f42d 	.word	0x5851f42d
 8002678:	4c957f2d 	.word	0x4c957f2d

0800267c <std>:
 800267c:	2300      	movs	r3, #0
 800267e:	b510      	push	{r4, lr}
 8002680:	4604      	mov	r4, r0
 8002682:	e9c0 3300 	strd	r3, r3, [r0]
 8002686:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800268a:	6083      	str	r3, [r0, #8]
 800268c:	8181      	strh	r1, [r0, #12]
 800268e:	6643      	str	r3, [r0, #100]	; 0x64
 8002690:	81c2      	strh	r2, [r0, #14]
 8002692:	6183      	str	r3, [r0, #24]
 8002694:	4619      	mov	r1, r3
 8002696:	2208      	movs	r2, #8
 8002698:	305c      	adds	r0, #92	; 0x5c
 800269a:	f000 f926 	bl	80028ea <memset>
 800269e:	4b0d      	ldr	r3, [pc, #52]	; (80026d4 <std+0x58>)
 80026a0:	6224      	str	r4, [r4, #32]
 80026a2:	6263      	str	r3, [r4, #36]	; 0x24
 80026a4:	4b0c      	ldr	r3, [pc, #48]	; (80026d8 <std+0x5c>)
 80026a6:	62a3      	str	r3, [r4, #40]	; 0x28
 80026a8:	4b0c      	ldr	r3, [pc, #48]	; (80026dc <std+0x60>)
 80026aa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80026ac:	4b0c      	ldr	r3, [pc, #48]	; (80026e0 <std+0x64>)
 80026ae:	6323      	str	r3, [r4, #48]	; 0x30
 80026b0:	4b0c      	ldr	r3, [pc, #48]	; (80026e4 <std+0x68>)
 80026b2:	429c      	cmp	r4, r3
 80026b4:	d006      	beq.n	80026c4 <std+0x48>
 80026b6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80026ba:	4294      	cmp	r4, r2
 80026bc:	d002      	beq.n	80026c4 <std+0x48>
 80026be:	33d0      	adds	r3, #208	; 0xd0
 80026c0:	429c      	cmp	r4, r3
 80026c2:	d105      	bne.n	80026d0 <std+0x54>
 80026c4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80026c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026cc:	f000 b9b2 	b.w	8002a34 <__retarget_lock_init_recursive>
 80026d0:	bd10      	pop	{r4, pc}
 80026d2:	bf00      	nop
 80026d4:	08002865 	.word	0x08002865
 80026d8:	08002887 	.word	0x08002887
 80026dc:	080028bf 	.word	0x080028bf
 80026e0:	080028e3 	.word	0x080028e3
 80026e4:	200001a8 	.word	0x200001a8

080026e8 <stdio_exit_handler>:
 80026e8:	4a02      	ldr	r2, [pc, #8]	; (80026f4 <stdio_exit_handler+0xc>)
 80026ea:	4903      	ldr	r1, [pc, #12]	; (80026f8 <stdio_exit_handler+0x10>)
 80026ec:	4803      	ldr	r0, [pc, #12]	; (80026fc <stdio_exit_handler+0x14>)
 80026ee:	f000 b87b 	b.w	80027e8 <_fwalk_sglue>
 80026f2:	bf00      	nop
 80026f4:	2000000c 	.word	0x2000000c
 80026f8:	080035bd 	.word	0x080035bd
 80026fc:	20000018 	.word	0x20000018

08002700 <cleanup_stdio>:
 8002700:	6841      	ldr	r1, [r0, #4]
 8002702:	4b0c      	ldr	r3, [pc, #48]	; (8002734 <cleanup_stdio+0x34>)
 8002704:	b510      	push	{r4, lr}
 8002706:	4299      	cmp	r1, r3
 8002708:	4604      	mov	r4, r0
 800270a:	d001      	beq.n	8002710 <cleanup_stdio+0x10>
 800270c:	f000 ff56 	bl	80035bc <_fflush_r>
 8002710:	68a1      	ldr	r1, [r4, #8]
 8002712:	4b09      	ldr	r3, [pc, #36]	; (8002738 <cleanup_stdio+0x38>)
 8002714:	4299      	cmp	r1, r3
 8002716:	d002      	beq.n	800271e <cleanup_stdio+0x1e>
 8002718:	4620      	mov	r0, r4
 800271a:	f000 ff4f 	bl	80035bc <_fflush_r>
 800271e:	68e1      	ldr	r1, [r4, #12]
 8002720:	4b06      	ldr	r3, [pc, #24]	; (800273c <cleanup_stdio+0x3c>)
 8002722:	4299      	cmp	r1, r3
 8002724:	d004      	beq.n	8002730 <cleanup_stdio+0x30>
 8002726:	4620      	mov	r0, r4
 8002728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800272c:	f000 bf46 	b.w	80035bc <_fflush_r>
 8002730:	bd10      	pop	{r4, pc}
 8002732:	bf00      	nop
 8002734:	200001a8 	.word	0x200001a8
 8002738:	20000210 	.word	0x20000210
 800273c:	20000278 	.word	0x20000278

08002740 <global_stdio_init.part.0>:
 8002740:	b510      	push	{r4, lr}
 8002742:	4b0b      	ldr	r3, [pc, #44]	; (8002770 <global_stdio_init.part.0+0x30>)
 8002744:	4c0b      	ldr	r4, [pc, #44]	; (8002774 <global_stdio_init.part.0+0x34>)
 8002746:	4a0c      	ldr	r2, [pc, #48]	; (8002778 <global_stdio_init.part.0+0x38>)
 8002748:	4620      	mov	r0, r4
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	2104      	movs	r1, #4
 800274e:	2200      	movs	r2, #0
 8002750:	f7ff ff94 	bl	800267c <std>
 8002754:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002758:	2201      	movs	r2, #1
 800275a:	2109      	movs	r1, #9
 800275c:	f7ff ff8e 	bl	800267c <std>
 8002760:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002764:	2202      	movs	r2, #2
 8002766:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800276a:	2112      	movs	r1, #18
 800276c:	f7ff bf86 	b.w	800267c <std>
 8002770:	200002e0 	.word	0x200002e0
 8002774:	200001a8 	.word	0x200001a8
 8002778:	080026e9 	.word	0x080026e9

0800277c <__sfp_lock_acquire>:
 800277c:	4801      	ldr	r0, [pc, #4]	; (8002784 <__sfp_lock_acquire+0x8>)
 800277e:	f000 b95a 	b.w	8002a36 <__retarget_lock_acquire_recursive>
 8002782:	bf00      	nop
 8002784:	200002e9 	.word	0x200002e9

08002788 <__sfp_lock_release>:
 8002788:	4801      	ldr	r0, [pc, #4]	; (8002790 <__sfp_lock_release+0x8>)
 800278a:	f000 b955 	b.w	8002a38 <__retarget_lock_release_recursive>
 800278e:	bf00      	nop
 8002790:	200002e9 	.word	0x200002e9

08002794 <__sinit>:
 8002794:	b510      	push	{r4, lr}
 8002796:	4604      	mov	r4, r0
 8002798:	f7ff fff0 	bl	800277c <__sfp_lock_acquire>
 800279c:	6a23      	ldr	r3, [r4, #32]
 800279e:	b11b      	cbz	r3, 80027a8 <__sinit+0x14>
 80027a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027a4:	f7ff bff0 	b.w	8002788 <__sfp_lock_release>
 80027a8:	4b04      	ldr	r3, [pc, #16]	; (80027bc <__sinit+0x28>)
 80027aa:	6223      	str	r3, [r4, #32]
 80027ac:	4b04      	ldr	r3, [pc, #16]	; (80027c0 <__sinit+0x2c>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1f5      	bne.n	80027a0 <__sinit+0xc>
 80027b4:	f7ff ffc4 	bl	8002740 <global_stdio_init.part.0>
 80027b8:	e7f2      	b.n	80027a0 <__sinit+0xc>
 80027ba:	bf00      	nop
 80027bc:	08002701 	.word	0x08002701
 80027c0:	200002e0 	.word	0x200002e0

080027c4 <fiprintf>:
 80027c4:	b40e      	push	{r1, r2, r3}
 80027c6:	b503      	push	{r0, r1, lr}
 80027c8:	4601      	mov	r1, r0
 80027ca:	ab03      	add	r3, sp, #12
 80027cc:	4805      	ldr	r0, [pc, #20]	; (80027e4 <fiprintf+0x20>)
 80027ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80027d2:	6800      	ldr	r0, [r0, #0]
 80027d4:	9301      	str	r3, [sp, #4]
 80027d6:	f000 fbc1 	bl	8002f5c <_vfiprintf_r>
 80027da:	b002      	add	sp, #8
 80027dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80027e0:	b003      	add	sp, #12
 80027e2:	4770      	bx	lr
 80027e4:	20000064 	.word	0x20000064

080027e8 <_fwalk_sglue>:
 80027e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80027ec:	4607      	mov	r7, r0
 80027ee:	4688      	mov	r8, r1
 80027f0:	4614      	mov	r4, r2
 80027f2:	2600      	movs	r6, #0
 80027f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80027f8:	f1b9 0901 	subs.w	r9, r9, #1
 80027fc:	d505      	bpl.n	800280a <_fwalk_sglue+0x22>
 80027fe:	6824      	ldr	r4, [r4, #0]
 8002800:	2c00      	cmp	r4, #0
 8002802:	d1f7      	bne.n	80027f4 <_fwalk_sglue+0xc>
 8002804:	4630      	mov	r0, r6
 8002806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800280a:	89ab      	ldrh	r3, [r5, #12]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d907      	bls.n	8002820 <_fwalk_sglue+0x38>
 8002810:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002814:	3301      	adds	r3, #1
 8002816:	d003      	beq.n	8002820 <_fwalk_sglue+0x38>
 8002818:	4629      	mov	r1, r5
 800281a:	4638      	mov	r0, r7
 800281c:	47c0      	blx	r8
 800281e:	4306      	orrs	r6, r0
 8002820:	3568      	adds	r5, #104	; 0x68
 8002822:	e7e9      	b.n	80027f8 <_fwalk_sglue+0x10>

08002824 <siprintf>:
 8002824:	b40e      	push	{r1, r2, r3}
 8002826:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800282a:	b500      	push	{lr}
 800282c:	b09c      	sub	sp, #112	; 0x70
 800282e:	ab1d      	add	r3, sp, #116	; 0x74
 8002830:	9002      	str	r0, [sp, #8]
 8002832:	9006      	str	r0, [sp, #24]
 8002834:	9107      	str	r1, [sp, #28]
 8002836:	9104      	str	r1, [sp, #16]
 8002838:	4808      	ldr	r0, [pc, #32]	; (800285c <siprintf+0x38>)
 800283a:	4909      	ldr	r1, [pc, #36]	; (8002860 <siprintf+0x3c>)
 800283c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002840:	9105      	str	r1, [sp, #20]
 8002842:	6800      	ldr	r0, [r0, #0]
 8002844:	a902      	add	r1, sp, #8
 8002846:	9301      	str	r3, [sp, #4]
 8002848:	f000 fa62 	bl	8002d10 <_svfiprintf_r>
 800284c:	2200      	movs	r2, #0
 800284e:	9b02      	ldr	r3, [sp, #8]
 8002850:	701a      	strb	r2, [r3, #0]
 8002852:	b01c      	add	sp, #112	; 0x70
 8002854:	f85d eb04 	ldr.w	lr, [sp], #4
 8002858:	b003      	add	sp, #12
 800285a:	4770      	bx	lr
 800285c:	20000064 	.word	0x20000064
 8002860:	ffff0208 	.word	0xffff0208

08002864 <__sread>:
 8002864:	b510      	push	{r4, lr}
 8002866:	460c      	mov	r4, r1
 8002868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800286c:	f000 f894 	bl	8002998 <_read_r>
 8002870:	2800      	cmp	r0, #0
 8002872:	bfab      	itete	ge
 8002874:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002876:	89a3      	ldrhlt	r3, [r4, #12]
 8002878:	181b      	addge	r3, r3, r0
 800287a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800287e:	bfac      	ite	ge
 8002880:	6563      	strge	r3, [r4, #84]	; 0x54
 8002882:	81a3      	strhlt	r3, [r4, #12]
 8002884:	bd10      	pop	{r4, pc}

08002886 <__swrite>:
 8002886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800288a:	461f      	mov	r7, r3
 800288c:	898b      	ldrh	r3, [r1, #12]
 800288e:	4605      	mov	r5, r0
 8002890:	05db      	lsls	r3, r3, #23
 8002892:	460c      	mov	r4, r1
 8002894:	4616      	mov	r6, r2
 8002896:	d505      	bpl.n	80028a4 <__swrite+0x1e>
 8002898:	2302      	movs	r3, #2
 800289a:	2200      	movs	r2, #0
 800289c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028a0:	f000 f868 	bl	8002974 <_lseek_r>
 80028a4:	89a3      	ldrh	r3, [r4, #12]
 80028a6:	4632      	mov	r2, r6
 80028a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028ac:	81a3      	strh	r3, [r4, #12]
 80028ae:	4628      	mov	r0, r5
 80028b0:	463b      	mov	r3, r7
 80028b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80028b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80028ba:	f000 b87f 	b.w	80029bc <_write_r>

080028be <__sseek>:
 80028be:	b510      	push	{r4, lr}
 80028c0:	460c      	mov	r4, r1
 80028c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028c6:	f000 f855 	bl	8002974 <_lseek_r>
 80028ca:	1c43      	adds	r3, r0, #1
 80028cc:	89a3      	ldrh	r3, [r4, #12]
 80028ce:	bf15      	itete	ne
 80028d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80028d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80028d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80028da:	81a3      	strheq	r3, [r4, #12]
 80028dc:	bf18      	it	ne
 80028de:	81a3      	strhne	r3, [r4, #12]
 80028e0:	bd10      	pop	{r4, pc}

080028e2 <__sclose>:
 80028e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028e6:	f000 b823 	b.w	8002930 <_close_r>

080028ea <memset>:
 80028ea:	4603      	mov	r3, r0
 80028ec:	4402      	add	r2, r0
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d100      	bne.n	80028f4 <memset+0xa>
 80028f2:	4770      	bx	lr
 80028f4:	f803 1b01 	strb.w	r1, [r3], #1
 80028f8:	e7f9      	b.n	80028ee <memset+0x4>
	...

080028fc <time>:
 80028fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80028fe:	4b0b      	ldr	r3, [pc, #44]	; (800292c <time+0x30>)
 8002900:	4604      	mov	r4, r0
 8002902:	2200      	movs	r2, #0
 8002904:	4669      	mov	r1, sp
 8002906:	6818      	ldr	r0, [r3, #0]
 8002908:	f000 f822 	bl	8002950 <_gettimeofday_r>
 800290c:	2800      	cmp	r0, #0
 800290e:	da05      	bge.n	800291c <time+0x20>
 8002910:	f04f 32ff 	mov.w	r2, #4294967295
 8002914:	f04f 33ff 	mov.w	r3, #4294967295
 8002918:	e9cd 2300 	strd	r2, r3, [sp]
 800291c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002920:	b10c      	cbz	r4, 8002926 <time+0x2a>
 8002922:	e9c4 0100 	strd	r0, r1, [r4]
 8002926:	b004      	add	sp, #16
 8002928:	bd10      	pop	{r4, pc}
 800292a:	bf00      	nop
 800292c:	20000064 	.word	0x20000064

08002930 <_close_r>:
 8002930:	b538      	push	{r3, r4, r5, lr}
 8002932:	2300      	movs	r3, #0
 8002934:	4d05      	ldr	r5, [pc, #20]	; (800294c <_close_r+0x1c>)
 8002936:	4604      	mov	r4, r0
 8002938:	4608      	mov	r0, r1
 800293a:	602b      	str	r3, [r5, #0]
 800293c:	f7fd fecf 	bl	80006de <_close>
 8002940:	1c43      	adds	r3, r0, #1
 8002942:	d102      	bne.n	800294a <_close_r+0x1a>
 8002944:	682b      	ldr	r3, [r5, #0]
 8002946:	b103      	cbz	r3, 800294a <_close_r+0x1a>
 8002948:	6023      	str	r3, [r4, #0]
 800294a:	bd38      	pop	{r3, r4, r5, pc}
 800294c:	200002e4 	.word	0x200002e4

08002950 <_gettimeofday_r>:
 8002950:	b538      	push	{r3, r4, r5, lr}
 8002952:	2300      	movs	r3, #0
 8002954:	4d06      	ldr	r5, [pc, #24]	; (8002970 <_gettimeofday_r+0x20>)
 8002956:	4604      	mov	r4, r0
 8002958:	4608      	mov	r0, r1
 800295a:	4611      	mov	r1, r2
 800295c:	602b      	str	r3, [r5, #0]
 800295e:	f001 f821 	bl	80039a4 <_gettimeofday>
 8002962:	1c43      	adds	r3, r0, #1
 8002964:	d102      	bne.n	800296c <_gettimeofday_r+0x1c>
 8002966:	682b      	ldr	r3, [r5, #0]
 8002968:	b103      	cbz	r3, 800296c <_gettimeofday_r+0x1c>
 800296a:	6023      	str	r3, [r4, #0]
 800296c:	bd38      	pop	{r3, r4, r5, pc}
 800296e:	bf00      	nop
 8002970:	200002e4 	.word	0x200002e4

08002974 <_lseek_r>:
 8002974:	b538      	push	{r3, r4, r5, lr}
 8002976:	4604      	mov	r4, r0
 8002978:	4608      	mov	r0, r1
 800297a:	4611      	mov	r1, r2
 800297c:	2200      	movs	r2, #0
 800297e:	4d05      	ldr	r5, [pc, #20]	; (8002994 <_lseek_r+0x20>)
 8002980:	602a      	str	r2, [r5, #0]
 8002982:	461a      	mov	r2, r3
 8002984:	f7fd fecf 	bl	8000726 <_lseek>
 8002988:	1c43      	adds	r3, r0, #1
 800298a:	d102      	bne.n	8002992 <_lseek_r+0x1e>
 800298c:	682b      	ldr	r3, [r5, #0]
 800298e:	b103      	cbz	r3, 8002992 <_lseek_r+0x1e>
 8002990:	6023      	str	r3, [r4, #0]
 8002992:	bd38      	pop	{r3, r4, r5, pc}
 8002994:	200002e4 	.word	0x200002e4

08002998 <_read_r>:
 8002998:	b538      	push	{r3, r4, r5, lr}
 800299a:	4604      	mov	r4, r0
 800299c:	4608      	mov	r0, r1
 800299e:	4611      	mov	r1, r2
 80029a0:	2200      	movs	r2, #0
 80029a2:	4d05      	ldr	r5, [pc, #20]	; (80029b8 <_read_r+0x20>)
 80029a4:	602a      	str	r2, [r5, #0]
 80029a6:	461a      	mov	r2, r3
 80029a8:	f7fd fe60 	bl	800066c <_read>
 80029ac:	1c43      	adds	r3, r0, #1
 80029ae:	d102      	bne.n	80029b6 <_read_r+0x1e>
 80029b0:	682b      	ldr	r3, [r5, #0]
 80029b2:	b103      	cbz	r3, 80029b6 <_read_r+0x1e>
 80029b4:	6023      	str	r3, [r4, #0]
 80029b6:	bd38      	pop	{r3, r4, r5, pc}
 80029b8:	200002e4 	.word	0x200002e4

080029bc <_write_r>:
 80029bc:	b538      	push	{r3, r4, r5, lr}
 80029be:	4604      	mov	r4, r0
 80029c0:	4608      	mov	r0, r1
 80029c2:	4611      	mov	r1, r2
 80029c4:	2200      	movs	r2, #0
 80029c6:	4d05      	ldr	r5, [pc, #20]	; (80029dc <_write_r+0x20>)
 80029c8:	602a      	str	r2, [r5, #0]
 80029ca:	461a      	mov	r2, r3
 80029cc:	f7fd fe6b 	bl	80006a6 <_write>
 80029d0:	1c43      	adds	r3, r0, #1
 80029d2:	d102      	bne.n	80029da <_write_r+0x1e>
 80029d4:	682b      	ldr	r3, [r5, #0]
 80029d6:	b103      	cbz	r3, 80029da <_write_r+0x1e>
 80029d8:	6023      	str	r3, [r4, #0]
 80029da:	bd38      	pop	{r3, r4, r5, pc}
 80029dc:	200002e4 	.word	0x200002e4

080029e0 <__errno>:
 80029e0:	4b01      	ldr	r3, [pc, #4]	; (80029e8 <__errno+0x8>)
 80029e2:	6818      	ldr	r0, [r3, #0]
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	20000064 	.word	0x20000064

080029ec <__libc_init_array>:
 80029ec:	b570      	push	{r4, r5, r6, lr}
 80029ee:	2600      	movs	r6, #0
 80029f0:	4d0c      	ldr	r5, [pc, #48]	; (8002a24 <__libc_init_array+0x38>)
 80029f2:	4c0d      	ldr	r4, [pc, #52]	; (8002a28 <__libc_init_array+0x3c>)
 80029f4:	1b64      	subs	r4, r4, r5
 80029f6:	10a4      	asrs	r4, r4, #2
 80029f8:	42a6      	cmp	r6, r4
 80029fa:	d109      	bne.n	8002a10 <__libc_init_array+0x24>
 80029fc:	f000 ffda 	bl	80039b4 <_init>
 8002a00:	2600      	movs	r6, #0
 8002a02:	4d0a      	ldr	r5, [pc, #40]	; (8002a2c <__libc_init_array+0x40>)
 8002a04:	4c0a      	ldr	r4, [pc, #40]	; (8002a30 <__libc_init_array+0x44>)
 8002a06:	1b64      	subs	r4, r4, r5
 8002a08:	10a4      	asrs	r4, r4, #2
 8002a0a:	42a6      	cmp	r6, r4
 8002a0c:	d105      	bne.n	8002a1a <__libc_init_array+0x2e>
 8002a0e:	bd70      	pop	{r4, r5, r6, pc}
 8002a10:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a14:	4798      	blx	r3
 8002a16:	3601      	adds	r6, #1
 8002a18:	e7ee      	b.n	80029f8 <__libc_init_array+0xc>
 8002a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a1e:	4798      	blx	r3
 8002a20:	3601      	adds	r6, #1
 8002a22:	e7f2      	b.n	8002a0a <__libc_init_array+0x1e>
 8002a24:	08003d18 	.word	0x08003d18
 8002a28:	08003d18 	.word	0x08003d18
 8002a2c:	08003d18 	.word	0x08003d18
 8002a30:	08003d1c 	.word	0x08003d1c

08002a34 <__retarget_lock_init_recursive>:
 8002a34:	4770      	bx	lr

08002a36 <__retarget_lock_acquire_recursive>:
 8002a36:	4770      	bx	lr

08002a38 <__retarget_lock_release_recursive>:
 8002a38:	4770      	bx	lr

08002a3a <memcpy>:
 8002a3a:	440a      	add	r2, r1
 8002a3c:	4291      	cmp	r1, r2
 8002a3e:	f100 33ff 	add.w	r3, r0, #4294967295
 8002a42:	d100      	bne.n	8002a46 <memcpy+0xc>
 8002a44:	4770      	bx	lr
 8002a46:	b510      	push	{r4, lr}
 8002a48:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002a4c:	4291      	cmp	r1, r2
 8002a4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002a52:	d1f9      	bne.n	8002a48 <memcpy+0xe>
 8002a54:	bd10      	pop	{r4, pc}

08002a56 <abort>:
 8002a56:	2006      	movs	r0, #6
 8002a58:	b508      	push	{r3, lr}
 8002a5a:	f000 feaf 	bl	80037bc <raise>
 8002a5e:	2001      	movs	r0, #1
 8002a60:	f7fd fdfa 	bl	8000658 <_exit>

08002a64 <_free_r>:
 8002a64:	b538      	push	{r3, r4, r5, lr}
 8002a66:	4605      	mov	r5, r0
 8002a68:	2900      	cmp	r1, #0
 8002a6a:	d040      	beq.n	8002aee <_free_r+0x8a>
 8002a6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a70:	1f0c      	subs	r4, r1, #4
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	bfb8      	it	lt
 8002a76:	18e4      	addlt	r4, r4, r3
 8002a78:	f000 f8e4 	bl	8002c44 <__malloc_lock>
 8002a7c:	4a1c      	ldr	r2, [pc, #112]	; (8002af0 <_free_r+0x8c>)
 8002a7e:	6813      	ldr	r3, [r2, #0]
 8002a80:	b933      	cbnz	r3, 8002a90 <_free_r+0x2c>
 8002a82:	6063      	str	r3, [r4, #4]
 8002a84:	6014      	str	r4, [r2, #0]
 8002a86:	4628      	mov	r0, r5
 8002a88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002a8c:	f000 b8e0 	b.w	8002c50 <__malloc_unlock>
 8002a90:	42a3      	cmp	r3, r4
 8002a92:	d908      	bls.n	8002aa6 <_free_r+0x42>
 8002a94:	6820      	ldr	r0, [r4, #0]
 8002a96:	1821      	adds	r1, r4, r0
 8002a98:	428b      	cmp	r3, r1
 8002a9a:	bf01      	itttt	eq
 8002a9c:	6819      	ldreq	r1, [r3, #0]
 8002a9e:	685b      	ldreq	r3, [r3, #4]
 8002aa0:	1809      	addeq	r1, r1, r0
 8002aa2:	6021      	streq	r1, [r4, #0]
 8002aa4:	e7ed      	b.n	8002a82 <_free_r+0x1e>
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	b10b      	cbz	r3, 8002ab0 <_free_r+0x4c>
 8002aac:	42a3      	cmp	r3, r4
 8002aae:	d9fa      	bls.n	8002aa6 <_free_r+0x42>
 8002ab0:	6811      	ldr	r1, [r2, #0]
 8002ab2:	1850      	adds	r0, r2, r1
 8002ab4:	42a0      	cmp	r0, r4
 8002ab6:	d10b      	bne.n	8002ad0 <_free_r+0x6c>
 8002ab8:	6820      	ldr	r0, [r4, #0]
 8002aba:	4401      	add	r1, r0
 8002abc:	1850      	adds	r0, r2, r1
 8002abe:	4283      	cmp	r3, r0
 8002ac0:	6011      	str	r1, [r2, #0]
 8002ac2:	d1e0      	bne.n	8002a86 <_free_r+0x22>
 8002ac4:	6818      	ldr	r0, [r3, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	4408      	add	r0, r1
 8002aca:	6010      	str	r0, [r2, #0]
 8002acc:	6053      	str	r3, [r2, #4]
 8002ace:	e7da      	b.n	8002a86 <_free_r+0x22>
 8002ad0:	d902      	bls.n	8002ad8 <_free_r+0x74>
 8002ad2:	230c      	movs	r3, #12
 8002ad4:	602b      	str	r3, [r5, #0]
 8002ad6:	e7d6      	b.n	8002a86 <_free_r+0x22>
 8002ad8:	6820      	ldr	r0, [r4, #0]
 8002ada:	1821      	adds	r1, r4, r0
 8002adc:	428b      	cmp	r3, r1
 8002ade:	bf01      	itttt	eq
 8002ae0:	6819      	ldreq	r1, [r3, #0]
 8002ae2:	685b      	ldreq	r3, [r3, #4]
 8002ae4:	1809      	addeq	r1, r1, r0
 8002ae6:	6021      	streq	r1, [r4, #0]
 8002ae8:	6063      	str	r3, [r4, #4]
 8002aea:	6054      	str	r4, [r2, #4]
 8002aec:	e7cb      	b.n	8002a86 <_free_r+0x22>
 8002aee:	bd38      	pop	{r3, r4, r5, pc}
 8002af0:	200002ec 	.word	0x200002ec

08002af4 <malloc>:
 8002af4:	4b02      	ldr	r3, [pc, #8]	; (8002b00 <malloc+0xc>)
 8002af6:	4601      	mov	r1, r0
 8002af8:	6818      	ldr	r0, [r3, #0]
 8002afa:	f000 b823 	b.w	8002b44 <_malloc_r>
 8002afe:	bf00      	nop
 8002b00:	20000064 	.word	0x20000064

08002b04 <sbrk_aligned>:
 8002b04:	b570      	push	{r4, r5, r6, lr}
 8002b06:	4e0e      	ldr	r6, [pc, #56]	; (8002b40 <sbrk_aligned+0x3c>)
 8002b08:	460c      	mov	r4, r1
 8002b0a:	6831      	ldr	r1, [r6, #0]
 8002b0c:	4605      	mov	r5, r0
 8002b0e:	b911      	cbnz	r1, 8002b16 <sbrk_aligned+0x12>
 8002b10:	f000 fe70 	bl	80037f4 <_sbrk_r>
 8002b14:	6030      	str	r0, [r6, #0]
 8002b16:	4621      	mov	r1, r4
 8002b18:	4628      	mov	r0, r5
 8002b1a:	f000 fe6b 	bl	80037f4 <_sbrk_r>
 8002b1e:	1c43      	adds	r3, r0, #1
 8002b20:	d00a      	beq.n	8002b38 <sbrk_aligned+0x34>
 8002b22:	1cc4      	adds	r4, r0, #3
 8002b24:	f024 0403 	bic.w	r4, r4, #3
 8002b28:	42a0      	cmp	r0, r4
 8002b2a:	d007      	beq.n	8002b3c <sbrk_aligned+0x38>
 8002b2c:	1a21      	subs	r1, r4, r0
 8002b2e:	4628      	mov	r0, r5
 8002b30:	f000 fe60 	bl	80037f4 <_sbrk_r>
 8002b34:	3001      	adds	r0, #1
 8002b36:	d101      	bne.n	8002b3c <sbrk_aligned+0x38>
 8002b38:	f04f 34ff 	mov.w	r4, #4294967295
 8002b3c:	4620      	mov	r0, r4
 8002b3e:	bd70      	pop	{r4, r5, r6, pc}
 8002b40:	200002f0 	.word	0x200002f0

08002b44 <_malloc_r>:
 8002b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b48:	1ccd      	adds	r5, r1, #3
 8002b4a:	f025 0503 	bic.w	r5, r5, #3
 8002b4e:	3508      	adds	r5, #8
 8002b50:	2d0c      	cmp	r5, #12
 8002b52:	bf38      	it	cc
 8002b54:	250c      	movcc	r5, #12
 8002b56:	2d00      	cmp	r5, #0
 8002b58:	4607      	mov	r7, r0
 8002b5a:	db01      	blt.n	8002b60 <_malloc_r+0x1c>
 8002b5c:	42a9      	cmp	r1, r5
 8002b5e:	d905      	bls.n	8002b6c <_malloc_r+0x28>
 8002b60:	230c      	movs	r3, #12
 8002b62:	2600      	movs	r6, #0
 8002b64:	603b      	str	r3, [r7, #0]
 8002b66:	4630      	mov	r0, r6
 8002b68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b6c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002c40 <_malloc_r+0xfc>
 8002b70:	f000 f868 	bl	8002c44 <__malloc_lock>
 8002b74:	f8d8 3000 	ldr.w	r3, [r8]
 8002b78:	461c      	mov	r4, r3
 8002b7a:	bb5c      	cbnz	r4, 8002bd4 <_malloc_r+0x90>
 8002b7c:	4629      	mov	r1, r5
 8002b7e:	4638      	mov	r0, r7
 8002b80:	f7ff ffc0 	bl	8002b04 <sbrk_aligned>
 8002b84:	1c43      	adds	r3, r0, #1
 8002b86:	4604      	mov	r4, r0
 8002b88:	d155      	bne.n	8002c36 <_malloc_r+0xf2>
 8002b8a:	f8d8 4000 	ldr.w	r4, [r8]
 8002b8e:	4626      	mov	r6, r4
 8002b90:	2e00      	cmp	r6, #0
 8002b92:	d145      	bne.n	8002c20 <_malloc_r+0xdc>
 8002b94:	2c00      	cmp	r4, #0
 8002b96:	d048      	beq.n	8002c2a <_malloc_r+0xe6>
 8002b98:	6823      	ldr	r3, [r4, #0]
 8002b9a:	4631      	mov	r1, r6
 8002b9c:	4638      	mov	r0, r7
 8002b9e:	eb04 0903 	add.w	r9, r4, r3
 8002ba2:	f000 fe27 	bl	80037f4 <_sbrk_r>
 8002ba6:	4581      	cmp	r9, r0
 8002ba8:	d13f      	bne.n	8002c2a <_malloc_r+0xe6>
 8002baa:	6821      	ldr	r1, [r4, #0]
 8002bac:	4638      	mov	r0, r7
 8002bae:	1a6d      	subs	r5, r5, r1
 8002bb0:	4629      	mov	r1, r5
 8002bb2:	f7ff ffa7 	bl	8002b04 <sbrk_aligned>
 8002bb6:	3001      	adds	r0, #1
 8002bb8:	d037      	beq.n	8002c2a <_malloc_r+0xe6>
 8002bba:	6823      	ldr	r3, [r4, #0]
 8002bbc:	442b      	add	r3, r5
 8002bbe:	6023      	str	r3, [r4, #0]
 8002bc0:	f8d8 3000 	ldr.w	r3, [r8]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d038      	beq.n	8002c3a <_malloc_r+0xf6>
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	42a2      	cmp	r2, r4
 8002bcc:	d12b      	bne.n	8002c26 <_malloc_r+0xe2>
 8002bce:	2200      	movs	r2, #0
 8002bd0:	605a      	str	r2, [r3, #4]
 8002bd2:	e00f      	b.n	8002bf4 <_malloc_r+0xb0>
 8002bd4:	6822      	ldr	r2, [r4, #0]
 8002bd6:	1b52      	subs	r2, r2, r5
 8002bd8:	d41f      	bmi.n	8002c1a <_malloc_r+0xd6>
 8002bda:	2a0b      	cmp	r2, #11
 8002bdc:	d917      	bls.n	8002c0e <_malloc_r+0xca>
 8002bde:	1961      	adds	r1, r4, r5
 8002be0:	42a3      	cmp	r3, r4
 8002be2:	6025      	str	r5, [r4, #0]
 8002be4:	bf18      	it	ne
 8002be6:	6059      	strne	r1, [r3, #4]
 8002be8:	6863      	ldr	r3, [r4, #4]
 8002bea:	bf08      	it	eq
 8002bec:	f8c8 1000 	streq.w	r1, [r8]
 8002bf0:	5162      	str	r2, [r4, r5]
 8002bf2:	604b      	str	r3, [r1, #4]
 8002bf4:	4638      	mov	r0, r7
 8002bf6:	f104 060b 	add.w	r6, r4, #11
 8002bfa:	f000 f829 	bl	8002c50 <__malloc_unlock>
 8002bfe:	f026 0607 	bic.w	r6, r6, #7
 8002c02:	1d23      	adds	r3, r4, #4
 8002c04:	1af2      	subs	r2, r6, r3
 8002c06:	d0ae      	beq.n	8002b66 <_malloc_r+0x22>
 8002c08:	1b9b      	subs	r3, r3, r6
 8002c0a:	50a3      	str	r3, [r4, r2]
 8002c0c:	e7ab      	b.n	8002b66 <_malloc_r+0x22>
 8002c0e:	42a3      	cmp	r3, r4
 8002c10:	6862      	ldr	r2, [r4, #4]
 8002c12:	d1dd      	bne.n	8002bd0 <_malloc_r+0x8c>
 8002c14:	f8c8 2000 	str.w	r2, [r8]
 8002c18:	e7ec      	b.n	8002bf4 <_malloc_r+0xb0>
 8002c1a:	4623      	mov	r3, r4
 8002c1c:	6864      	ldr	r4, [r4, #4]
 8002c1e:	e7ac      	b.n	8002b7a <_malloc_r+0x36>
 8002c20:	4634      	mov	r4, r6
 8002c22:	6876      	ldr	r6, [r6, #4]
 8002c24:	e7b4      	b.n	8002b90 <_malloc_r+0x4c>
 8002c26:	4613      	mov	r3, r2
 8002c28:	e7cc      	b.n	8002bc4 <_malloc_r+0x80>
 8002c2a:	230c      	movs	r3, #12
 8002c2c:	4638      	mov	r0, r7
 8002c2e:	603b      	str	r3, [r7, #0]
 8002c30:	f000 f80e 	bl	8002c50 <__malloc_unlock>
 8002c34:	e797      	b.n	8002b66 <_malloc_r+0x22>
 8002c36:	6025      	str	r5, [r4, #0]
 8002c38:	e7dc      	b.n	8002bf4 <_malloc_r+0xb0>
 8002c3a:	605b      	str	r3, [r3, #4]
 8002c3c:	deff      	udf	#255	; 0xff
 8002c3e:	bf00      	nop
 8002c40:	200002ec 	.word	0x200002ec

08002c44 <__malloc_lock>:
 8002c44:	4801      	ldr	r0, [pc, #4]	; (8002c4c <__malloc_lock+0x8>)
 8002c46:	f7ff bef6 	b.w	8002a36 <__retarget_lock_acquire_recursive>
 8002c4a:	bf00      	nop
 8002c4c:	200002e8 	.word	0x200002e8

08002c50 <__malloc_unlock>:
 8002c50:	4801      	ldr	r0, [pc, #4]	; (8002c58 <__malloc_unlock+0x8>)
 8002c52:	f7ff bef1 	b.w	8002a38 <__retarget_lock_release_recursive>
 8002c56:	bf00      	nop
 8002c58:	200002e8 	.word	0x200002e8

08002c5c <__ssputs_r>:
 8002c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c60:	461f      	mov	r7, r3
 8002c62:	688e      	ldr	r6, [r1, #8]
 8002c64:	4682      	mov	sl, r0
 8002c66:	42be      	cmp	r6, r7
 8002c68:	460c      	mov	r4, r1
 8002c6a:	4690      	mov	r8, r2
 8002c6c:	680b      	ldr	r3, [r1, #0]
 8002c6e:	d82c      	bhi.n	8002cca <__ssputs_r+0x6e>
 8002c70:	898a      	ldrh	r2, [r1, #12]
 8002c72:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002c76:	d026      	beq.n	8002cc6 <__ssputs_r+0x6a>
 8002c78:	6965      	ldr	r5, [r4, #20]
 8002c7a:	6909      	ldr	r1, [r1, #16]
 8002c7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002c80:	eba3 0901 	sub.w	r9, r3, r1
 8002c84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002c88:	1c7b      	adds	r3, r7, #1
 8002c8a:	444b      	add	r3, r9
 8002c8c:	106d      	asrs	r5, r5, #1
 8002c8e:	429d      	cmp	r5, r3
 8002c90:	bf38      	it	cc
 8002c92:	461d      	movcc	r5, r3
 8002c94:	0553      	lsls	r3, r2, #21
 8002c96:	d527      	bpl.n	8002ce8 <__ssputs_r+0x8c>
 8002c98:	4629      	mov	r1, r5
 8002c9a:	f7ff ff53 	bl	8002b44 <_malloc_r>
 8002c9e:	4606      	mov	r6, r0
 8002ca0:	b360      	cbz	r0, 8002cfc <__ssputs_r+0xa0>
 8002ca2:	464a      	mov	r2, r9
 8002ca4:	6921      	ldr	r1, [r4, #16]
 8002ca6:	f7ff fec8 	bl	8002a3a <memcpy>
 8002caa:	89a3      	ldrh	r3, [r4, #12]
 8002cac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cb4:	81a3      	strh	r3, [r4, #12]
 8002cb6:	6126      	str	r6, [r4, #16]
 8002cb8:	444e      	add	r6, r9
 8002cba:	6026      	str	r6, [r4, #0]
 8002cbc:	463e      	mov	r6, r7
 8002cbe:	6165      	str	r5, [r4, #20]
 8002cc0:	eba5 0509 	sub.w	r5, r5, r9
 8002cc4:	60a5      	str	r5, [r4, #8]
 8002cc6:	42be      	cmp	r6, r7
 8002cc8:	d900      	bls.n	8002ccc <__ssputs_r+0x70>
 8002cca:	463e      	mov	r6, r7
 8002ccc:	4632      	mov	r2, r6
 8002cce:	4641      	mov	r1, r8
 8002cd0:	6820      	ldr	r0, [r4, #0]
 8002cd2:	f000 fd31 	bl	8003738 <memmove>
 8002cd6:	2000      	movs	r0, #0
 8002cd8:	68a3      	ldr	r3, [r4, #8]
 8002cda:	1b9b      	subs	r3, r3, r6
 8002cdc:	60a3      	str	r3, [r4, #8]
 8002cde:	6823      	ldr	r3, [r4, #0]
 8002ce0:	4433      	add	r3, r6
 8002ce2:	6023      	str	r3, [r4, #0]
 8002ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ce8:	462a      	mov	r2, r5
 8002cea:	f000 fda1 	bl	8003830 <_realloc_r>
 8002cee:	4606      	mov	r6, r0
 8002cf0:	2800      	cmp	r0, #0
 8002cf2:	d1e0      	bne.n	8002cb6 <__ssputs_r+0x5a>
 8002cf4:	4650      	mov	r0, sl
 8002cf6:	6921      	ldr	r1, [r4, #16]
 8002cf8:	f7ff feb4 	bl	8002a64 <_free_r>
 8002cfc:	230c      	movs	r3, #12
 8002cfe:	f8ca 3000 	str.w	r3, [sl]
 8002d02:	89a3      	ldrh	r3, [r4, #12]
 8002d04:	f04f 30ff 	mov.w	r0, #4294967295
 8002d08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d0c:	81a3      	strh	r3, [r4, #12]
 8002d0e:	e7e9      	b.n	8002ce4 <__ssputs_r+0x88>

08002d10 <_svfiprintf_r>:
 8002d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d14:	4698      	mov	r8, r3
 8002d16:	898b      	ldrh	r3, [r1, #12]
 8002d18:	4607      	mov	r7, r0
 8002d1a:	061b      	lsls	r3, r3, #24
 8002d1c:	460d      	mov	r5, r1
 8002d1e:	4614      	mov	r4, r2
 8002d20:	b09d      	sub	sp, #116	; 0x74
 8002d22:	d50e      	bpl.n	8002d42 <_svfiprintf_r+0x32>
 8002d24:	690b      	ldr	r3, [r1, #16]
 8002d26:	b963      	cbnz	r3, 8002d42 <_svfiprintf_r+0x32>
 8002d28:	2140      	movs	r1, #64	; 0x40
 8002d2a:	f7ff ff0b 	bl	8002b44 <_malloc_r>
 8002d2e:	6028      	str	r0, [r5, #0]
 8002d30:	6128      	str	r0, [r5, #16]
 8002d32:	b920      	cbnz	r0, 8002d3e <_svfiprintf_r+0x2e>
 8002d34:	230c      	movs	r3, #12
 8002d36:	603b      	str	r3, [r7, #0]
 8002d38:	f04f 30ff 	mov.w	r0, #4294967295
 8002d3c:	e0d0      	b.n	8002ee0 <_svfiprintf_r+0x1d0>
 8002d3e:	2340      	movs	r3, #64	; 0x40
 8002d40:	616b      	str	r3, [r5, #20]
 8002d42:	2300      	movs	r3, #0
 8002d44:	9309      	str	r3, [sp, #36]	; 0x24
 8002d46:	2320      	movs	r3, #32
 8002d48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002d4c:	2330      	movs	r3, #48	; 0x30
 8002d4e:	f04f 0901 	mov.w	r9, #1
 8002d52:	f8cd 800c 	str.w	r8, [sp, #12]
 8002d56:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8002ef8 <_svfiprintf_r+0x1e8>
 8002d5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002d5e:	4623      	mov	r3, r4
 8002d60:	469a      	mov	sl, r3
 8002d62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d66:	b10a      	cbz	r2, 8002d6c <_svfiprintf_r+0x5c>
 8002d68:	2a25      	cmp	r2, #37	; 0x25
 8002d6a:	d1f9      	bne.n	8002d60 <_svfiprintf_r+0x50>
 8002d6c:	ebba 0b04 	subs.w	fp, sl, r4
 8002d70:	d00b      	beq.n	8002d8a <_svfiprintf_r+0x7a>
 8002d72:	465b      	mov	r3, fp
 8002d74:	4622      	mov	r2, r4
 8002d76:	4629      	mov	r1, r5
 8002d78:	4638      	mov	r0, r7
 8002d7a:	f7ff ff6f 	bl	8002c5c <__ssputs_r>
 8002d7e:	3001      	adds	r0, #1
 8002d80:	f000 80a9 	beq.w	8002ed6 <_svfiprintf_r+0x1c6>
 8002d84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d86:	445a      	add	r2, fp
 8002d88:	9209      	str	r2, [sp, #36]	; 0x24
 8002d8a:	f89a 3000 	ldrb.w	r3, [sl]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f000 80a1 	beq.w	8002ed6 <_svfiprintf_r+0x1c6>
 8002d94:	2300      	movs	r3, #0
 8002d96:	f04f 32ff 	mov.w	r2, #4294967295
 8002d9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d9e:	f10a 0a01 	add.w	sl, sl, #1
 8002da2:	9304      	str	r3, [sp, #16]
 8002da4:	9307      	str	r3, [sp, #28]
 8002da6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002daa:	931a      	str	r3, [sp, #104]	; 0x68
 8002dac:	4654      	mov	r4, sl
 8002dae:	2205      	movs	r2, #5
 8002db0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002db4:	4850      	ldr	r0, [pc, #320]	; (8002ef8 <_svfiprintf_r+0x1e8>)
 8002db6:	f000 fd2d 	bl	8003814 <memchr>
 8002dba:	9a04      	ldr	r2, [sp, #16]
 8002dbc:	b9d8      	cbnz	r0, 8002df6 <_svfiprintf_r+0xe6>
 8002dbe:	06d0      	lsls	r0, r2, #27
 8002dc0:	bf44      	itt	mi
 8002dc2:	2320      	movmi	r3, #32
 8002dc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002dc8:	0711      	lsls	r1, r2, #28
 8002dca:	bf44      	itt	mi
 8002dcc:	232b      	movmi	r3, #43	; 0x2b
 8002dce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002dd2:	f89a 3000 	ldrb.w	r3, [sl]
 8002dd6:	2b2a      	cmp	r3, #42	; 0x2a
 8002dd8:	d015      	beq.n	8002e06 <_svfiprintf_r+0xf6>
 8002dda:	4654      	mov	r4, sl
 8002ddc:	2000      	movs	r0, #0
 8002dde:	f04f 0c0a 	mov.w	ip, #10
 8002de2:	9a07      	ldr	r2, [sp, #28]
 8002de4:	4621      	mov	r1, r4
 8002de6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002dea:	3b30      	subs	r3, #48	; 0x30
 8002dec:	2b09      	cmp	r3, #9
 8002dee:	d94d      	bls.n	8002e8c <_svfiprintf_r+0x17c>
 8002df0:	b1b0      	cbz	r0, 8002e20 <_svfiprintf_r+0x110>
 8002df2:	9207      	str	r2, [sp, #28]
 8002df4:	e014      	b.n	8002e20 <_svfiprintf_r+0x110>
 8002df6:	eba0 0308 	sub.w	r3, r0, r8
 8002dfa:	fa09 f303 	lsl.w	r3, r9, r3
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	46a2      	mov	sl, r4
 8002e02:	9304      	str	r3, [sp, #16]
 8002e04:	e7d2      	b.n	8002dac <_svfiprintf_r+0x9c>
 8002e06:	9b03      	ldr	r3, [sp, #12]
 8002e08:	1d19      	adds	r1, r3, #4
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	9103      	str	r1, [sp, #12]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	bfbb      	ittet	lt
 8002e12:	425b      	neglt	r3, r3
 8002e14:	f042 0202 	orrlt.w	r2, r2, #2
 8002e18:	9307      	strge	r3, [sp, #28]
 8002e1a:	9307      	strlt	r3, [sp, #28]
 8002e1c:	bfb8      	it	lt
 8002e1e:	9204      	strlt	r2, [sp, #16]
 8002e20:	7823      	ldrb	r3, [r4, #0]
 8002e22:	2b2e      	cmp	r3, #46	; 0x2e
 8002e24:	d10c      	bne.n	8002e40 <_svfiprintf_r+0x130>
 8002e26:	7863      	ldrb	r3, [r4, #1]
 8002e28:	2b2a      	cmp	r3, #42	; 0x2a
 8002e2a:	d134      	bne.n	8002e96 <_svfiprintf_r+0x186>
 8002e2c:	9b03      	ldr	r3, [sp, #12]
 8002e2e:	3402      	adds	r4, #2
 8002e30:	1d1a      	adds	r2, r3, #4
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	9203      	str	r2, [sp, #12]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	bfb8      	it	lt
 8002e3a:	f04f 33ff 	movlt.w	r3, #4294967295
 8002e3e:	9305      	str	r3, [sp, #20]
 8002e40:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8002efc <_svfiprintf_r+0x1ec>
 8002e44:	2203      	movs	r2, #3
 8002e46:	4650      	mov	r0, sl
 8002e48:	7821      	ldrb	r1, [r4, #0]
 8002e4a:	f000 fce3 	bl	8003814 <memchr>
 8002e4e:	b138      	cbz	r0, 8002e60 <_svfiprintf_r+0x150>
 8002e50:	2240      	movs	r2, #64	; 0x40
 8002e52:	9b04      	ldr	r3, [sp, #16]
 8002e54:	eba0 000a 	sub.w	r0, r0, sl
 8002e58:	4082      	lsls	r2, r0
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	3401      	adds	r4, #1
 8002e5e:	9304      	str	r3, [sp, #16]
 8002e60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e64:	2206      	movs	r2, #6
 8002e66:	4826      	ldr	r0, [pc, #152]	; (8002f00 <_svfiprintf_r+0x1f0>)
 8002e68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002e6c:	f000 fcd2 	bl	8003814 <memchr>
 8002e70:	2800      	cmp	r0, #0
 8002e72:	d038      	beq.n	8002ee6 <_svfiprintf_r+0x1d6>
 8002e74:	4b23      	ldr	r3, [pc, #140]	; (8002f04 <_svfiprintf_r+0x1f4>)
 8002e76:	bb1b      	cbnz	r3, 8002ec0 <_svfiprintf_r+0x1b0>
 8002e78:	9b03      	ldr	r3, [sp, #12]
 8002e7a:	3307      	adds	r3, #7
 8002e7c:	f023 0307 	bic.w	r3, r3, #7
 8002e80:	3308      	adds	r3, #8
 8002e82:	9303      	str	r3, [sp, #12]
 8002e84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e86:	4433      	add	r3, r6
 8002e88:	9309      	str	r3, [sp, #36]	; 0x24
 8002e8a:	e768      	b.n	8002d5e <_svfiprintf_r+0x4e>
 8002e8c:	460c      	mov	r4, r1
 8002e8e:	2001      	movs	r0, #1
 8002e90:	fb0c 3202 	mla	r2, ip, r2, r3
 8002e94:	e7a6      	b.n	8002de4 <_svfiprintf_r+0xd4>
 8002e96:	2300      	movs	r3, #0
 8002e98:	f04f 0c0a 	mov.w	ip, #10
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	3401      	adds	r4, #1
 8002ea0:	9305      	str	r3, [sp, #20]
 8002ea2:	4620      	mov	r0, r4
 8002ea4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ea8:	3a30      	subs	r2, #48	; 0x30
 8002eaa:	2a09      	cmp	r2, #9
 8002eac:	d903      	bls.n	8002eb6 <_svfiprintf_r+0x1a6>
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d0c6      	beq.n	8002e40 <_svfiprintf_r+0x130>
 8002eb2:	9105      	str	r1, [sp, #20]
 8002eb4:	e7c4      	b.n	8002e40 <_svfiprintf_r+0x130>
 8002eb6:	4604      	mov	r4, r0
 8002eb8:	2301      	movs	r3, #1
 8002eba:	fb0c 2101 	mla	r1, ip, r1, r2
 8002ebe:	e7f0      	b.n	8002ea2 <_svfiprintf_r+0x192>
 8002ec0:	ab03      	add	r3, sp, #12
 8002ec2:	9300      	str	r3, [sp, #0]
 8002ec4:	462a      	mov	r2, r5
 8002ec6:	4638      	mov	r0, r7
 8002ec8:	4b0f      	ldr	r3, [pc, #60]	; (8002f08 <_svfiprintf_r+0x1f8>)
 8002eca:	a904      	add	r1, sp, #16
 8002ecc:	f3af 8000 	nop.w
 8002ed0:	1c42      	adds	r2, r0, #1
 8002ed2:	4606      	mov	r6, r0
 8002ed4:	d1d6      	bne.n	8002e84 <_svfiprintf_r+0x174>
 8002ed6:	89ab      	ldrh	r3, [r5, #12]
 8002ed8:	065b      	lsls	r3, r3, #25
 8002eda:	f53f af2d 	bmi.w	8002d38 <_svfiprintf_r+0x28>
 8002ede:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002ee0:	b01d      	add	sp, #116	; 0x74
 8002ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ee6:	ab03      	add	r3, sp, #12
 8002ee8:	9300      	str	r3, [sp, #0]
 8002eea:	462a      	mov	r2, r5
 8002eec:	4638      	mov	r0, r7
 8002eee:	4b06      	ldr	r3, [pc, #24]	; (8002f08 <_svfiprintf_r+0x1f8>)
 8002ef0:	a904      	add	r1, sp, #16
 8002ef2:	f000 f9bf 	bl	8003274 <_printf_i>
 8002ef6:	e7eb      	b.n	8002ed0 <_svfiprintf_r+0x1c0>
 8002ef8:	08003ce2 	.word	0x08003ce2
 8002efc:	08003ce8 	.word	0x08003ce8
 8002f00:	08003cec 	.word	0x08003cec
 8002f04:	00000000 	.word	0x00000000
 8002f08:	08002c5d 	.word	0x08002c5d

08002f0c <__sfputc_r>:
 8002f0c:	6893      	ldr	r3, [r2, #8]
 8002f0e:	b410      	push	{r4}
 8002f10:	3b01      	subs	r3, #1
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	6093      	str	r3, [r2, #8]
 8002f16:	da07      	bge.n	8002f28 <__sfputc_r+0x1c>
 8002f18:	6994      	ldr	r4, [r2, #24]
 8002f1a:	42a3      	cmp	r3, r4
 8002f1c:	db01      	blt.n	8002f22 <__sfputc_r+0x16>
 8002f1e:	290a      	cmp	r1, #10
 8002f20:	d102      	bne.n	8002f28 <__sfputc_r+0x1c>
 8002f22:	bc10      	pop	{r4}
 8002f24:	f000 bb72 	b.w	800360c <__swbuf_r>
 8002f28:	6813      	ldr	r3, [r2, #0]
 8002f2a:	1c58      	adds	r0, r3, #1
 8002f2c:	6010      	str	r0, [r2, #0]
 8002f2e:	7019      	strb	r1, [r3, #0]
 8002f30:	4608      	mov	r0, r1
 8002f32:	bc10      	pop	{r4}
 8002f34:	4770      	bx	lr

08002f36 <__sfputs_r>:
 8002f36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f38:	4606      	mov	r6, r0
 8002f3a:	460f      	mov	r7, r1
 8002f3c:	4614      	mov	r4, r2
 8002f3e:	18d5      	adds	r5, r2, r3
 8002f40:	42ac      	cmp	r4, r5
 8002f42:	d101      	bne.n	8002f48 <__sfputs_r+0x12>
 8002f44:	2000      	movs	r0, #0
 8002f46:	e007      	b.n	8002f58 <__sfputs_r+0x22>
 8002f48:	463a      	mov	r2, r7
 8002f4a:	4630      	mov	r0, r6
 8002f4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f50:	f7ff ffdc 	bl	8002f0c <__sfputc_r>
 8002f54:	1c43      	adds	r3, r0, #1
 8002f56:	d1f3      	bne.n	8002f40 <__sfputs_r+0xa>
 8002f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002f5c <_vfiprintf_r>:
 8002f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f60:	460d      	mov	r5, r1
 8002f62:	4614      	mov	r4, r2
 8002f64:	4698      	mov	r8, r3
 8002f66:	4606      	mov	r6, r0
 8002f68:	b09d      	sub	sp, #116	; 0x74
 8002f6a:	b118      	cbz	r0, 8002f74 <_vfiprintf_r+0x18>
 8002f6c:	6a03      	ldr	r3, [r0, #32]
 8002f6e:	b90b      	cbnz	r3, 8002f74 <_vfiprintf_r+0x18>
 8002f70:	f7ff fc10 	bl	8002794 <__sinit>
 8002f74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002f76:	07d9      	lsls	r1, r3, #31
 8002f78:	d405      	bmi.n	8002f86 <_vfiprintf_r+0x2a>
 8002f7a:	89ab      	ldrh	r3, [r5, #12]
 8002f7c:	059a      	lsls	r2, r3, #22
 8002f7e:	d402      	bmi.n	8002f86 <_vfiprintf_r+0x2a>
 8002f80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002f82:	f7ff fd58 	bl	8002a36 <__retarget_lock_acquire_recursive>
 8002f86:	89ab      	ldrh	r3, [r5, #12]
 8002f88:	071b      	lsls	r3, r3, #28
 8002f8a:	d501      	bpl.n	8002f90 <_vfiprintf_r+0x34>
 8002f8c:	692b      	ldr	r3, [r5, #16]
 8002f8e:	b99b      	cbnz	r3, 8002fb8 <_vfiprintf_r+0x5c>
 8002f90:	4629      	mov	r1, r5
 8002f92:	4630      	mov	r0, r6
 8002f94:	f000 fb78 	bl	8003688 <__swsetup_r>
 8002f98:	b170      	cbz	r0, 8002fb8 <_vfiprintf_r+0x5c>
 8002f9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002f9c:	07dc      	lsls	r4, r3, #31
 8002f9e:	d504      	bpl.n	8002faa <_vfiprintf_r+0x4e>
 8002fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fa4:	b01d      	add	sp, #116	; 0x74
 8002fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002faa:	89ab      	ldrh	r3, [r5, #12]
 8002fac:	0598      	lsls	r0, r3, #22
 8002fae:	d4f7      	bmi.n	8002fa0 <_vfiprintf_r+0x44>
 8002fb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002fb2:	f7ff fd41 	bl	8002a38 <__retarget_lock_release_recursive>
 8002fb6:	e7f3      	b.n	8002fa0 <_vfiprintf_r+0x44>
 8002fb8:	2300      	movs	r3, #0
 8002fba:	9309      	str	r3, [sp, #36]	; 0x24
 8002fbc:	2320      	movs	r3, #32
 8002fbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002fc2:	2330      	movs	r3, #48	; 0x30
 8002fc4:	f04f 0901 	mov.w	r9, #1
 8002fc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8002fcc:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800317c <_vfiprintf_r+0x220>
 8002fd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002fd4:	4623      	mov	r3, r4
 8002fd6:	469a      	mov	sl, r3
 8002fd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002fdc:	b10a      	cbz	r2, 8002fe2 <_vfiprintf_r+0x86>
 8002fde:	2a25      	cmp	r2, #37	; 0x25
 8002fe0:	d1f9      	bne.n	8002fd6 <_vfiprintf_r+0x7a>
 8002fe2:	ebba 0b04 	subs.w	fp, sl, r4
 8002fe6:	d00b      	beq.n	8003000 <_vfiprintf_r+0xa4>
 8002fe8:	465b      	mov	r3, fp
 8002fea:	4622      	mov	r2, r4
 8002fec:	4629      	mov	r1, r5
 8002fee:	4630      	mov	r0, r6
 8002ff0:	f7ff ffa1 	bl	8002f36 <__sfputs_r>
 8002ff4:	3001      	adds	r0, #1
 8002ff6:	f000 80a9 	beq.w	800314c <_vfiprintf_r+0x1f0>
 8002ffa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002ffc:	445a      	add	r2, fp
 8002ffe:	9209      	str	r2, [sp, #36]	; 0x24
 8003000:	f89a 3000 	ldrb.w	r3, [sl]
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 80a1 	beq.w	800314c <_vfiprintf_r+0x1f0>
 800300a:	2300      	movs	r3, #0
 800300c:	f04f 32ff 	mov.w	r2, #4294967295
 8003010:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003014:	f10a 0a01 	add.w	sl, sl, #1
 8003018:	9304      	str	r3, [sp, #16]
 800301a:	9307      	str	r3, [sp, #28]
 800301c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003020:	931a      	str	r3, [sp, #104]	; 0x68
 8003022:	4654      	mov	r4, sl
 8003024:	2205      	movs	r2, #5
 8003026:	f814 1b01 	ldrb.w	r1, [r4], #1
 800302a:	4854      	ldr	r0, [pc, #336]	; (800317c <_vfiprintf_r+0x220>)
 800302c:	f000 fbf2 	bl	8003814 <memchr>
 8003030:	9a04      	ldr	r2, [sp, #16]
 8003032:	b9d8      	cbnz	r0, 800306c <_vfiprintf_r+0x110>
 8003034:	06d1      	lsls	r1, r2, #27
 8003036:	bf44      	itt	mi
 8003038:	2320      	movmi	r3, #32
 800303a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800303e:	0713      	lsls	r3, r2, #28
 8003040:	bf44      	itt	mi
 8003042:	232b      	movmi	r3, #43	; 0x2b
 8003044:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003048:	f89a 3000 	ldrb.w	r3, [sl]
 800304c:	2b2a      	cmp	r3, #42	; 0x2a
 800304e:	d015      	beq.n	800307c <_vfiprintf_r+0x120>
 8003050:	4654      	mov	r4, sl
 8003052:	2000      	movs	r0, #0
 8003054:	f04f 0c0a 	mov.w	ip, #10
 8003058:	9a07      	ldr	r2, [sp, #28]
 800305a:	4621      	mov	r1, r4
 800305c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003060:	3b30      	subs	r3, #48	; 0x30
 8003062:	2b09      	cmp	r3, #9
 8003064:	d94d      	bls.n	8003102 <_vfiprintf_r+0x1a6>
 8003066:	b1b0      	cbz	r0, 8003096 <_vfiprintf_r+0x13a>
 8003068:	9207      	str	r2, [sp, #28]
 800306a:	e014      	b.n	8003096 <_vfiprintf_r+0x13a>
 800306c:	eba0 0308 	sub.w	r3, r0, r8
 8003070:	fa09 f303 	lsl.w	r3, r9, r3
 8003074:	4313      	orrs	r3, r2
 8003076:	46a2      	mov	sl, r4
 8003078:	9304      	str	r3, [sp, #16]
 800307a:	e7d2      	b.n	8003022 <_vfiprintf_r+0xc6>
 800307c:	9b03      	ldr	r3, [sp, #12]
 800307e:	1d19      	adds	r1, r3, #4
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	9103      	str	r1, [sp, #12]
 8003084:	2b00      	cmp	r3, #0
 8003086:	bfbb      	ittet	lt
 8003088:	425b      	neglt	r3, r3
 800308a:	f042 0202 	orrlt.w	r2, r2, #2
 800308e:	9307      	strge	r3, [sp, #28]
 8003090:	9307      	strlt	r3, [sp, #28]
 8003092:	bfb8      	it	lt
 8003094:	9204      	strlt	r2, [sp, #16]
 8003096:	7823      	ldrb	r3, [r4, #0]
 8003098:	2b2e      	cmp	r3, #46	; 0x2e
 800309a:	d10c      	bne.n	80030b6 <_vfiprintf_r+0x15a>
 800309c:	7863      	ldrb	r3, [r4, #1]
 800309e:	2b2a      	cmp	r3, #42	; 0x2a
 80030a0:	d134      	bne.n	800310c <_vfiprintf_r+0x1b0>
 80030a2:	9b03      	ldr	r3, [sp, #12]
 80030a4:	3402      	adds	r4, #2
 80030a6:	1d1a      	adds	r2, r3, #4
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	9203      	str	r2, [sp, #12]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	bfb8      	it	lt
 80030b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80030b4:	9305      	str	r3, [sp, #20]
 80030b6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003180 <_vfiprintf_r+0x224>
 80030ba:	2203      	movs	r2, #3
 80030bc:	4650      	mov	r0, sl
 80030be:	7821      	ldrb	r1, [r4, #0]
 80030c0:	f000 fba8 	bl	8003814 <memchr>
 80030c4:	b138      	cbz	r0, 80030d6 <_vfiprintf_r+0x17a>
 80030c6:	2240      	movs	r2, #64	; 0x40
 80030c8:	9b04      	ldr	r3, [sp, #16]
 80030ca:	eba0 000a 	sub.w	r0, r0, sl
 80030ce:	4082      	lsls	r2, r0
 80030d0:	4313      	orrs	r3, r2
 80030d2:	3401      	adds	r4, #1
 80030d4:	9304      	str	r3, [sp, #16]
 80030d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030da:	2206      	movs	r2, #6
 80030dc:	4829      	ldr	r0, [pc, #164]	; (8003184 <_vfiprintf_r+0x228>)
 80030de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80030e2:	f000 fb97 	bl	8003814 <memchr>
 80030e6:	2800      	cmp	r0, #0
 80030e8:	d03f      	beq.n	800316a <_vfiprintf_r+0x20e>
 80030ea:	4b27      	ldr	r3, [pc, #156]	; (8003188 <_vfiprintf_r+0x22c>)
 80030ec:	bb1b      	cbnz	r3, 8003136 <_vfiprintf_r+0x1da>
 80030ee:	9b03      	ldr	r3, [sp, #12]
 80030f0:	3307      	adds	r3, #7
 80030f2:	f023 0307 	bic.w	r3, r3, #7
 80030f6:	3308      	adds	r3, #8
 80030f8:	9303      	str	r3, [sp, #12]
 80030fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030fc:	443b      	add	r3, r7
 80030fe:	9309      	str	r3, [sp, #36]	; 0x24
 8003100:	e768      	b.n	8002fd4 <_vfiprintf_r+0x78>
 8003102:	460c      	mov	r4, r1
 8003104:	2001      	movs	r0, #1
 8003106:	fb0c 3202 	mla	r2, ip, r2, r3
 800310a:	e7a6      	b.n	800305a <_vfiprintf_r+0xfe>
 800310c:	2300      	movs	r3, #0
 800310e:	f04f 0c0a 	mov.w	ip, #10
 8003112:	4619      	mov	r1, r3
 8003114:	3401      	adds	r4, #1
 8003116:	9305      	str	r3, [sp, #20]
 8003118:	4620      	mov	r0, r4
 800311a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800311e:	3a30      	subs	r2, #48	; 0x30
 8003120:	2a09      	cmp	r2, #9
 8003122:	d903      	bls.n	800312c <_vfiprintf_r+0x1d0>
 8003124:	2b00      	cmp	r3, #0
 8003126:	d0c6      	beq.n	80030b6 <_vfiprintf_r+0x15a>
 8003128:	9105      	str	r1, [sp, #20]
 800312a:	e7c4      	b.n	80030b6 <_vfiprintf_r+0x15a>
 800312c:	4604      	mov	r4, r0
 800312e:	2301      	movs	r3, #1
 8003130:	fb0c 2101 	mla	r1, ip, r1, r2
 8003134:	e7f0      	b.n	8003118 <_vfiprintf_r+0x1bc>
 8003136:	ab03      	add	r3, sp, #12
 8003138:	9300      	str	r3, [sp, #0]
 800313a:	462a      	mov	r2, r5
 800313c:	4630      	mov	r0, r6
 800313e:	4b13      	ldr	r3, [pc, #76]	; (800318c <_vfiprintf_r+0x230>)
 8003140:	a904      	add	r1, sp, #16
 8003142:	f3af 8000 	nop.w
 8003146:	4607      	mov	r7, r0
 8003148:	1c78      	adds	r0, r7, #1
 800314a:	d1d6      	bne.n	80030fa <_vfiprintf_r+0x19e>
 800314c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800314e:	07d9      	lsls	r1, r3, #31
 8003150:	d405      	bmi.n	800315e <_vfiprintf_r+0x202>
 8003152:	89ab      	ldrh	r3, [r5, #12]
 8003154:	059a      	lsls	r2, r3, #22
 8003156:	d402      	bmi.n	800315e <_vfiprintf_r+0x202>
 8003158:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800315a:	f7ff fc6d 	bl	8002a38 <__retarget_lock_release_recursive>
 800315e:	89ab      	ldrh	r3, [r5, #12]
 8003160:	065b      	lsls	r3, r3, #25
 8003162:	f53f af1d 	bmi.w	8002fa0 <_vfiprintf_r+0x44>
 8003166:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003168:	e71c      	b.n	8002fa4 <_vfiprintf_r+0x48>
 800316a:	ab03      	add	r3, sp, #12
 800316c:	9300      	str	r3, [sp, #0]
 800316e:	462a      	mov	r2, r5
 8003170:	4630      	mov	r0, r6
 8003172:	4b06      	ldr	r3, [pc, #24]	; (800318c <_vfiprintf_r+0x230>)
 8003174:	a904      	add	r1, sp, #16
 8003176:	f000 f87d 	bl	8003274 <_printf_i>
 800317a:	e7e4      	b.n	8003146 <_vfiprintf_r+0x1ea>
 800317c:	08003ce2 	.word	0x08003ce2
 8003180:	08003ce8 	.word	0x08003ce8
 8003184:	08003cec 	.word	0x08003cec
 8003188:	00000000 	.word	0x00000000
 800318c:	08002f37 	.word	0x08002f37

08003190 <_printf_common>:
 8003190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003194:	4616      	mov	r6, r2
 8003196:	4699      	mov	r9, r3
 8003198:	688a      	ldr	r2, [r1, #8]
 800319a:	690b      	ldr	r3, [r1, #16]
 800319c:	4607      	mov	r7, r0
 800319e:	4293      	cmp	r3, r2
 80031a0:	bfb8      	it	lt
 80031a2:	4613      	movlt	r3, r2
 80031a4:	6033      	str	r3, [r6, #0]
 80031a6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80031aa:	460c      	mov	r4, r1
 80031ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80031b0:	b10a      	cbz	r2, 80031b6 <_printf_common+0x26>
 80031b2:	3301      	adds	r3, #1
 80031b4:	6033      	str	r3, [r6, #0]
 80031b6:	6823      	ldr	r3, [r4, #0]
 80031b8:	0699      	lsls	r1, r3, #26
 80031ba:	bf42      	ittt	mi
 80031bc:	6833      	ldrmi	r3, [r6, #0]
 80031be:	3302      	addmi	r3, #2
 80031c0:	6033      	strmi	r3, [r6, #0]
 80031c2:	6825      	ldr	r5, [r4, #0]
 80031c4:	f015 0506 	ands.w	r5, r5, #6
 80031c8:	d106      	bne.n	80031d8 <_printf_common+0x48>
 80031ca:	f104 0a19 	add.w	sl, r4, #25
 80031ce:	68e3      	ldr	r3, [r4, #12]
 80031d0:	6832      	ldr	r2, [r6, #0]
 80031d2:	1a9b      	subs	r3, r3, r2
 80031d4:	42ab      	cmp	r3, r5
 80031d6:	dc2b      	bgt.n	8003230 <_printf_common+0xa0>
 80031d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80031dc:	1e13      	subs	r3, r2, #0
 80031de:	6822      	ldr	r2, [r4, #0]
 80031e0:	bf18      	it	ne
 80031e2:	2301      	movne	r3, #1
 80031e4:	0692      	lsls	r2, r2, #26
 80031e6:	d430      	bmi.n	800324a <_printf_common+0xba>
 80031e8:	4649      	mov	r1, r9
 80031ea:	4638      	mov	r0, r7
 80031ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80031f0:	47c0      	blx	r8
 80031f2:	3001      	adds	r0, #1
 80031f4:	d023      	beq.n	800323e <_printf_common+0xae>
 80031f6:	6823      	ldr	r3, [r4, #0]
 80031f8:	6922      	ldr	r2, [r4, #16]
 80031fa:	f003 0306 	and.w	r3, r3, #6
 80031fe:	2b04      	cmp	r3, #4
 8003200:	bf14      	ite	ne
 8003202:	2500      	movne	r5, #0
 8003204:	6833      	ldreq	r3, [r6, #0]
 8003206:	f04f 0600 	mov.w	r6, #0
 800320a:	bf08      	it	eq
 800320c:	68e5      	ldreq	r5, [r4, #12]
 800320e:	f104 041a 	add.w	r4, r4, #26
 8003212:	bf08      	it	eq
 8003214:	1aed      	subeq	r5, r5, r3
 8003216:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800321a:	bf08      	it	eq
 800321c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003220:	4293      	cmp	r3, r2
 8003222:	bfc4      	itt	gt
 8003224:	1a9b      	subgt	r3, r3, r2
 8003226:	18ed      	addgt	r5, r5, r3
 8003228:	42b5      	cmp	r5, r6
 800322a:	d11a      	bne.n	8003262 <_printf_common+0xd2>
 800322c:	2000      	movs	r0, #0
 800322e:	e008      	b.n	8003242 <_printf_common+0xb2>
 8003230:	2301      	movs	r3, #1
 8003232:	4652      	mov	r2, sl
 8003234:	4649      	mov	r1, r9
 8003236:	4638      	mov	r0, r7
 8003238:	47c0      	blx	r8
 800323a:	3001      	adds	r0, #1
 800323c:	d103      	bne.n	8003246 <_printf_common+0xb6>
 800323e:	f04f 30ff 	mov.w	r0, #4294967295
 8003242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003246:	3501      	adds	r5, #1
 8003248:	e7c1      	b.n	80031ce <_printf_common+0x3e>
 800324a:	2030      	movs	r0, #48	; 0x30
 800324c:	18e1      	adds	r1, r4, r3
 800324e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003252:	1c5a      	adds	r2, r3, #1
 8003254:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003258:	4422      	add	r2, r4
 800325a:	3302      	adds	r3, #2
 800325c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003260:	e7c2      	b.n	80031e8 <_printf_common+0x58>
 8003262:	2301      	movs	r3, #1
 8003264:	4622      	mov	r2, r4
 8003266:	4649      	mov	r1, r9
 8003268:	4638      	mov	r0, r7
 800326a:	47c0      	blx	r8
 800326c:	3001      	adds	r0, #1
 800326e:	d0e6      	beq.n	800323e <_printf_common+0xae>
 8003270:	3601      	adds	r6, #1
 8003272:	e7d9      	b.n	8003228 <_printf_common+0x98>

08003274 <_printf_i>:
 8003274:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003278:	7e0f      	ldrb	r7, [r1, #24]
 800327a:	4691      	mov	r9, r2
 800327c:	2f78      	cmp	r7, #120	; 0x78
 800327e:	4680      	mov	r8, r0
 8003280:	460c      	mov	r4, r1
 8003282:	469a      	mov	sl, r3
 8003284:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003286:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800328a:	d807      	bhi.n	800329c <_printf_i+0x28>
 800328c:	2f62      	cmp	r7, #98	; 0x62
 800328e:	d80a      	bhi.n	80032a6 <_printf_i+0x32>
 8003290:	2f00      	cmp	r7, #0
 8003292:	f000 80d5 	beq.w	8003440 <_printf_i+0x1cc>
 8003296:	2f58      	cmp	r7, #88	; 0x58
 8003298:	f000 80c1 	beq.w	800341e <_printf_i+0x1aa>
 800329c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80032a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80032a4:	e03a      	b.n	800331c <_printf_i+0xa8>
 80032a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80032aa:	2b15      	cmp	r3, #21
 80032ac:	d8f6      	bhi.n	800329c <_printf_i+0x28>
 80032ae:	a101      	add	r1, pc, #4	; (adr r1, 80032b4 <_printf_i+0x40>)
 80032b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80032b4:	0800330d 	.word	0x0800330d
 80032b8:	08003321 	.word	0x08003321
 80032bc:	0800329d 	.word	0x0800329d
 80032c0:	0800329d 	.word	0x0800329d
 80032c4:	0800329d 	.word	0x0800329d
 80032c8:	0800329d 	.word	0x0800329d
 80032cc:	08003321 	.word	0x08003321
 80032d0:	0800329d 	.word	0x0800329d
 80032d4:	0800329d 	.word	0x0800329d
 80032d8:	0800329d 	.word	0x0800329d
 80032dc:	0800329d 	.word	0x0800329d
 80032e0:	08003427 	.word	0x08003427
 80032e4:	0800334d 	.word	0x0800334d
 80032e8:	080033e1 	.word	0x080033e1
 80032ec:	0800329d 	.word	0x0800329d
 80032f0:	0800329d 	.word	0x0800329d
 80032f4:	08003449 	.word	0x08003449
 80032f8:	0800329d 	.word	0x0800329d
 80032fc:	0800334d 	.word	0x0800334d
 8003300:	0800329d 	.word	0x0800329d
 8003304:	0800329d 	.word	0x0800329d
 8003308:	080033e9 	.word	0x080033e9
 800330c:	682b      	ldr	r3, [r5, #0]
 800330e:	1d1a      	adds	r2, r3, #4
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	602a      	str	r2, [r5, #0]
 8003314:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003318:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800331c:	2301      	movs	r3, #1
 800331e:	e0a0      	b.n	8003462 <_printf_i+0x1ee>
 8003320:	6820      	ldr	r0, [r4, #0]
 8003322:	682b      	ldr	r3, [r5, #0]
 8003324:	0607      	lsls	r7, r0, #24
 8003326:	f103 0104 	add.w	r1, r3, #4
 800332a:	6029      	str	r1, [r5, #0]
 800332c:	d501      	bpl.n	8003332 <_printf_i+0xbe>
 800332e:	681e      	ldr	r6, [r3, #0]
 8003330:	e003      	b.n	800333a <_printf_i+0xc6>
 8003332:	0646      	lsls	r6, r0, #25
 8003334:	d5fb      	bpl.n	800332e <_printf_i+0xba>
 8003336:	f9b3 6000 	ldrsh.w	r6, [r3]
 800333a:	2e00      	cmp	r6, #0
 800333c:	da03      	bge.n	8003346 <_printf_i+0xd2>
 800333e:	232d      	movs	r3, #45	; 0x2d
 8003340:	4276      	negs	r6, r6
 8003342:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003346:	230a      	movs	r3, #10
 8003348:	4859      	ldr	r0, [pc, #356]	; (80034b0 <_printf_i+0x23c>)
 800334a:	e012      	b.n	8003372 <_printf_i+0xfe>
 800334c:	682b      	ldr	r3, [r5, #0]
 800334e:	6820      	ldr	r0, [r4, #0]
 8003350:	1d19      	adds	r1, r3, #4
 8003352:	6029      	str	r1, [r5, #0]
 8003354:	0605      	lsls	r5, r0, #24
 8003356:	d501      	bpl.n	800335c <_printf_i+0xe8>
 8003358:	681e      	ldr	r6, [r3, #0]
 800335a:	e002      	b.n	8003362 <_printf_i+0xee>
 800335c:	0641      	lsls	r1, r0, #25
 800335e:	d5fb      	bpl.n	8003358 <_printf_i+0xe4>
 8003360:	881e      	ldrh	r6, [r3, #0]
 8003362:	2f6f      	cmp	r7, #111	; 0x6f
 8003364:	bf0c      	ite	eq
 8003366:	2308      	moveq	r3, #8
 8003368:	230a      	movne	r3, #10
 800336a:	4851      	ldr	r0, [pc, #324]	; (80034b0 <_printf_i+0x23c>)
 800336c:	2100      	movs	r1, #0
 800336e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003372:	6865      	ldr	r5, [r4, #4]
 8003374:	2d00      	cmp	r5, #0
 8003376:	bfa8      	it	ge
 8003378:	6821      	ldrge	r1, [r4, #0]
 800337a:	60a5      	str	r5, [r4, #8]
 800337c:	bfa4      	itt	ge
 800337e:	f021 0104 	bicge.w	r1, r1, #4
 8003382:	6021      	strge	r1, [r4, #0]
 8003384:	b90e      	cbnz	r6, 800338a <_printf_i+0x116>
 8003386:	2d00      	cmp	r5, #0
 8003388:	d04b      	beq.n	8003422 <_printf_i+0x1ae>
 800338a:	4615      	mov	r5, r2
 800338c:	fbb6 f1f3 	udiv	r1, r6, r3
 8003390:	fb03 6711 	mls	r7, r3, r1, r6
 8003394:	5dc7      	ldrb	r7, [r0, r7]
 8003396:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800339a:	4637      	mov	r7, r6
 800339c:	42bb      	cmp	r3, r7
 800339e:	460e      	mov	r6, r1
 80033a0:	d9f4      	bls.n	800338c <_printf_i+0x118>
 80033a2:	2b08      	cmp	r3, #8
 80033a4:	d10b      	bne.n	80033be <_printf_i+0x14a>
 80033a6:	6823      	ldr	r3, [r4, #0]
 80033a8:	07de      	lsls	r6, r3, #31
 80033aa:	d508      	bpl.n	80033be <_printf_i+0x14a>
 80033ac:	6923      	ldr	r3, [r4, #16]
 80033ae:	6861      	ldr	r1, [r4, #4]
 80033b0:	4299      	cmp	r1, r3
 80033b2:	bfde      	ittt	le
 80033b4:	2330      	movle	r3, #48	; 0x30
 80033b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80033ba:	f105 35ff 	addle.w	r5, r5, #4294967295
 80033be:	1b52      	subs	r2, r2, r5
 80033c0:	6122      	str	r2, [r4, #16]
 80033c2:	464b      	mov	r3, r9
 80033c4:	4621      	mov	r1, r4
 80033c6:	4640      	mov	r0, r8
 80033c8:	f8cd a000 	str.w	sl, [sp]
 80033cc:	aa03      	add	r2, sp, #12
 80033ce:	f7ff fedf 	bl	8003190 <_printf_common>
 80033d2:	3001      	adds	r0, #1
 80033d4:	d14a      	bne.n	800346c <_printf_i+0x1f8>
 80033d6:	f04f 30ff 	mov.w	r0, #4294967295
 80033da:	b004      	add	sp, #16
 80033dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033e0:	6823      	ldr	r3, [r4, #0]
 80033e2:	f043 0320 	orr.w	r3, r3, #32
 80033e6:	6023      	str	r3, [r4, #0]
 80033e8:	2778      	movs	r7, #120	; 0x78
 80033ea:	4832      	ldr	r0, [pc, #200]	; (80034b4 <_printf_i+0x240>)
 80033ec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80033f0:	6823      	ldr	r3, [r4, #0]
 80033f2:	6829      	ldr	r1, [r5, #0]
 80033f4:	061f      	lsls	r7, r3, #24
 80033f6:	f851 6b04 	ldr.w	r6, [r1], #4
 80033fa:	d402      	bmi.n	8003402 <_printf_i+0x18e>
 80033fc:	065f      	lsls	r7, r3, #25
 80033fe:	bf48      	it	mi
 8003400:	b2b6      	uxthmi	r6, r6
 8003402:	07df      	lsls	r7, r3, #31
 8003404:	bf48      	it	mi
 8003406:	f043 0320 	orrmi.w	r3, r3, #32
 800340a:	6029      	str	r1, [r5, #0]
 800340c:	bf48      	it	mi
 800340e:	6023      	strmi	r3, [r4, #0]
 8003410:	b91e      	cbnz	r6, 800341a <_printf_i+0x1a6>
 8003412:	6823      	ldr	r3, [r4, #0]
 8003414:	f023 0320 	bic.w	r3, r3, #32
 8003418:	6023      	str	r3, [r4, #0]
 800341a:	2310      	movs	r3, #16
 800341c:	e7a6      	b.n	800336c <_printf_i+0xf8>
 800341e:	4824      	ldr	r0, [pc, #144]	; (80034b0 <_printf_i+0x23c>)
 8003420:	e7e4      	b.n	80033ec <_printf_i+0x178>
 8003422:	4615      	mov	r5, r2
 8003424:	e7bd      	b.n	80033a2 <_printf_i+0x12e>
 8003426:	682b      	ldr	r3, [r5, #0]
 8003428:	6826      	ldr	r6, [r4, #0]
 800342a:	1d18      	adds	r0, r3, #4
 800342c:	6961      	ldr	r1, [r4, #20]
 800342e:	6028      	str	r0, [r5, #0]
 8003430:	0635      	lsls	r5, r6, #24
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	d501      	bpl.n	800343a <_printf_i+0x1c6>
 8003436:	6019      	str	r1, [r3, #0]
 8003438:	e002      	b.n	8003440 <_printf_i+0x1cc>
 800343a:	0670      	lsls	r0, r6, #25
 800343c:	d5fb      	bpl.n	8003436 <_printf_i+0x1c2>
 800343e:	8019      	strh	r1, [r3, #0]
 8003440:	2300      	movs	r3, #0
 8003442:	4615      	mov	r5, r2
 8003444:	6123      	str	r3, [r4, #16]
 8003446:	e7bc      	b.n	80033c2 <_printf_i+0x14e>
 8003448:	682b      	ldr	r3, [r5, #0]
 800344a:	2100      	movs	r1, #0
 800344c:	1d1a      	adds	r2, r3, #4
 800344e:	602a      	str	r2, [r5, #0]
 8003450:	681d      	ldr	r5, [r3, #0]
 8003452:	6862      	ldr	r2, [r4, #4]
 8003454:	4628      	mov	r0, r5
 8003456:	f000 f9dd 	bl	8003814 <memchr>
 800345a:	b108      	cbz	r0, 8003460 <_printf_i+0x1ec>
 800345c:	1b40      	subs	r0, r0, r5
 800345e:	6060      	str	r0, [r4, #4]
 8003460:	6863      	ldr	r3, [r4, #4]
 8003462:	6123      	str	r3, [r4, #16]
 8003464:	2300      	movs	r3, #0
 8003466:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800346a:	e7aa      	b.n	80033c2 <_printf_i+0x14e>
 800346c:	462a      	mov	r2, r5
 800346e:	4649      	mov	r1, r9
 8003470:	4640      	mov	r0, r8
 8003472:	6923      	ldr	r3, [r4, #16]
 8003474:	47d0      	blx	sl
 8003476:	3001      	adds	r0, #1
 8003478:	d0ad      	beq.n	80033d6 <_printf_i+0x162>
 800347a:	6823      	ldr	r3, [r4, #0]
 800347c:	079b      	lsls	r3, r3, #30
 800347e:	d413      	bmi.n	80034a8 <_printf_i+0x234>
 8003480:	68e0      	ldr	r0, [r4, #12]
 8003482:	9b03      	ldr	r3, [sp, #12]
 8003484:	4298      	cmp	r0, r3
 8003486:	bfb8      	it	lt
 8003488:	4618      	movlt	r0, r3
 800348a:	e7a6      	b.n	80033da <_printf_i+0x166>
 800348c:	2301      	movs	r3, #1
 800348e:	4632      	mov	r2, r6
 8003490:	4649      	mov	r1, r9
 8003492:	4640      	mov	r0, r8
 8003494:	47d0      	blx	sl
 8003496:	3001      	adds	r0, #1
 8003498:	d09d      	beq.n	80033d6 <_printf_i+0x162>
 800349a:	3501      	adds	r5, #1
 800349c:	68e3      	ldr	r3, [r4, #12]
 800349e:	9903      	ldr	r1, [sp, #12]
 80034a0:	1a5b      	subs	r3, r3, r1
 80034a2:	42ab      	cmp	r3, r5
 80034a4:	dcf2      	bgt.n	800348c <_printf_i+0x218>
 80034a6:	e7eb      	b.n	8003480 <_printf_i+0x20c>
 80034a8:	2500      	movs	r5, #0
 80034aa:	f104 0619 	add.w	r6, r4, #25
 80034ae:	e7f5      	b.n	800349c <_printf_i+0x228>
 80034b0:	08003cf3 	.word	0x08003cf3
 80034b4:	08003d04 	.word	0x08003d04

080034b8 <__sflush_r>:
 80034b8:	898a      	ldrh	r2, [r1, #12]
 80034ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034bc:	4605      	mov	r5, r0
 80034be:	0710      	lsls	r0, r2, #28
 80034c0:	460c      	mov	r4, r1
 80034c2:	d457      	bmi.n	8003574 <__sflush_r+0xbc>
 80034c4:	684b      	ldr	r3, [r1, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	dc04      	bgt.n	80034d4 <__sflush_r+0x1c>
 80034ca:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	dc01      	bgt.n	80034d4 <__sflush_r+0x1c>
 80034d0:	2000      	movs	r0, #0
 80034d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80034d6:	2e00      	cmp	r6, #0
 80034d8:	d0fa      	beq.n	80034d0 <__sflush_r+0x18>
 80034da:	2300      	movs	r3, #0
 80034dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80034e0:	682f      	ldr	r7, [r5, #0]
 80034e2:	6a21      	ldr	r1, [r4, #32]
 80034e4:	602b      	str	r3, [r5, #0]
 80034e6:	d032      	beq.n	800354e <__sflush_r+0x96>
 80034e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80034ea:	89a3      	ldrh	r3, [r4, #12]
 80034ec:	075a      	lsls	r2, r3, #29
 80034ee:	d505      	bpl.n	80034fc <__sflush_r+0x44>
 80034f0:	6863      	ldr	r3, [r4, #4]
 80034f2:	1ac0      	subs	r0, r0, r3
 80034f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80034f6:	b10b      	cbz	r3, 80034fc <__sflush_r+0x44>
 80034f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80034fa:	1ac0      	subs	r0, r0, r3
 80034fc:	2300      	movs	r3, #0
 80034fe:	4602      	mov	r2, r0
 8003500:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003502:	4628      	mov	r0, r5
 8003504:	6a21      	ldr	r1, [r4, #32]
 8003506:	47b0      	blx	r6
 8003508:	1c43      	adds	r3, r0, #1
 800350a:	89a3      	ldrh	r3, [r4, #12]
 800350c:	d106      	bne.n	800351c <__sflush_r+0x64>
 800350e:	6829      	ldr	r1, [r5, #0]
 8003510:	291d      	cmp	r1, #29
 8003512:	d82b      	bhi.n	800356c <__sflush_r+0xb4>
 8003514:	4a28      	ldr	r2, [pc, #160]	; (80035b8 <__sflush_r+0x100>)
 8003516:	410a      	asrs	r2, r1
 8003518:	07d6      	lsls	r6, r2, #31
 800351a:	d427      	bmi.n	800356c <__sflush_r+0xb4>
 800351c:	2200      	movs	r2, #0
 800351e:	6062      	str	r2, [r4, #4]
 8003520:	6922      	ldr	r2, [r4, #16]
 8003522:	04d9      	lsls	r1, r3, #19
 8003524:	6022      	str	r2, [r4, #0]
 8003526:	d504      	bpl.n	8003532 <__sflush_r+0x7a>
 8003528:	1c42      	adds	r2, r0, #1
 800352a:	d101      	bne.n	8003530 <__sflush_r+0x78>
 800352c:	682b      	ldr	r3, [r5, #0]
 800352e:	b903      	cbnz	r3, 8003532 <__sflush_r+0x7a>
 8003530:	6560      	str	r0, [r4, #84]	; 0x54
 8003532:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003534:	602f      	str	r7, [r5, #0]
 8003536:	2900      	cmp	r1, #0
 8003538:	d0ca      	beq.n	80034d0 <__sflush_r+0x18>
 800353a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800353e:	4299      	cmp	r1, r3
 8003540:	d002      	beq.n	8003548 <__sflush_r+0x90>
 8003542:	4628      	mov	r0, r5
 8003544:	f7ff fa8e 	bl	8002a64 <_free_r>
 8003548:	2000      	movs	r0, #0
 800354a:	6360      	str	r0, [r4, #52]	; 0x34
 800354c:	e7c1      	b.n	80034d2 <__sflush_r+0x1a>
 800354e:	2301      	movs	r3, #1
 8003550:	4628      	mov	r0, r5
 8003552:	47b0      	blx	r6
 8003554:	1c41      	adds	r1, r0, #1
 8003556:	d1c8      	bne.n	80034ea <__sflush_r+0x32>
 8003558:	682b      	ldr	r3, [r5, #0]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d0c5      	beq.n	80034ea <__sflush_r+0x32>
 800355e:	2b1d      	cmp	r3, #29
 8003560:	d001      	beq.n	8003566 <__sflush_r+0xae>
 8003562:	2b16      	cmp	r3, #22
 8003564:	d101      	bne.n	800356a <__sflush_r+0xb2>
 8003566:	602f      	str	r7, [r5, #0]
 8003568:	e7b2      	b.n	80034d0 <__sflush_r+0x18>
 800356a:	89a3      	ldrh	r3, [r4, #12]
 800356c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003570:	81a3      	strh	r3, [r4, #12]
 8003572:	e7ae      	b.n	80034d2 <__sflush_r+0x1a>
 8003574:	690f      	ldr	r7, [r1, #16]
 8003576:	2f00      	cmp	r7, #0
 8003578:	d0aa      	beq.n	80034d0 <__sflush_r+0x18>
 800357a:	0793      	lsls	r3, r2, #30
 800357c:	bf18      	it	ne
 800357e:	2300      	movne	r3, #0
 8003580:	680e      	ldr	r6, [r1, #0]
 8003582:	bf08      	it	eq
 8003584:	694b      	ldreq	r3, [r1, #20]
 8003586:	1bf6      	subs	r6, r6, r7
 8003588:	600f      	str	r7, [r1, #0]
 800358a:	608b      	str	r3, [r1, #8]
 800358c:	2e00      	cmp	r6, #0
 800358e:	dd9f      	ble.n	80034d0 <__sflush_r+0x18>
 8003590:	4633      	mov	r3, r6
 8003592:	463a      	mov	r2, r7
 8003594:	4628      	mov	r0, r5
 8003596:	6a21      	ldr	r1, [r4, #32]
 8003598:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800359c:	47e0      	blx	ip
 800359e:	2800      	cmp	r0, #0
 80035a0:	dc06      	bgt.n	80035b0 <__sflush_r+0xf8>
 80035a2:	89a3      	ldrh	r3, [r4, #12]
 80035a4:	f04f 30ff 	mov.w	r0, #4294967295
 80035a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035ac:	81a3      	strh	r3, [r4, #12]
 80035ae:	e790      	b.n	80034d2 <__sflush_r+0x1a>
 80035b0:	4407      	add	r7, r0
 80035b2:	1a36      	subs	r6, r6, r0
 80035b4:	e7ea      	b.n	800358c <__sflush_r+0xd4>
 80035b6:	bf00      	nop
 80035b8:	dfbffffe 	.word	0xdfbffffe

080035bc <_fflush_r>:
 80035bc:	b538      	push	{r3, r4, r5, lr}
 80035be:	690b      	ldr	r3, [r1, #16]
 80035c0:	4605      	mov	r5, r0
 80035c2:	460c      	mov	r4, r1
 80035c4:	b913      	cbnz	r3, 80035cc <_fflush_r+0x10>
 80035c6:	2500      	movs	r5, #0
 80035c8:	4628      	mov	r0, r5
 80035ca:	bd38      	pop	{r3, r4, r5, pc}
 80035cc:	b118      	cbz	r0, 80035d6 <_fflush_r+0x1a>
 80035ce:	6a03      	ldr	r3, [r0, #32]
 80035d0:	b90b      	cbnz	r3, 80035d6 <_fflush_r+0x1a>
 80035d2:	f7ff f8df 	bl	8002794 <__sinit>
 80035d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d0f3      	beq.n	80035c6 <_fflush_r+0xa>
 80035de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80035e0:	07d0      	lsls	r0, r2, #31
 80035e2:	d404      	bmi.n	80035ee <_fflush_r+0x32>
 80035e4:	0599      	lsls	r1, r3, #22
 80035e6:	d402      	bmi.n	80035ee <_fflush_r+0x32>
 80035e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035ea:	f7ff fa24 	bl	8002a36 <__retarget_lock_acquire_recursive>
 80035ee:	4628      	mov	r0, r5
 80035f0:	4621      	mov	r1, r4
 80035f2:	f7ff ff61 	bl	80034b8 <__sflush_r>
 80035f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80035f8:	4605      	mov	r5, r0
 80035fa:	07da      	lsls	r2, r3, #31
 80035fc:	d4e4      	bmi.n	80035c8 <_fflush_r+0xc>
 80035fe:	89a3      	ldrh	r3, [r4, #12]
 8003600:	059b      	lsls	r3, r3, #22
 8003602:	d4e1      	bmi.n	80035c8 <_fflush_r+0xc>
 8003604:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003606:	f7ff fa17 	bl	8002a38 <__retarget_lock_release_recursive>
 800360a:	e7dd      	b.n	80035c8 <_fflush_r+0xc>

0800360c <__swbuf_r>:
 800360c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800360e:	460e      	mov	r6, r1
 8003610:	4614      	mov	r4, r2
 8003612:	4605      	mov	r5, r0
 8003614:	b118      	cbz	r0, 800361e <__swbuf_r+0x12>
 8003616:	6a03      	ldr	r3, [r0, #32]
 8003618:	b90b      	cbnz	r3, 800361e <__swbuf_r+0x12>
 800361a:	f7ff f8bb 	bl	8002794 <__sinit>
 800361e:	69a3      	ldr	r3, [r4, #24]
 8003620:	60a3      	str	r3, [r4, #8]
 8003622:	89a3      	ldrh	r3, [r4, #12]
 8003624:	071a      	lsls	r2, r3, #28
 8003626:	d525      	bpl.n	8003674 <__swbuf_r+0x68>
 8003628:	6923      	ldr	r3, [r4, #16]
 800362a:	b31b      	cbz	r3, 8003674 <__swbuf_r+0x68>
 800362c:	6823      	ldr	r3, [r4, #0]
 800362e:	6922      	ldr	r2, [r4, #16]
 8003630:	b2f6      	uxtb	r6, r6
 8003632:	1a98      	subs	r0, r3, r2
 8003634:	6963      	ldr	r3, [r4, #20]
 8003636:	4637      	mov	r7, r6
 8003638:	4283      	cmp	r3, r0
 800363a:	dc04      	bgt.n	8003646 <__swbuf_r+0x3a>
 800363c:	4621      	mov	r1, r4
 800363e:	4628      	mov	r0, r5
 8003640:	f7ff ffbc 	bl	80035bc <_fflush_r>
 8003644:	b9e0      	cbnz	r0, 8003680 <__swbuf_r+0x74>
 8003646:	68a3      	ldr	r3, [r4, #8]
 8003648:	3b01      	subs	r3, #1
 800364a:	60a3      	str	r3, [r4, #8]
 800364c:	6823      	ldr	r3, [r4, #0]
 800364e:	1c5a      	adds	r2, r3, #1
 8003650:	6022      	str	r2, [r4, #0]
 8003652:	701e      	strb	r6, [r3, #0]
 8003654:	6962      	ldr	r2, [r4, #20]
 8003656:	1c43      	adds	r3, r0, #1
 8003658:	429a      	cmp	r2, r3
 800365a:	d004      	beq.n	8003666 <__swbuf_r+0x5a>
 800365c:	89a3      	ldrh	r3, [r4, #12]
 800365e:	07db      	lsls	r3, r3, #31
 8003660:	d506      	bpl.n	8003670 <__swbuf_r+0x64>
 8003662:	2e0a      	cmp	r6, #10
 8003664:	d104      	bne.n	8003670 <__swbuf_r+0x64>
 8003666:	4621      	mov	r1, r4
 8003668:	4628      	mov	r0, r5
 800366a:	f7ff ffa7 	bl	80035bc <_fflush_r>
 800366e:	b938      	cbnz	r0, 8003680 <__swbuf_r+0x74>
 8003670:	4638      	mov	r0, r7
 8003672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003674:	4621      	mov	r1, r4
 8003676:	4628      	mov	r0, r5
 8003678:	f000 f806 	bl	8003688 <__swsetup_r>
 800367c:	2800      	cmp	r0, #0
 800367e:	d0d5      	beq.n	800362c <__swbuf_r+0x20>
 8003680:	f04f 37ff 	mov.w	r7, #4294967295
 8003684:	e7f4      	b.n	8003670 <__swbuf_r+0x64>
	...

08003688 <__swsetup_r>:
 8003688:	b538      	push	{r3, r4, r5, lr}
 800368a:	4b2a      	ldr	r3, [pc, #168]	; (8003734 <__swsetup_r+0xac>)
 800368c:	4605      	mov	r5, r0
 800368e:	6818      	ldr	r0, [r3, #0]
 8003690:	460c      	mov	r4, r1
 8003692:	b118      	cbz	r0, 800369c <__swsetup_r+0x14>
 8003694:	6a03      	ldr	r3, [r0, #32]
 8003696:	b90b      	cbnz	r3, 800369c <__swsetup_r+0x14>
 8003698:	f7ff f87c 	bl	8002794 <__sinit>
 800369c:	89a3      	ldrh	r3, [r4, #12]
 800369e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80036a2:	0718      	lsls	r0, r3, #28
 80036a4:	d422      	bmi.n	80036ec <__swsetup_r+0x64>
 80036a6:	06d9      	lsls	r1, r3, #27
 80036a8:	d407      	bmi.n	80036ba <__swsetup_r+0x32>
 80036aa:	2309      	movs	r3, #9
 80036ac:	602b      	str	r3, [r5, #0]
 80036ae:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80036b2:	f04f 30ff 	mov.w	r0, #4294967295
 80036b6:	81a3      	strh	r3, [r4, #12]
 80036b8:	e034      	b.n	8003724 <__swsetup_r+0x9c>
 80036ba:	0758      	lsls	r0, r3, #29
 80036bc:	d512      	bpl.n	80036e4 <__swsetup_r+0x5c>
 80036be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80036c0:	b141      	cbz	r1, 80036d4 <__swsetup_r+0x4c>
 80036c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80036c6:	4299      	cmp	r1, r3
 80036c8:	d002      	beq.n	80036d0 <__swsetup_r+0x48>
 80036ca:	4628      	mov	r0, r5
 80036cc:	f7ff f9ca 	bl	8002a64 <_free_r>
 80036d0:	2300      	movs	r3, #0
 80036d2:	6363      	str	r3, [r4, #52]	; 0x34
 80036d4:	89a3      	ldrh	r3, [r4, #12]
 80036d6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80036da:	81a3      	strh	r3, [r4, #12]
 80036dc:	2300      	movs	r3, #0
 80036de:	6063      	str	r3, [r4, #4]
 80036e0:	6923      	ldr	r3, [r4, #16]
 80036e2:	6023      	str	r3, [r4, #0]
 80036e4:	89a3      	ldrh	r3, [r4, #12]
 80036e6:	f043 0308 	orr.w	r3, r3, #8
 80036ea:	81a3      	strh	r3, [r4, #12]
 80036ec:	6923      	ldr	r3, [r4, #16]
 80036ee:	b94b      	cbnz	r3, 8003704 <__swsetup_r+0x7c>
 80036f0:	89a3      	ldrh	r3, [r4, #12]
 80036f2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80036f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036fa:	d003      	beq.n	8003704 <__swsetup_r+0x7c>
 80036fc:	4621      	mov	r1, r4
 80036fe:	4628      	mov	r0, r5
 8003700:	f000 f8ea 	bl	80038d8 <__smakebuf_r>
 8003704:	89a0      	ldrh	r0, [r4, #12]
 8003706:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800370a:	f010 0301 	ands.w	r3, r0, #1
 800370e:	d00a      	beq.n	8003726 <__swsetup_r+0x9e>
 8003710:	2300      	movs	r3, #0
 8003712:	60a3      	str	r3, [r4, #8]
 8003714:	6963      	ldr	r3, [r4, #20]
 8003716:	425b      	negs	r3, r3
 8003718:	61a3      	str	r3, [r4, #24]
 800371a:	6923      	ldr	r3, [r4, #16]
 800371c:	b943      	cbnz	r3, 8003730 <__swsetup_r+0xa8>
 800371e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003722:	d1c4      	bne.n	80036ae <__swsetup_r+0x26>
 8003724:	bd38      	pop	{r3, r4, r5, pc}
 8003726:	0781      	lsls	r1, r0, #30
 8003728:	bf58      	it	pl
 800372a:	6963      	ldrpl	r3, [r4, #20]
 800372c:	60a3      	str	r3, [r4, #8]
 800372e:	e7f4      	b.n	800371a <__swsetup_r+0x92>
 8003730:	2000      	movs	r0, #0
 8003732:	e7f7      	b.n	8003724 <__swsetup_r+0x9c>
 8003734:	20000064 	.word	0x20000064

08003738 <memmove>:
 8003738:	4288      	cmp	r0, r1
 800373a:	b510      	push	{r4, lr}
 800373c:	eb01 0402 	add.w	r4, r1, r2
 8003740:	d902      	bls.n	8003748 <memmove+0x10>
 8003742:	4284      	cmp	r4, r0
 8003744:	4623      	mov	r3, r4
 8003746:	d807      	bhi.n	8003758 <memmove+0x20>
 8003748:	1e43      	subs	r3, r0, #1
 800374a:	42a1      	cmp	r1, r4
 800374c:	d008      	beq.n	8003760 <memmove+0x28>
 800374e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003752:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003756:	e7f8      	b.n	800374a <memmove+0x12>
 8003758:	4601      	mov	r1, r0
 800375a:	4402      	add	r2, r0
 800375c:	428a      	cmp	r2, r1
 800375e:	d100      	bne.n	8003762 <memmove+0x2a>
 8003760:	bd10      	pop	{r4, pc}
 8003762:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003766:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800376a:	e7f7      	b.n	800375c <memmove+0x24>

0800376c <_raise_r>:
 800376c:	291f      	cmp	r1, #31
 800376e:	b538      	push	{r3, r4, r5, lr}
 8003770:	4604      	mov	r4, r0
 8003772:	460d      	mov	r5, r1
 8003774:	d904      	bls.n	8003780 <_raise_r+0x14>
 8003776:	2316      	movs	r3, #22
 8003778:	6003      	str	r3, [r0, #0]
 800377a:	f04f 30ff 	mov.w	r0, #4294967295
 800377e:	bd38      	pop	{r3, r4, r5, pc}
 8003780:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8003782:	b112      	cbz	r2, 800378a <_raise_r+0x1e>
 8003784:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003788:	b94b      	cbnz	r3, 800379e <_raise_r+0x32>
 800378a:	4620      	mov	r0, r4
 800378c:	f000 f830 	bl	80037f0 <_getpid_r>
 8003790:	462a      	mov	r2, r5
 8003792:	4601      	mov	r1, r0
 8003794:	4620      	mov	r0, r4
 8003796:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800379a:	f000 b817 	b.w	80037cc <_kill_r>
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d00a      	beq.n	80037b8 <_raise_r+0x4c>
 80037a2:	1c59      	adds	r1, r3, #1
 80037a4:	d103      	bne.n	80037ae <_raise_r+0x42>
 80037a6:	2316      	movs	r3, #22
 80037a8:	6003      	str	r3, [r0, #0]
 80037aa:	2001      	movs	r0, #1
 80037ac:	e7e7      	b.n	800377e <_raise_r+0x12>
 80037ae:	2400      	movs	r4, #0
 80037b0:	4628      	mov	r0, r5
 80037b2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80037b6:	4798      	blx	r3
 80037b8:	2000      	movs	r0, #0
 80037ba:	e7e0      	b.n	800377e <_raise_r+0x12>

080037bc <raise>:
 80037bc:	4b02      	ldr	r3, [pc, #8]	; (80037c8 <raise+0xc>)
 80037be:	4601      	mov	r1, r0
 80037c0:	6818      	ldr	r0, [r3, #0]
 80037c2:	f7ff bfd3 	b.w	800376c <_raise_r>
 80037c6:	bf00      	nop
 80037c8:	20000064 	.word	0x20000064

080037cc <_kill_r>:
 80037cc:	b538      	push	{r3, r4, r5, lr}
 80037ce:	2300      	movs	r3, #0
 80037d0:	4d06      	ldr	r5, [pc, #24]	; (80037ec <_kill_r+0x20>)
 80037d2:	4604      	mov	r4, r0
 80037d4:	4608      	mov	r0, r1
 80037d6:	4611      	mov	r1, r2
 80037d8:	602b      	str	r3, [r5, #0]
 80037da:	f7fc ff2d 	bl	8000638 <_kill>
 80037de:	1c43      	adds	r3, r0, #1
 80037e0:	d102      	bne.n	80037e8 <_kill_r+0x1c>
 80037e2:	682b      	ldr	r3, [r5, #0]
 80037e4:	b103      	cbz	r3, 80037e8 <_kill_r+0x1c>
 80037e6:	6023      	str	r3, [r4, #0]
 80037e8:	bd38      	pop	{r3, r4, r5, pc}
 80037ea:	bf00      	nop
 80037ec:	200002e4 	.word	0x200002e4

080037f0 <_getpid_r>:
 80037f0:	f7fc bf1b 	b.w	800062a <_getpid>

080037f4 <_sbrk_r>:
 80037f4:	b538      	push	{r3, r4, r5, lr}
 80037f6:	2300      	movs	r3, #0
 80037f8:	4d05      	ldr	r5, [pc, #20]	; (8003810 <_sbrk_r+0x1c>)
 80037fa:	4604      	mov	r4, r0
 80037fc:	4608      	mov	r0, r1
 80037fe:	602b      	str	r3, [r5, #0]
 8003800:	f7fc ff9e 	bl	8000740 <_sbrk>
 8003804:	1c43      	adds	r3, r0, #1
 8003806:	d102      	bne.n	800380e <_sbrk_r+0x1a>
 8003808:	682b      	ldr	r3, [r5, #0]
 800380a:	b103      	cbz	r3, 800380e <_sbrk_r+0x1a>
 800380c:	6023      	str	r3, [r4, #0]
 800380e:	bd38      	pop	{r3, r4, r5, pc}
 8003810:	200002e4 	.word	0x200002e4

08003814 <memchr>:
 8003814:	4603      	mov	r3, r0
 8003816:	b510      	push	{r4, lr}
 8003818:	b2c9      	uxtb	r1, r1
 800381a:	4402      	add	r2, r0
 800381c:	4293      	cmp	r3, r2
 800381e:	4618      	mov	r0, r3
 8003820:	d101      	bne.n	8003826 <memchr+0x12>
 8003822:	2000      	movs	r0, #0
 8003824:	e003      	b.n	800382e <memchr+0x1a>
 8003826:	7804      	ldrb	r4, [r0, #0]
 8003828:	3301      	adds	r3, #1
 800382a:	428c      	cmp	r4, r1
 800382c:	d1f6      	bne.n	800381c <memchr+0x8>
 800382e:	bd10      	pop	{r4, pc}

08003830 <_realloc_r>:
 8003830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003834:	4680      	mov	r8, r0
 8003836:	4614      	mov	r4, r2
 8003838:	460e      	mov	r6, r1
 800383a:	b921      	cbnz	r1, 8003846 <_realloc_r+0x16>
 800383c:	4611      	mov	r1, r2
 800383e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003842:	f7ff b97f 	b.w	8002b44 <_malloc_r>
 8003846:	b92a      	cbnz	r2, 8003854 <_realloc_r+0x24>
 8003848:	f7ff f90c 	bl	8002a64 <_free_r>
 800384c:	4625      	mov	r5, r4
 800384e:	4628      	mov	r0, r5
 8003850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003854:	f000 f89e 	bl	8003994 <_malloc_usable_size_r>
 8003858:	4284      	cmp	r4, r0
 800385a:	4607      	mov	r7, r0
 800385c:	d802      	bhi.n	8003864 <_realloc_r+0x34>
 800385e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003862:	d812      	bhi.n	800388a <_realloc_r+0x5a>
 8003864:	4621      	mov	r1, r4
 8003866:	4640      	mov	r0, r8
 8003868:	f7ff f96c 	bl	8002b44 <_malloc_r>
 800386c:	4605      	mov	r5, r0
 800386e:	2800      	cmp	r0, #0
 8003870:	d0ed      	beq.n	800384e <_realloc_r+0x1e>
 8003872:	42bc      	cmp	r4, r7
 8003874:	4622      	mov	r2, r4
 8003876:	4631      	mov	r1, r6
 8003878:	bf28      	it	cs
 800387a:	463a      	movcs	r2, r7
 800387c:	f7ff f8dd 	bl	8002a3a <memcpy>
 8003880:	4631      	mov	r1, r6
 8003882:	4640      	mov	r0, r8
 8003884:	f7ff f8ee 	bl	8002a64 <_free_r>
 8003888:	e7e1      	b.n	800384e <_realloc_r+0x1e>
 800388a:	4635      	mov	r5, r6
 800388c:	e7df      	b.n	800384e <_realloc_r+0x1e>

0800388e <__swhatbuf_r>:
 800388e:	b570      	push	{r4, r5, r6, lr}
 8003890:	460c      	mov	r4, r1
 8003892:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003896:	4615      	mov	r5, r2
 8003898:	2900      	cmp	r1, #0
 800389a:	461e      	mov	r6, r3
 800389c:	b096      	sub	sp, #88	; 0x58
 800389e:	da0c      	bge.n	80038ba <__swhatbuf_r+0x2c>
 80038a0:	89a3      	ldrh	r3, [r4, #12]
 80038a2:	2100      	movs	r1, #0
 80038a4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80038a8:	bf0c      	ite	eq
 80038aa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80038ae:	2340      	movne	r3, #64	; 0x40
 80038b0:	2000      	movs	r0, #0
 80038b2:	6031      	str	r1, [r6, #0]
 80038b4:	602b      	str	r3, [r5, #0]
 80038b6:	b016      	add	sp, #88	; 0x58
 80038b8:	bd70      	pop	{r4, r5, r6, pc}
 80038ba:	466a      	mov	r2, sp
 80038bc:	f000 f848 	bl	8003950 <_fstat_r>
 80038c0:	2800      	cmp	r0, #0
 80038c2:	dbed      	blt.n	80038a0 <__swhatbuf_r+0x12>
 80038c4:	9901      	ldr	r1, [sp, #4]
 80038c6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80038ca:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80038ce:	4259      	negs	r1, r3
 80038d0:	4159      	adcs	r1, r3
 80038d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038d6:	e7eb      	b.n	80038b0 <__swhatbuf_r+0x22>

080038d8 <__smakebuf_r>:
 80038d8:	898b      	ldrh	r3, [r1, #12]
 80038da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80038dc:	079d      	lsls	r5, r3, #30
 80038de:	4606      	mov	r6, r0
 80038e0:	460c      	mov	r4, r1
 80038e2:	d507      	bpl.n	80038f4 <__smakebuf_r+0x1c>
 80038e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80038e8:	6023      	str	r3, [r4, #0]
 80038ea:	6123      	str	r3, [r4, #16]
 80038ec:	2301      	movs	r3, #1
 80038ee:	6163      	str	r3, [r4, #20]
 80038f0:	b002      	add	sp, #8
 80038f2:	bd70      	pop	{r4, r5, r6, pc}
 80038f4:	466a      	mov	r2, sp
 80038f6:	ab01      	add	r3, sp, #4
 80038f8:	f7ff ffc9 	bl	800388e <__swhatbuf_r>
 80038fc:	9900      	ldr	r1, [sp, #0]
 80038fe:	4605      	mov	r5, r0
 8003900:	4630      	mov	r0, r6
 8003902:	f7ff f91f 	bl	8002b44 <_malloc_r>
 8003906:	b948      	cbnz	r0, 800391c <__smakebuf_r+0x44>
 8003908:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800390c:	059a      	lsls	r2, r3, #22
 800390e:	d4ef      	bmi.n	80038f0 <__smakebuf_r+0x18>
 8003910:	f023 0303 	bic.w	r3, r3, #3
 8003914:	f043 0302 	orr.w	r3, r3, #2
 8003918:	81a3      	strh	r3, [r4, #12]
 800391a:	e7e3      	b.n	80038e4 <__smakebuf_r+0xc>
 800391c:	89a3      	ldrh	r3, [r4, #12]
 800391e:	6020      	str	r0, [r4, #0]
 8003920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003924:	81a3      	strh	r3, [r4, #12]
 8003926:	9b00      	ldr	r3, [sp, #0]
 8003928:	6120      	str	r0, [r4, #16]
 800392a:	6163      	str	r3, [r4, #20]
 800392c:	9b01      	ldr	r3, [sp, #4]
 800392e:	b15b      	cbz	r3, 8003948 <__smakebuf_r+0x70>
 8003930:	4630      	mov	r0, r6
 8003932:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003936:	f000 f81d 	bl	8003974 <_isatty_r>
 800393a:	b128      	cbz	r0, 8003948 <__smakebuf_r+0x70>
 800393c:	89a3      	ldrh	r3, [r4, #12]
 800393e:	f023 0303 	bic.w	r3, r3, #3
 8003942:	f043 0301 	orr.w	r3, r3, #1
 8003946:	81a3      	strh	r3, [r4, #12]
 8003948:	89a3      	ldrh	r3, [r4, #12]
 800394a:	431d      	orrs	r5, r3
 800394c:	81a5      	strh	r5, [r4, #12]
 800394e:	e7cf      	b.n	80038f0 <__smakebuf_r+0x18>

08003950 <_fstat_r>:
 8003950:	b538      	push	{r3, r4, r5, lr}
 8003952:	2300      	movs	r3, #0
 8003954:	4d06      	ldr	r5, [pc, #24]	; (8003970 <_fstat_r+0x20>)
 8003956:	4604      	mov	r4, r0
 8003958:	4608      	mov	r0, r1
 800395a:	4611      	mov	r1, r2
 800395c:	602b      	str	r3, [r5, #0]
 800395e:	f7fc fec9 	bl	80006f4 <_fstat>
 8003962:	1c43      	adds	r3, r0, #1
 8003964:	d102      	bne.n	800396c <_fstat_r+0x1c>
 8003966:	682b      	ldr	r3, [r5, #0]
 8003968:	b103      	cbz	r3, 800396c <_fstat_r+0x1c>
 800396a:	6023      	str	r3, [r4, #0]
 800396c:	bd38      	pop	{r3, r4, r5, pc}
 800396e:	bf00      	nop
 8003970:	200002e4 	.word	0x200002e4

08003974 <_isatty_r>:
 8003974:	b538      	push	{r3, r4, r5, lr}
 8003976:	2300      	movs	r3, #0
 8003978:	4d05      	ldr	r5, [pc, #20]	; (8003990 <_isatty_r+0x1c>)
 800397a:	4604      	mov	r4, r0
 800397c:	4608      	mov	r0, r1
 800397e:	602b      	str	r3, [r5, #0]
 8003980:	f7fc fec7 	bl	8000712 <_isatty>
 8003984:	1c43      	adds	r3, r0, #1
 8003986:	d102      	bne.n	800398e <_isatty_r+0x1a>
 8003988:	682b      	ldr	r3, [r5, #0]
 800398a:	b103      	cbz	r3, 800398e <_isatty_r+0x1a>
 800398c:	6023      	str	r3, [r4, #0]
 800398e:	bd38      	pop	{r3, r4, r5, pc}
 8003990:	200002e4 	.word	0x200002e4

08003994 <_malloc_usable_size_r>:
 8003994:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003998:	1f18      	subs	r0, r3, #4
 800399a:	2b00      	cmp	r3, #0
 800399c:	bfbc      	itt	lt
 800399e:	580b      	ldrlt	r3, [r1, r0]
 80039a0:	18c0      	addlt	r0, r0, r3
 80039a2:	4770      	bx	lr

080039a4 <_gettimeofday>:
 80039a4:	2258      	movs	r2, #88	; 0x58
 80039a6:	4b02      	ldr	r3, [pc, #8]	; (80039b0 <_gettimeofday+0xc>)
 80039a8:	f04f 30ff 	mov.w	r0, #4294967295
 80039ac:	601a      	str	r2, [r3, #0]
 80039ae:	4770      	bx	lr
 80039b0:	200002e4 	.word	0x200002e4

080039b4 <_init>:
 80039b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039b6:	bf00      	nop
 80039b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ba:	bc08      	pop	{r3}
 80039bc:	469e      	mov	lr, r3
 80039be:	4770      	bx	lr

080039c0 <_fini>:
 80039c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039c2:	bf00      	nop
 80039c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039c6:	bc08      	pop	{r3}
 80039c8:	469e      	mov	lr, r3
 80039ca:	4770      	bx	lr
